
ariadne_atmega328_debug_16mhz_blink_shield.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00007fc4  00001058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fc4  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080011c  0080011c  00001074  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  00001085  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000029ac  00000000  00000000  000011fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d99  00000000  00000000  00003ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001902  00000000  00000000  00004942  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000049c  00000000  00000000  00006244  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008b1  00000000  00000000  000066e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001938  00000000  00000000  00006f91  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000088c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	62 c1       	rjmp	.+708    	; 0x72c6 <__ctors_end>
    7002:	00 00       	nop
    7004:	e5 c1       	rjmp	.+970    	; 0x73d0 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	e3 c1       	rjmp	.+966    	; 0x73d0 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	e1 c1       	rjmp	.+962    	; 0x73d0 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	df c1       	rjmp	.+958    	; 0x73d0 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	dd c1       	rjmp	.+954    	; 0x73d0 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	db c1       	rjmp	.+950    	; 0x73d0 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	d9 c1       	rjmp	.+946    	; 0x73d0 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	d7 c1       	rjmp	.+942    	; 0x73d0 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	d5 c1       	rjmp	.+938    	; 0x73d0 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	d3 c1       	rjmp	.+934    	; 0x73d0 <__bad_interrupt>
    702a:	00 00       	nop
    702c:	d1 c1       	rjmp	.+930    	; 0x73d0 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	cf c1       	rjmp	.+926    	; 0x73d0 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	cd c1       	rjmp	.+922    	; 0x73d0 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	cb c1       	rjmp	.+918    	; 0x73d0 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	c9 c1       	rjmp	.+914    	; 0x73d0 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	c7 c1       	rjmp	.+910    	; 0x73d0 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	c5 c1       	rjmp	.+906    	; 0x73d0 <__bad_interrupt>
    7046:	00 00       	nop
    7048:	c3 c1       	rjmp	.+902    	; 0x73d0 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	c1 c1       	rjmp	.+898    	; 0x73d0 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	bf c1       	rjmp	.+894    	; 0x73d0 <__bad_interrupt>
    7052:	00 00       	nop
    7054:	bd c1       	rjmp	.+890    	; 0x73d0 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	bb c1       	rjmp	.+886    	; 0x73d0 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	b9 c1       	rjmp	.+882    	; 0x73d0 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	b7 c1       	rjmp	.+878    	; 0x73d0 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	b5 c1       	rjmp	.+874    	; 0x73d0 <__bad_interrupt>
	...

00007068 <__trampolines_end>:
    7068:	53 74       	andi	r21, 0x43	; 67
    706a:	61 72       	andi	r22, 0x21	; 33
    706c:	74 20       	and	r7, r4
    706e:	75 73       	andi	r23, 0x35	; 53
    7070:	65 72       	andi	r22, 0x25	; 37
    7072:	20 61       	ori	r18, 0x10	; 16
    7074:	70 70       	andi	r23, 0x00	; 0
	...

00007077 <mDebugMain_TITLE>:
    7077:	41 72 69 61 64 6e 65 20 66 6f 72 20 41 72 64 75     Ariadne for Ardu
    7087:	69 6e 6f 20 55 6e 6f 2c 20 56 65 72 73 69 6f 6e     ino Uno, Version
    7097:	20 30 2e 35 00                                       0.5.

0000709c <mDebugMain_PREFIX>:
    709c:	4d 61 69 6e 3a 20 00                                Main: .

000070a3 <mDebugNet_DONE>:
    70a3:	4e 65 74 77 6f 72 6b 20 69 6e 69 74 20 64 6f 6e     Network init don
    70b3:	65 00                                               e.

000070b5 <mDebugNet_MAC>:
    70b5:	09 20 20 20 20 4d 41 43 3a 20 00                    .    MAC: .

000070c0 <mDebugNet_GW>:
    70c0:	09 47 61 74 65 77 61 79 3a 20 00                    .Gateway: .

000070cb <mDebugNet_SUBN>:
    70cb:	09 20 53 75 62 6e 65 74 3a 20 00                    . Subnet: .

000070d6 <mDebugNet_ADDR>:
    70d6:	09 41 64 64 72 65 73 73 3a 20 00                    .Address: .

000070e1 <mDebugNet_BUILTIN>:
    70e1:	42 75 69 6c 74 2d 69 6e 20 73 65 74 74 69 6e 67     Built-in setting
    70f1:	73 00                                               s.

000070f3 <mDebugNet_EEPROM>:
    70f3:	45 45 50 52 4f 4d 20 73 65 74 74 69 6e 67 73 00     EEPROM settings.

00007103 <mDebugNet_PREFIX>:
    7103:	20 4e 65 74 3a 20 00                                 Net: .

0000710a <tftp_invalid_image_packet>:
    710a:	13 00 05 00 00 49 6e 76 61 6c 69 64 20 69 6d 61     .....Invalid ima
    711a:	67 65 20 66 69 6c 65 00                             ge file.

00007122 <tftp_unknown_error_packet>:
    7122:	08 00 05 00 00 45 72 72 6f 72 00                    .....Error.

0000712d <tftp_full_error_packet>:
    712d:	09 00 05 00 03 46 75 6c 6c 00                       .....Full.

00007137 <tftp_opcode_error_packet>:
    7137:	0a 00 05 00 00 4f 70 63 6f 64 65 3f 00              .....Opcode?.

00007144 <mDebugTftp_SOCK>:
    7144:	49 6e 69 74 20 73 6f 63 6b 65 74 20 74 6f 20 70     Init socket to p
    7154:	6f 72 74 20 00                                      ort .

00007159 <mDebugTftp_PORT>:
    7159:	09 44 61 74 61 50 6f 72 74 3a 20 00                 .DataPort: .

00007165 <mDebugTftp_INIT>:
    7165:	54 46 54 50 20 73 65 72 76 65 72 20 69 6e 69 74     TFTP server init
    7175:	20 64 6f 6e 65 00                                    done.

0000717b <mDebugTftp_RESP>:
    717b:	52 65 73 70 6f 6e 73 65 20 73 65 6e 74 00           Response sent.

00007189 <mDebugTftp_SFACK>:
    7189:	53 65 6e 74 20 46 69 6e 61 6c 20 41 43 4b 00        Sent Final ACK.

00007198 <mDebugTftp_SACK>:
    7198:	53 65 6e 74 20 41 43 4b 00                          Sent ACK.

000071a1 <mDebugTftp_INVOP>:
    71a1:	49 6e 76 61 6c 69 64 20 6f 70 63 6f 64 65 20 00     Invalid opcode .

000071b1 <mDebugTftp_OPERR>:
    71b1:	45 72 72 6f 72 00                                   Error.

000071b7 <mDebugTftp_OPACK>:
    71b7:	41 63 6b 6e 6f 77 6c 65 64 67 65 00                 Acknowledge.

000071c3 <mDebugTftp_DONE>:
    71c3:	46 6c 61 73 68 69 6e 67 20 63 6f 6d 70 6c 65 74     Flashing complet
    71d3:	65 00                                               e.

000071d5 <mDebugTftp_PLEN>:
    71d5:	50 61 63 6b 65 74 20 6c 65 6e 67 74 68 20 61 64     Packet length ad
    71e5:	6a 75 73 74 65 64 20 74 6f 20 00                    justed to .

000071f0 <mDebugTftp_WRADDR>:
    71f0:	57 72 69 74 69 6e 67 20 64 61 74 61 20 66 72 6f     Writing data fro
    7200:	6d 20 61 64 64 72 65 73 73 20 00                    m address .

0000720b <mDebugTftp_FULL>:
    720b:	46 6c 61 73 68 20 69 73 20 66 75 6c 6c 00           Flash is full.

00007219 <mDebugTftp_NPORT>:
    7219:	43 68 61 6e 67 65 64 20 74 6f 20 70 6f 72 74 20     Changed to port 
	...

0000722a <mDebugTftp_OPDATA>:
    722a:	44 61 74 61 20 62 6c 6f 63 6b 00                    Data block.

00007235 <mDebugTftp_OPWRQ>:
    7235:	57 72 69 74 65 20 72 65 71 75 65 73 74 00           Write request.

00007243 <mDebugTftp_OPRRQ>:
    7243:	52 65 61 64 20 72 65 71 75 65 73 74 00              Read request.

00007250 <mDebugTftp_DLEN>:
    7250:	20 61 6e 64 20 64 61 74 61 20 6c 65 6e 67 74 68      and data length
    7260:	20 00                                                .

00007262 <mDebugTftp_OPCODE>:
    7262:	20 77 69 74 68 20 6f 70 63 6f 64 65 20 00            with opcode .

00007270 <mDebugTftp_BLOCK>:
    7270:	54 68 69 73 20 69 73 20 62 6c 6f 63 6b 20 00        This is block .

0000727f <mDebugTftp_RADDR>:
    727f:	53 65 74 20 75 70 20 72 65 74 75 72 6e 20 61 64     Set up return ad
    728f:	64 72 65 73 73 00                                   dress.

00007295 <mDebugTftp_OVFL>:
    7295:	4f 76 65 72 66 6c 6f 77 00                          Overflow.

0000729e <mDebugTftp_START>:
    729e:	50 72 6f 63 65 73 73 69 6e 67 20 70 61 63 6b 65     Processing packe
    72ae:	74 20 6f 66 20 73 69 7a 65 20 00                    t of size .

000072b9 <mDebugTftp_PREFIX>:
    72b9:	54 66 74 70 3a 20 00                                Tftp: .

000072c0 <mDebug_HEXPREF>:
    72c0:	30 78 00                                            0x.

000072c3 <mDebug_NEWLINE>:
    72c3:	0d 0a 00                                            ...

000072c6 <__ctors_end>:
    72c6:	11 24       	eor	r1, r1
    72c8:	1f be       	out	0x3f, r1	; 63
    72ca:	cf ef       	ldi	r28, 0xFF	; 255
    72cc:	d8 e0       	ldi	r29, 0x08	; 8
    72ce:	de bf       	out	0x3e, r29	; 62
    72d0:	cd bf       	out	0x3d, r28	; 61

000072d2 <__do_copy_data>:
    72d2:	11 e0       	ldi	r17, 0x01	; 1
    72d4:	a0 e0       	ldi	r26, 0x00	; 0
    72d6:	b1 e0       	ldi	r27, 0x01	; 1
    72d8:	e4 ec       	ldi	r30, 0xC4	; 196
    72da:	ff e7       	ldi	r31, 0x7F	; 127
    72dc:	02 c0       	rjmp	.+4      	; 0x72e2 <__do_copy_data+0x10>
    72de:	05 90       	lpm	r0, Z+
    72e0:	0d 92       	st	X+, r0
    72e2:	ac 31       	cpi	r26, 0x1C	; 28
    72e4:	b1 07       	cpc	r27, r17
    72e6:	d9 f7       	brne	.-10     	; 0x72de <__do_copy_data+0xc>

000072e8 <__do_clear_bss>:
    72e8:	21 e0       	ldi	r18, 0x01	; 1
    72ea:	ac e1       	ldi	r26, 0x1C	; 28
    72ec:	b1 e0       	ldi	r27, 0x01	; 1
    72ee:	01 c0       	rjmp	.+2      	; 0x72f2 <.do_clear_bss_start>

000072f0 <.do_clear_bss_loop>:
    72f0:	1d 92       	st	X+, r1

000072f2 <.do_clear_bss_start>:
    72f2:	ab 32       	cpi	r26, 0x2B	; 43
    72f4:	b2 07       	cpc	r27, r18
    72f6:	e1 f7       	brne	.-8      	; 0x72f0 <.do_clear_bss_loop>
    72f8:	01 d0       	rcall	.+2      	; 0x72fc <main>
    72fa:	62 c6       	rjmp	.+3268   	; 0x7fc0 <_exit>

000072fc <main>:

int main(void)
{
	/* Disable the watchdog timer to prevent
	 * eternal reset loop of doom and despair */
	MCUSR = 0;
    72fc:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    72fe:	88 e1       	ldi	r24, 0x18	; 24
    7300:	0f b6       	in	r0, 0x3f	; 63
    7302:	f8 94       	cli
    7304:	80 93 60 00 	sts	0x0060, r24
    7308:	10 92 60 00 	sts	0x0060, r1
    730c:	0f be       	out	0x3f, r0	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    730e:	2f ef       	ldi	r18, 0xFF	; 255
    7310:	83 ec       	ldi	r24, 0xC3	; 195
    7312:	99 e0       	ldi	r25, 0x09	; 9
    7314:	21 50       	subi	r18, 0x01	; 1
    7316:	80 40       	sbci	r24, 0x00	; 0
    7318:	90 40       	sbci	r25, 0x00	; 0
    731a:	e1 f7       	brne	.-8      	; 0x7314 <main+0x18>
    731c:	00 c0       	rjmp	.+0      	; 0x731e <main+0x22>
    731e:	00 00       	nop
	/* This code makes the following assumptions:
	 * No interrupts will execute
	 * SP points to RAMEND
	 * r1 contains zero */
	//cli();
	asm volatile("clr __zero_reg__");
    7320:	11 24       	eor	r1, r1
	// 0x02 -> ClkIO/8 -> 500ns period, 32ms max
	// 0X03 -> ClkIO/64 -> 4us period, 256ms max
	// 0x04 -> ClkIO/256 -> 16us period, 1024ms max
	// 0x05 -> ClkIO/1024 -> 64us period, 4096ms max
	// Set up Timer 1 as timekeeper for LED flashing
	TCCR1B = _BV(CS12) | _BV(CS10); // Same thing as TCCR1B = 0x05;
    7322:	85 e0       	ldi	r24, 0x05	; 5
    7324:	80 93 81 00 	sts	0x0081, r24

	/* Write version information in the EEPROM */
	if(eeprom_read_byte(EEPROM_MAJVER) != ARIADNE_MAJVER)
    7328:	80 e0       	ldi	r24, 0x00	; 0
    732a:	90 e0       	ldi	r25, 0x00	; 0
    732c:	33 d6       	rcall	.+3174   	; 0x7f94 <__eerd_byte_m328p>
    732e:	88 23       	and	r24, r24
    7330:	21 f0       	breq	.+8      	; 0x733a <main+0x3e>
		eeprom_write_byte(EEPROM_MAJVER, ARIADNE_MAJVER);
    7332:	60 e0       	ldi	r22, 0x00	; 0
    7334:	80 e0       	ldi	r24, 0x00	; 0
    7336:	90 e0       	ldi	r25, 0x00	; 0
    7338:	35 d6       	rcall	.+3178   	; 0x7fa4 <__eewr_byte_m328p>
	if(eeprom_read_byte(EEPROM_MINVER) != ARIADNE_MINVER)
    733a:	81 e0       	ldi	r24, 0x01	; 1
    733c:	90 e0       	ldi	r25, 0x00	; 0
    733e:	2a d6       	rcall	.+3156   	; 0x7f94 <__eerd_byte_m328p>
    7340:	84 30       	cpi	r24, 0x04	; 4
    7342:	21 f0       	breq	.+8      	; 0x734c <main+0x50>
		eeprom_write_byte(EEPROM_MINVER, ARIADNE_MINVER);
    7344:	64 e0       	ldi	r22, 0x04	; 4
    7346:	81 e0       	ldi	r24, 0x01	; 1
    7348:	90 e0       	ldi	r25, 0x00	; 0
    734a:	2c d6       	rcall	.+3160   	; 0x7fa4 <__eewr_byte_m328p>

	/* Initialize UART communication */
	serialInit();
    734c:	b7 d4       	rcall	.+2414   	; 0x7cbc <serialInit>
	DBG_MAIN(tracePGMlnMain(mDebugMain_TITLE);)
    734e:	67 e7       	ldi	r22, 0x77	; 119
    7350:	70 e7       	ldi	r23, 0x70	; 112
    7352:	8c e9       	ldi	r24, 0x9C	; 156
    7354:	90 e7       	ldi	r25, 0x70	; 112
    7356:	59 d4       	rcall	.+2226   	; 0x7c0a <tracePGMln>
		buttonInit();
	)

	/* Initalize SPI communication */
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_SPI);)
	spiInit();
    7358:	94 d0       	rcall	.+296    	; 0x7482 <spiInit>
	/* Initialize networking */
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_NET);)
	netInit();
    735a:	9c d0       	rcall	.+312    	; 0x7494 <netInit>

	/* Initialize the UDP socket for tftp */
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_TFTP);)
	tftpInit();
    735c:	32 d3       	rcall	.+1636   	; 0x79c2 <tftpInit>
#if defined(ANNOUNCE)
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_ANN);)
	announceInit();
#endif

	serialFlashing = FALSE;
    735e:	10 92 29 01 	sts	0x0129, r1
	tftpFlashing = FALSE;
    7362:	10 92 2a 01 	sts	0x012A, r1
			if(eeprom_read_byte(EEPROM_IMG_STAT) == EEPROM_IMG_OK_VALUE) break;

			//TODO: determine the conditions for reseting server OR reseting socket
			if(tftpFlashing == TRUE) {
				// Delete first page of flash memory
				boot_page_erase(0);
    7366:	13 e0       	ldi	r17, 0x03	; 3
    7368:	c0 e0       	ldi	r28, 0x00	; 0
    736a:	d0 e0       	ldi	r29, 0x00	; 0
	serialFlashing = FALSE;
	tftpFlashing = FALSE;

	for(;;) {
		// If there is no serial flashing under way, poll tftp
		if(!serialFlashing)
    736c:	80 91 29 01 	lds	r24, 0x0129
    7370:	88 23       	and	r24, r24
    7372:	29 f0       	breq	.+10     	; 0x737e <main+0x82>
			// If tftp recieved a FINAL_ACK, break
			if(tftpPoll() == 0)
				break;

		// If there is no tftp flashing, poll serial
		if(!tftpFlashing)
    7374:	80 91 2a 01 	lds	r24, 0x012A
    7378:	88 23       	and	r24, r24
    737a:	49 f0       	breq	.+18     	; 0x738e <main+0x92>
    737c:	04 c0       	rjmp	.+8      	; 0x7386 <main+0x8a>

	for(;;) {
		// If there is no serial flashing under way, poll tftp
		if(!serialFlashing)
			// If tftp recieved a FINAL_ACK, break
			if(tftpPoll() == 0)
    737e:	55 d3       	rcall	.+1706   	; 0x7a2a <tftpPoll>
    7380:	81 11       	cpse	r24, r1
    7382:	f8 cf       	rjmp	.-16     	; 0x7374 <main+0x78>
    7384:	1b c0       	rjmp	.+54     	; 0x73bc <main+0xc0>
		/* As explained above this goes out */
#if defined(ANNOUNCE)
		announcePoll();
#endif

		if(timedOut()) {
    7386:	f6 d4       	rcall	.+2540   	; 0x7d74 <timedOut>
    7388:	81 11       	cpse	r24, r1
    738a:	05 c0       	rjmp	.+10     	; 0x7396 <main+0x9a>
    738c:	15 c0       	rjmp	.+42     	; 0x73b8 <main+0xbc>
				break;

		// If there is no tftp flashing, poll serial
		if(!tftpFlashing)
			// If flashing is done exit
			if(serialPoll() == 0)
    738e:	bc d4       	rcall	.+2424   	; 0x7d08 <serialPoll>
    7390:	81 11       	cpse	r24, r1
    7392:	f9 cf       	rjmp	.-14     	; 0x7386 <main+0x8a>
    7394:	13 c0       	rjmp	.+38     	; 0x73bc <main+0xc0>
#if defined(ANNOUNCE)
		announcePoll();
#endif

		if(timedOut()) {
			if(eeprom_read_byte(EEPROM_IMG_STAT) == EEPROM_IMG_OK_VALUE) break;
    7396:	82 e0       	ldi	r24, 0x02	; 2
    7398:	90 e0       	ldi	r25, 0x00	; 0
    739a:	fc d5       	rcall	.+3064   	; 0x7f94 <__eerd_byte_m328p>
    739c:	8e 3e       	cpi	r24, 0xEE	; 238
    739e:	71 f0       	breq	.+28     	; 0x73bc <main+0xc0>

			//TODO: determine the conditions for reseting server OR reseting socket
			if(tftpFlashing == TRUE) {
    73a0:	80 91 2a 01 	lds	r24, 0x012A
    73a4:	81 30       	cpi	r24, 0x01	; 1
    73a6:	41 f4       	brne	.+16     	; 0x73b8 <main+0xbc>
				// Delete first page of flash memory
				boot_page_erase(0);
    73a8:	fe 01       	movw	r30, r28
    73aa:	10 93 57 00 	sts	0x0057, r17
    73ae:	e8 95       	spm
				// Reinitialize TFTP
				tftpInit();
    73b0:	08 d3       	rcall	.+1552   	; 0x79c2 <tftpInit>
				// Reset the timeout counter
				resetTick();
    73b2:	d7 d4       	rcall	.+2478   	; 0x7d62 <resetTick>
				// Unset tftp flag
				tftpFlashing = FALSE;
    73b4:	10 92 2a 01 	sts	0x012A, r1
			}
		}
		/* Blink the notification led */
#ifndef DISABLE_BLINK
		updateLed();
    73b8:	b2 d4       	rcall	.+2404   	; 0x7d1e <updateLed>
#endif  //DISABLE_BLINK
	}
    73ba:	d8 cf       	rjmp	.-80     	; 0x736c <main+0x70>

	/* Exit to user application */
	DBG_MAIN(tracePGMlnMain(mDebugMain_EXIT);)
    73bc:	68 e6       	ldi	r22, 0x68	; 104
    73be:	70 e7       	ldi	r23, 0x70	; 112
    73c0:	8c e9       	ldi	r24, 0x9C	; 156
    73c2:	90 e7       	ldi	r25, 0x70	; 112
    73c4:	22 d4       	rcall	.+2116   	; 0x7c0a <tracePGMln>
	asm volatile(
    73c6:	ee 27       	eor	r30, r30
    73c8:	ff 27       	eor	r31, r31
    73ca:	09 94       	ijmp
		"clr	r31		\n\t"
		"ijmp	\n\t"
	);
	//appStart();
	//return(0); /* never reached */
}
    73cc:	80 e0       	ldi	r24, 0x00	; 0
    73ce:	90 e0       	ldi	r25, 0x00	; 0

000073d0 <__bad_interrupt>:
    73d0:	17 ce       	rjmp	.-978    	; 0x7000 <__vectors>

000073d2 <spiWriteReg>:
		tracenum(address);
		tracePGM(mDebugSpi_COMMA);
		tracenum(value);
	)

	SPCR = _BV(SPE) | _BV(MSTR); // Set SPI as master
    73d2:	20 e5       	ldi	r18, 0x50	; 80
    73d4:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
    73d6:	2a 98       	cbi	0x05, 2	; 5

	SPDR = SPI_WRITE;
    73d8:	20 ef       	ldi	r18, 0xF0	; 240
    73da:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    73dc:	0d b4       	in	r0, 0x2d	; 45
    73de:	07 fe       	sbrs	r0, 7
    73e0:	fd cf       	rjmp	.-6      	; 0x73dc <spiWriteReg+0xa>

	SPDR = address >> 8;
    73e2:	29 2f       	mov	r18, r25
    73e4:	33 27       	eor	r19, r19
    73e6:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    73e8:	0d b4       	in	r0, 0x2d	; 45
    73ea:	07 fe       	sbrs	r0, 7
    73ec:	fd cf       	rjmp	.-6      	; 0x73e8 <spiWriteReg+0x16>

	SPDR = address & 0xff;
    73ee:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    73f0:	0d b4       	in	r0, 0x2d	; 45
    73f2:	07 fe       	sbrs	r0, 7
    73f4:	fd cf       	rjmp	.-6      	; 0x73f0 <spiWriteReg+0x1e>

	SPDR = value;
    73f6:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & _BV(SPIF)));
    73f8:	0d b4       	in	r0, 0x2d	; 45
    73fa:	07 fe       	sbrs	r0, 7
    73fc:	fd cf       	rjmp	.-6      	; 0x73f8 <spiWriteReg+0x26>

	SS_HIGH();
    73fe:	2a 9a       	sbi	0x05, 2	; 5
	SPCR = 0; // Turn off SPI
    7400:	1c bc       	out	0x2c, r1	; 44
    7402:	08 95       	ret

00007404 <spiWriteWord>:
}

void spiWriteWord(uint16_t address, uint16_t value)
{
    7404:	0f 93       	push	r16
    7406:	1f 93       	push	r17
    7408:	cf 93       	push	r28
    740a:	df 93       	push	r29
    740c:	8c 01       	movw	r16, r24
    740e:	eb 01       	movw	r28, r22
	// Write uint16_t to Ethernet controller
	spiWriteReg(address++, value >> 8);
    7410:	67 2f       	mov	r22, r23
    7412:	77 27       	eor	r23, r23
    7414:	de df       	rcall	.-68     	; 0x73d2 <spiWriteReg>
	spiWriteReg(address, value & 0xff);
    7416:	6c 2f       	mov	r22, r28
    7418:	c8 01       	movw	r24, r16
    741a:	01 96       	adiw	r24, 0x01	; 1
}
    741c:	df 91       	pop	r29
    741e:	cf 91       	pop	r28
    7420:	1f 91       	pop	r17
    7422:	0f 91       	pop	r16

void spiWriteWord(uint16_t address, uint16_t value)
{
	// Write uint16_t to Ethernet controller
	spiWriteReg(address++, value >> 8);
	spiWriteReg(address, value & 0xff);
    7424:	d6 cf       	rjmp	.-84     	; 0x73d2 <spiWriteReg>

00007426 <spiReadReg>:
	)
	#endif

	uint8_t returnValue;

	SPCR = _BV(SPE) | _BV(MSTR);
    7426:	20 e5       	ldi	r18, 0x50	; 80
    7428:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
    742a:	2a 98       	cbi	0x05, 2	; 5

	SPDR = SPI_READ;
    742c:	2f e0       	ldi	r18, 0x0F	; 15
    742e:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    7430:	0d b4       	in	r0, 0x2d	; 45
    7432:	07 fe       	sbrs	r0, 7
    7434:	fd cf       	rjmp	.-6      	; 0x7430 <spiReadReg+0xa>

	SPDR = address >> 8;
    7436:	29 2f       	mov	r18, r25
    7438:	33 27       	eor	r19, r19
    743a:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    743c:	0d b4       	in	r0, 0x2d	; 45
    743e:	07 fe       	sbrs	r0, 7
    7440:	fd cf       	rjmp	.-6      	; 0x743c <spiReadReg+0x16>

	SPDR = address & 0xff;
    7442:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    7444:	0d b4       	in	r0, 0x2d	; 45
    7446:	07 fe       	sbrs	r0, 7
    7448:	fd cf       	rjmp	.-6      	; 0x7444 <spiReadReg+0x1e>

	SPDR = 0;
    744a:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
    744c:	0d b4       	in	r0, 0x2d	; 45
    744e:	07 fe       	sbrs	r0, 7
    7450:	fd cf       	rjmp	.-6      	; 0x744c <spiReadReg+0x26>

	SS_HIGH();
    7452:	2a 9a       	sbi	0x05, 2	; 5
	returnValue = SPDR;
    7454:	8e b5       	in	r24, 0x2e	; 46
	SPCR = 0;
    7456:	1c bc       	out	0x2c, r1	; 44

	return(returnValue);
}
    7458:	08 95       	ret

0000745a <spiReadWord>:

uint16_t spiReadWord(uint16_t address)
{
    745a:	1f 93       	push	r17
    745c:	cf 93       	push	r28
    745e:	df 93       	push	r29
    7460:	ec 01       	movw	r28, r24
	// Read uint16_t from Ethernet controller
	return((spiReadReg(address) << 8) | spiReadReg(address + 1));
    7462:	e1 df       	rcall	.-62     	; 0x7426 <spiReadReg>
    7464:	18 2f       	mov	r17, r24
    7466:	ce 01       	movw	r24, r28
    7468:	01 96       	adiw	r24, 0x01	; 1
    746a:	dd df       	rcall	.-70     	; 0x7426 <spiReadReg>
    746c:	21 2f       	mov	r18, r17
    746e:	30 e0       	ldi	r19, 0x00	; 0
    7470:	32 2f       	mov	r19, r18
    7472:	22 27       	eor	r18, r18
}
    7474:	a9 01       	movw	r20, r18
    7476:	48 2b       	or	r20, r24
    7478:	ca 01       	movw	r24, r20
    747a:	df 91       	pop	r29
    747c:	cf 91       	pop	r28
    747e:	1f 91       	pop	r17
    7480:	08 95       	ret

00007482 <spiInit>:
	 * At this stage all pins are set to HIGH. This in fact DISABLES SPI for both Ethernet and SD.
	 * SS pin for ethernet is pulled low just in time for reading or writing data inside those
	 * functions. */

	/** Set SPI pins high */
	SPI_PORT = _BV(SCK) | _BV(MISO) | _BV(MOSI) | _BV(SS);
    7482:	8c e3       	ldi	r24, 0x3C	; 60
    7484:	85 b9       	out	0x05, r24	; 5
	/** Set SPI pins as output */
	SPI_DDR = _BV(SCK) | _BV(MOSI) | _BV(SS);
    7486:	8c e2       	ldi	r24, 0x2C	; 44
    7488:	84 b9       	out	0x04, r24	; 4
	#endif

	/** Disable SD card */
	/** Set SD SS pin high */
	#ifndef NOT_SHIELD  //don't do anything to the pin if the SD hardware is not installed
	SD_PORT |= _BV(SD_SS);
    748a:	5c 9a       	sbi	0x0b, 4	; 11
	/** Set SD SS pin as output */
	SD_DDR |= _BV(SD_SS);
    748c:	54 9a       	sbi	0x0a, 4	; 10
	#endif  //LED != SCK
	#endif  //DISABLE_BLINK

	/** Set up SPI
	 ** Set the Double SPI Speed Bit */
	SPSR = (1 << SPI2X);
    748e:	81 e0       	ldi	r24, 0x01	; 1
    7490:	8d bd       	out	0x2d, r24	; 45
    7492:	08 95       	ret

00007494 <netInit>:
	0x55          // TMSR Tx Memory Size Register, 2K per socket
};


void netInit(void)
{
    7494:	0f 93       	push	r16
    7496:	1f 93       	push	r17
    7498:	cf 93       	push	r28
    749a:	df 93       	push	r29
	uint8_t i;

	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
    749c:	83 e0       	ldi	r24, 0x03	; 3
    749e:	90 e0       	ldi	r25, 0x00	; 0
    74a0:	79 d5       	rcall	.+2802   	; 0x7f94 <__eerd_byte_m328p>
    74a2:	85 35       	cpi	r24, 0x55	; 85
    74a4:	a9 f4       	brne	.+42     	; 0x74d0 <netInit+0x3c>
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {
    74a6:	84 e0       	ldi	r24, 0x04	; 4
    74a8:	90 e0       	ldi	r25, 0x00	; 0
    74aa:	74 d5       	rcall	.+2792   	; 0x7f94 <__eerd_byte_m328p>
    74ac:	8a 3a       	cpi	r24, 0xAA	; 170
    74ae:	81 f4       	brne	.+32     	; 0x74d0 <netInit+0x3c>
    74b0:	01 e0       	ldi	r16, 0x01	; 1
    74b2:	11 e0       	ldi	r17, 0x01	; 1
    74b4:	c5 e0       	ldi	r28, 0x05	; 5
    74b6:	d0 e0       	ldi	r29, 0x00	; 0

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
			registerBuffer[i + 1] = eeprom_read_byte(EEPROM_DATA + i);
    74b8:	ce 01       	movw	r24, r28
    74ba:	6c d5       	rcall	.+2776   	; 0x7f94 <__eerd_byte_m328p>
    74bc:	f8 01       	movw	r30, r16
    74be:	81 93       	st	Z+, r24
    74c0:	8f 01       	movw	r16, r30
    74c2:	21 96       	adiw	r28, 0x01	; 1
	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
    74c4:	c7 31       	cpi	r28, 0x17	; 23
    74c6:	d1 05       	cpc	r29, r1
    74c8:	b9 f7       	brne	.-18     	; 0x74b8 <netInit+0x24>
			registerBuffer[i + 1] = eeprom_read_byte(EEPROM_DATA + i);

		DBG_NET(tracePGMlnNet(mDebugNet_EEPROM);)
    74ca:	63 ef       	ldi	r22, 0xF3	; 243
    74cc:	70 e7       	ldi	r23, 0x70	; 112
    74ce:	02 c0       	rjmp	.+4      	; 0x74d4 <netInit+0x40>

	}
	DBG_NET(
    74d0:	61 ee       	ldi	r22, 0xE1	; 225
    74d2:	70 e7       	ldi	r23, 0x70	; 112
    74d4:	83 e0       	ldi	r24, 0x03	; 3
    74d6:	91 e7       	ldi	r25, 0x71	; 113
    74d8:	98 d3       	rcall	.+1840   	; 0x7c0a <tracePGMln>
		else tracePGMlnNet(mDebugNet_BUILTIN);
	)


	DBG_NET(
    74da:	66 ed       	ldi	r22, 0xD6	; 214
    74dc:	70 e7       	ldi	r23, 0x70	; 112
    74de:	83 e0       	ldi	r24, 0x03	; 3
    74e0:	91 e7       	ldi	r25, 0x71	; 113
    74e2:	93 d3       	rcall	.+1830   	; 0x7c0a <tracePGMln>
    74e4:	cf e0       	ldi	r28, 0x0F	; 15
    74e6:	d1 e0       	ldi	r29, 0x01	; 1
    74e8:	1f e0       	ldi	r17, 0x0F	; 15
    74ea:	69 91       	ld	r22, Y+
    74ec:	70 e0       	ldi	r23, 0x00	; 0
    74ee:	80 e0       	ldi	r24, 0x00	; 0
    74f0:	90 e0       	ldi	r25, 0x00	; 0
    74f2:	42 e0       	ldi	r20, 0x02	; 2
    74f4:	bb d3       	rcall	.+1910   	; 0x7c6c <tracehex>
    74f6:	12 31       	cpi	r17, 0x12	; 18
    74f8:	11 f0       	breq	.+4      	; 0x74fe <netInit+0x6a>
    74fa:	8e e2       	ldi	r24, 0x2E	; 46
    74fc:	ec d3       	rcall	.+2008   	; 0x7cd6 <putch>
    74fe:	1f 5f       	subi	r17, 0xFF	; 255
    7500:	13 31       	cpi	r17, 0x13	; 19
    7502:	99 f7       	brne	.-26     	; 0x74ea <netInit+0x56>
    7504:	6b ec       	ldi	r22, 0xCB	; 203
    7506:	70 e7       	ldi	r23, 0x70	; 112
    7508:	83 e0       	ldi	r24, 0x03	; 3
    750a:	91 e7       	ldi	r25, 0x71	; 113
    750c:	7e d3       	rcall	.+1788   	; 0x7c0a <tracePGMln>
    750e:	c5 e0       	ldi	r28, 0x05	; 5
    7510:	d1 e0       	ldi	r29, 0x01	; 1
    7512:	15 e0       	ldi	r17, 0x05	; 5
    7514:	69 91       	ld	r22, Y+
    7516:	70 e0       	ldi	r23, 0x00	; 0
    7518:	80 e0       	ldi	r24, 0x00	; 0
    751a:	90 e0       	ldi	r25, 0x00	; 0
    751c:	42 e0       	ldi	r20, 0x02	; 2
    751e:	a6 d3       	rcall	.+1868   	; 0x7c6c <tracehex>
    7520:	18 30       	cpi	r17, 0x08	; 8
    7522:	11 f0       	breq	.+4      	; 0x7528 <netInit+0x94>
    7524:	8e e2       	ldi	r24, 0x2E	; 46
    7526:	d7 d3       	rcall	.+1966   	; 0x7cd6 <putch>
    7528:	1f 5f       	subi	r17, 0xFF	; 255
    752a:	19 30       	cpi	r17, 0x09	; 9
    752c:	99 f7       	brne	.-26     	; 0x7514 <netInit+0x80>
    752e:	60 ec       	ldi	r22, 0xC0	; 192
    7530:	70 e7       	ldi	r23, 0x70	; 112
    7532:	83 e0       	ldi	r24, 0x03	; 3
    7534:	91 e7       	ldi	r25, 0x71	; 113
    7536:	69 d3       	rcall	.+1746   	; 0x7c0a <tracePGMln>
    7538:	c1 e0       	ldi	r28, 0x01	; 1
    753a:	d1 e0       	ldi	r29, 0x01	; 1
    753c:	01 e0       	ldi	r16, 0x01	; 1
    753e:	69 91       	ld	r22, Y+
    7540:	70 e0       	ldi	r23, 0x00	; 0
    7542:	80 e0       	ldi	r24, 0x00	; 0
    7544:	90 e0       	ldi	r25, 0x00	; 0
    7546:	42 e0       	ldi	r20, 0x02	; 2
    7548:	91 d3       	rcall	.+1826   	; 0x7c6c <tracehex>
    754a:	04 30       	cpi	r16, 0x04	; 4
    754c:	11 f0       	breq	.+4      	; 0x7552 <netInit+0xbe>
    754e:	8e e2       	ldi	r24, 0x2E	; 46
    7550:	c2 d3       	rcall	.+1924   	; 0x7cd6 <putch>
    7552:	0f 5f       	subi	r16, 0xFF	; 255
    7554:	05 30       	cpi	r16, 0x05	; 5
    7556:	99 f7       	brne	.-26     	; 0x753e <netInit+0xaa>
    7558:	65 eb       	ldi	r22, 0xB5	; 181
    755a:	70 e7       	ldi	r23, 0x70	; 112
    755c:	83 e0       	ldi	r24, 0x03	; 3
    755e:	91 e7       	ldi	r25, 0x71	; 113
    7560:	54 d3       	rcall	.+1704   	; 0x7c0a <tracePGMln>
    7562:	c9 e0       	ldi	r28, 0x09	; 9
    7564:	d1 e0       	ldi	r29, 0x01	; 1
    7566:	69 91       	ld	r22, Y+
    7568:	70 e0       	ldi	r23, 0x00	; 0
    756a:	80 e0       	ldi	r24, 0x00	; 0
    756c:	90 e0       	ldi	r25, 0x00	; 0
    756e:	42 e0       	ldi	r20, 0x02	; 2
    7570:	7d d3       	rcall	.+1786   	; 0x7c6c <tracehex>
    7572:	1e 30       	cpi	r17, 0x0E	; 14
    7574:	11 f0       	breq	.+4      	; 0x757a <netInit+0xe6>
    7576:	8e e2       	ldi	r24, 0x2E	; 46
    7578:	ae d3       	rcall	.+1884   	; 0x7cd6 <putch>
    757a:	1f 5f       	subi	r17, 0xFF	; 255
    757c:	1f 30       	cpi	r17, 0x0F	; 15
    757e:	99 f7       	brne	.-26     	; 0x7566 <netInit+0xd2>
    7580:	00 e0       	ldi	r16, 0x00	; 0
    7582:	11 e0       	ldi	r17, 0x01	; 1
    7584:	c0 e0       	ldi	r28, 0x00	; 0
    7586:	d0 e0       	ldi	r29, 0x00	; 0
		}
	)

	/** Configure Wiznet chip. Network settings */
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
		spiWriteReg(i, registerBuffer[i]);
    7588:	f8 01       	movw	r30, r16
    758a:	61 91       	ld	r22, Z+
    758c:	8f 01       	movw	r16, r30
    758e:	ce 01       	movw	r24, r28
    7590:	20 df       	rcall	.-448    	; 0x73d2 <spiWriteReg>
    7592:	21 96       	adiw	r28, 0x01	; 1
			if(i != 14) putch(0x2E);
		}
	)

	/** Configure Wiznet chip. Network settings */
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
    7594:	cc 31       	cpi	r28, 0x1C	; 28
    7596:	d1 05       	cpc	r29, r1
    7598:	b9 f7       	brne	.-18     	; 0x7588 <netInit+0xf4>
		spiWriteReg(i, registerBuffer[i]);

	DBG_NET(tracePGMlnNet(mDebugNet_DONE);)
    759a:	63 ea       	ldi	r22, 0xA3	; 163
    759c:	70 e7       	ldi	r23, 0x70	; 112
    759e:	83 e0       	ldi	r24, 0x03	; 3
    75a0:	91 e7       	ldi	r25, 0x71	; 113
}
    75a2:	df 91       	pop	r29
    75a4:	cf 91       	pop	r28
    75a6:	1f 91       	pop	r17
    75a8:	0f 91       	pop	r16

	/** Configure Wiznet chip. Network settings */
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
		spiWriteReg(i, registerBuffer[i]);

	DBG_NET(tracePGMlnNet(mDebugNet_DONE);)
    75aa:	2f c3       	rjmp	.+1630   	; 0x7c0a <tracePGMln>

000075ac <sockInit>:

uint16_t lastPacket = 0, highPacket = 0;


static void sockInit(uint16_t port)
{
    75ac:	cf 93       	push	r28
    75ae:	df 93       	push	r29
    75b0:	ec 01       	movw	r28, r24
	DBG_TFTP(
    75b2:	64 e4       	ldi	r22, 0x44	; 68
    75b4:	71 e7       	ldi	r23, 0x71	; 113
    75b6:	89 eb       	ldi	r24, 0xB9	; 185
    75b8:	92 e7       	ldi	r25, 0x72	; 114
    75ba:	27 d3       	rcall	.+1614   	; 0x7c0a <tracePGMln>
    75bc:	be 01       	movw	r22, r28
    75be:	80 e0       	ldi	r24, 0x00	; 0
    75c0:	90 e0       	ldi	r25, 0x00	; 0
    75c2:	44 e0       	ldi	r20, 0x04	; 4
    75c4:	53 d3       	rcall	.+1702   	; 0x7c6c <tracehex>
		tracePGMlnTftp(mDebugTftp_SOCK);
		tracenum(port);
	)

	spiWriteReg(REG_S3_CR, CR_CLOSE);
    75c6:	60 e1       	ldi	r22, 0x10	; 16
    75c8:	81 e0       	ldi	r24, 0x01	; 1
    75ca:	97 e0       	ldi	r25, 0x07	; 7
    75cc:	02 df       	rcall	.-508    	; 0x73d2 <spiWriteReg>

	do {
		// Write TFTP Port
		spiWriteWord(REG_S3_PORT0, port);
    75ce:	be 01       	movw	r22, r28
    75d0:	84 e0       	ldi	r24, 0x04	; 4
    75d2:	97 e0       	ldi	r25, 0x07	; 7
    75d4:	17 df       	rcall	.-466    	; 0x7404 <spiWriteWord>
		// Write mode
		spiWriteReg(REG_S3_MR, MR_UDP);
    75d6:	62 e0       	ldi	r22, 0x02	; 2
    75d8:	80 e0       	ldi	r24, 0x00	; 0
    75da:	97 e0       	ldi	r25, 0x07	; 7
    75dc:	fa de       	rcall	.-524    	; 0x73d2 <spiWriteReg>
		// Open Socket
		spiWriteReg(REG_S3_CR, CR_OPEN);
    75de:	61 e0       	ldi	r22, 0x01	; 1
    75e0:	81 e0       	ldi	r24, 0x01	; 1
    75e2:	97 e0       	ldi	r25, 0x07	; 7
    75e4:	f6 de       	rcall	.-532    	; 0x73d2 <spiWriteReg>

		// Read Status
		if(spiReadReg(REG_S3_SR) != SOCK_UDP)
    75e6:	83 e0       	ldi	r24, 0x03	; 3
    75e8:	97 e0       	ldi	r25, 0x07	; 7
    75ea:	1d df       	rcall	.-454    	; 0x7426 <spiReadReg>
    75ec:	82 32       	cpi	r24, 0x22	; 34
    75ee:	21 f0       	breq	.+8      	; 0x75f8 <sockInit+0x4c>
			// Close Socket if it wasn't initialized correctly
			spiWriteReg(REG_S3_CR, CR_CLOSE);
    75f0:	60 e1       	ldi	r22, 0x10	; 16
    75f2:	81 e0       	ldi	r24, 0x01	; 1
    75f4:	97 e0       	ldi	r25, 0x07	; 7
    75f6:	ed de       	rcall	.-550    	; 0x73d2 <spiWriteReg>

		// If socket correctly opened continue
	} while(spiReadReg(REG_S3_SR) != SOCK_UDP);
    75f8:	83 e0       	ldi	r24, 0x03	; 3
    75fa:	97 e0       	ldi	r25, 0x07	; 7
    75fc:	14 df       	rcall	.-472    	; 0x7426 <spiReadReg>
    75fe:	82 32       	cpi	r24, 0x22	; 34
    7600:	31 f7       	brne	.-52     	; 0x75ce <sockInit+0x22>
}
    7602:	df 91       	pop	r29
    7604:	cf 91       	pop	r28
    7606:	08 95       	ret

00007608 <processPacket>:
#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
#else
static uint8_t processPacket(void)
#endif
{
    7608:	8f 92       	push	r8
    760a:	9f 92       	push	r9
    760c:	af 92       	push	r10
    760e:	bf 92       	push	r11
    7610:	cf 92       	push	r12
    7612:	df 92       	push	r13
    7614:	ef 92       	push	r14
    7616:	ff 92       	push	r15
    7618:	0f 93       	push	r16
    761a:	1f 93       	push	r17
    761c:	cf 93       	push	r28
    761e:	df 93       	push	r29
    7620:	cd b7       	in	r28, 0x3d	; 61
    7622:	de b7       	in	r29, 0x3e	; 62
    7624:	cd 50       	subi	r28, 0x0D	; 13
    7626:	d2 40       	sbci	r29, 0x02	; 2
    7628:	de bf       	out	0x3e, r29	; 62
    762a:	cd bf       	out	0x3d, r28	; 61
    762c:	8c 01       	movw	r16, r24
	address_t writeAddr;
	// Transfer entire packet to RAM
	uint8_t* bufPtr = buffer;
	uint16_t count;

	DBG_TFTP(
    762e:	6e e9       	ldi	r22, 0x9E	; 158
    7630:	72 e7       	ldi	r23, 0x72	; 114
    7632:	89 eb       	ldi	r24, 0xB9	; 185
    7634:	92 e7       	ldi	r25, 0x72	; 114
    7636:	e9 d2       	rcall	.+1490   	; 0x7c0a <tracePGMln>
    7638:	b8 01       	movw	r22, r16
    763a:	80 e0       	ldi	r24, 0x00	; 0
    763c:	90 e0       	ldi	r25, 0x00	; 0
    763e:	44 e0       	ldi	r20, 0x04	; 4
    7640:	15 d3       	rcall	.+1578   	; 0x7c6c <tracehex>
    7642:	01 15       	cp	r16, r1
    7644:	18 40       	sbci	r17, 0x08	; 8
    7646:	28 f0       	brcs	.+10     	; 0x7652 <processPacket+0x4a>
    7648:	65 e9       	ldi	r22, 0x95	; 149
    764a:	72 e7       	ldi	r23, 0x72	; 114
    764c:	89 eb       	ldi	r24, 0xB9	; 185
    764e:	92 e7       	ldi	r25, 0x72	; 114
    7650:	dc d2       	rcall	.+1464   	; 0x7c0a <tracePGMln>

		DBG_BTN(button();)
	)

	// Read data from chip to buffer
	readPointer = spiReadWord(REG_S3_RX_RD0);
    7652:	88 e2       	ldi	r24, 0x28	; 40
    7654:	97 e0       	ldi	r25, 0x07	; 7
    7656:	01 df       	rcall	.-510    	; 0x745a <spiReadWord>
	DBG_TFTP_EX(
		tracePGMlnTftp(mDebugTftp_RPTR);
		tracenum(readPointer);
	)

	if(readPointer == 0) readPointer += S3_RX_START;
    7658:	00 97       	sbiw	r24, 0x00	; 0
    765a:	11 f4       	brne	.+4      	; 0x7660 <processPacket+0x58>
    765c:	80 e0       	ldi	r24, 0x00	; 0
    765e:	98 e7       	ldi	r25, 0x78	; 120
    7660:	8e 01       	movw	r16, r28
    7662:	0f 5f       	subi	r16, 0xFF	; 255
    7664:	1f 4f       	sbci	r17, 0xFF	; 255
    7666:	5e 01       	movw	r10, r28
    7668:	e3 ef       	ldi	r30, 0xF3	; 243
    766a:	ae 1a       	sub	r10, r30
    766c:	ed ef       	ldi	r30, 0xFD	; 253
    766e:	be 0a       	sbc	r11, r30
    7670:	68 01       	movw	r12, r16

	for(count = TFTP_PACKET_MAX_SIZE; count--;) {
    7672:	0a 15       	cp	r16, r10
    7674:	1b 05       	cpc	r17, r11
    7676:	89 f0       	breq	.+34     	; 0x769a <processPacket+0x92>
				tracePGMlnTftp(mDebugTftp_RPOS);
				tracenum(readPointer);
			}
		)

		*bufPtr++ = spiReadReg(readPointer++);
    7678:	7c 01       	movw	r14, r24
    767a:	ff ef       	ldi	r31, 0xFF	; 255
    767c:	ef 1a       	sub	r14, r31
    767e:	ff 0a       	sbc	r15, r31
    7680:	d2 de       	rcall	.-604    	; 0x7426 <spiReadReg>
    7682:	f8 01       	movw	r30, r16
    7684:	81 93       	st	Z+, r24
    7686:	8f 01       	movw	r16, r30

		if(readPointer == S3_RX_END) readPointer = S3_RX_START;
    7688:	e1 14       	cp	r14, r1
    768a:	f0 e8       	ldi	r31, 0x80	; 128
    768c:	ff 06       	cpc	r15, r31
    768e:	19 f4       	brne	.+6      	; 0x7696 <processPacket+0x8e>
    7690:	e1 2c       	mov	r14, r1
    7692:	88 e7       	ldi	r24, 0x78	; 120
    7694:	f8 2e       	mov	r15, r24
    7696:	c7 01       	movw	r24, r14
    7698:	ec cf       	rjmp	.-40     	; 0x7672 <processPacket+0x6a>
	}

	spiWriteWord(REG_S3_RX_RD0, readPointer);     // Write back new pointer
    769a:	bc 01       	movw	r22, r24
    769c:	88 e2       	ldi	r24, 0x28	; 40
    769e:	97 e0       	ldi	r25, 0x07	; 7
    76a0:	b1 de       	rcall	.-670    	; 0x7404 <spiWriteWord>
	spiWriteReg(REG_S3_CR, CR_RECV);
    76a2:	60 e4       	ldi	r22, 0x40	; 64
    76a4:	81 e0       	ldi	r24, 0x01	; 1
    76a6:	97 e0       	ldi	r25, 0x07	; 7
    76a8:	94 de       	rcall	.-728    	; 0x73d2 <spiWriteReg>

	while(spiReadReg(REG_S3_CR));
    76aa:	81 e0       	ldi	r24, 0x01	; 1
    76ac:	97 e0       	ldi	r25, 0x07	; 7
    76ae:	bb de       	rcall	.-650    	; 0x7426 <spiReadReg>
    76b0:	81 11       	cpse	r24, r1
    76b2:	fb cf       	rjmp	.-10     	; 0x76aa <processPacket+0xa2>
    76b4:	76 01       	movw	r14, r12
    76b6:	0c e0       	ldi	r16, 0x0C	; 12
    76b8:	17 e0       	ldi	r17, 0x07	; 7
	)

	// Set up return IP address and port
	uint8_t i;

	for(i = 0; i < 6; i++) spiWriteReg(REG_S3_DIPR0 + i, buffer[i]);
    76ba:	f7 01       	movw	r30, r14
    76bc:	61 91       	ld	r22, Z+
    76be:	7f 01       	movw	r14, r30
    76c0:	c8 01       	movw	r24, r16
    76c2:	87 de       	rcall	.-754    	; 0x73d2 <spiWriteReg>
    76c4:	0f 5f       	subi	r16, 0xFF	; 255
    76c6:	1f 4f       	sbci	r17, 0xFF	; 255
    76c8:	02 31       	cpi	r16, 0x12	; 18
    76ca:	f7 e0       	ldi	r31, 0x07	; 7
    76cc:	1f 07       	cpc	r17, r31
    76ce:	a9 f7       	brne	.-22     	; 0x76ba <processPacket+0xb2>

	DBG_TFTP(tracePGMlnTftp(mDebugTftp_RADDR);)
    76d0:	6f e7       	ldi	r22, 0x7F	; 127
    76d2:	72 e7       	ldi	r23, 0x72	; 114
    76d4:	89 eb       	ldi	r24, 0xB9	; 185
    76d6:	92 e7       	ldi	r25, 0x72	; 114
    76d8:	98 d2       	rcall	.+1328   	; 0x7c0a <tracePGMln>

	// Parse packet
	uint16_t tftpDataLen = (buffer[6] << 8) + buffer[7];
    76da:	8f 80       	ldd	r8, Y+7	; 0x07
    76dc:	91 2c       	mov	r9, r1
    76de:	98 2c       	mov	r9, r8
    76e0:	88 24       	eor	r8, r8
    76e2:	88 85       	ldd	r24, Y+8	; 0x08
    76e4:	88 0e       	add	r8, r24
    76e6:	91 1c       	adc	r9, r1
	uint16_t tftpOpcode  = (buffer[8] << 8) + buffer[9];
    76e8:	a9 84       	ldd	r10, Y+9	; 0x09
    76ea:	b1 2c       	mov	r11, r1
    76ec:	ba 2c       	mov	r11, r10
    76ee:	aa 24       	eor	r10, r10
    76f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    76f2:	a8 0e       	add	r10, r24
    76f4:	b1 1c       	adc	r11, r1
	uint16_t tftpBlock   = (buffer[10] << 8) + buffer[11];
    76f6:	eb 84       	ldd	r14, Y+11	; 0x0b
    76f8:	f1 2c       	mov	r15, r1
    76fa:	fe 2c       	mov	r15, r14
    76fc:	ee 24       	eor	r14, r14
    76fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    7700:	e8 0e       	add	r14, r24
    7702:	f1 1c       	adc	r15, r1

	DBG_TFTP(
    7704:	60 e7       	ldi	r22, 0x70	; 112
    7706:	72 e7       	ldi	r23, 0x72	; 114
    7708:	89 eb       	ldi	r24, 0xB9	; 185
    770a:	92 e7       	ldi	r25, 0x72	; 114
    770c:	7e d2       	rcall	.+1276   	; 0x7c0a <tracePGMln>
    770e:	b7 01       	movw	r22, r14
    7710:	80 e0       	ldi	r24, 0x00	; 0
    7712:	90 e0       	ldi	r25, 0x00	; 0
    7714:	44 e0       	ldi	r20, 0x04	; 4
    7716:	aa d2       	rcall	.+1364   	; 0x7c6c <tracehex>
    7718:	82 e6       	ldi	r24, 0x62	; 98
    771a:	92 e7       	ldi	r25, 0x72	; 114
    771c:	60 d2       	rcall	.+1216   	; 0x7bde <tracePGM>
    771e:	b5 01       	movw	r22, r10
    7720:	80 e0       	ldi	r24, 0x00	; 0
    7722:	90 e0       	ldi	r25, 0x00	; 0
    7724:	44 e0       	ldi	r20, 0x04	; 4
    7726:	a2 d2       	rcall	.+1348   	; 0x7c6c <tracehex>
    7728:	80 e5       	ldi	r24, 0x50	; 80
    772a:	92 e7       	ldi	r25, 0x72	; 114
    772c:	58 d2       	rcall	.+1200   	; 0x7bde <tracePGM>
    772e:	84 01       	movw	r16, r8
    7730:	04 50       	subi	r16, 0x04	; 4
    7732:	11 09       	sbc	r17, r1
    7734:	b8 01       	movw	r22, r16
    7736:	80 e0       	ldi	r24, 0x00	; 0
    7738:	90 e0       	ldi	r25, 0x00	; 0
    773a:	44 e0       	ldi	r20, 0x04	; 4
    773c:	97 d2       	rcall	.+1326   	; 0x7c6c <tracehex>
		tracenum(tftpOpcode);
		tracePGM(mDebugTftp_DLEN);
		tracenum(tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE));
	)

	if((tftpOpcode == TFTP_OPCODE_DATA)
    773e:	23 e0       	ldi	r18, 0x03	; 3
    7740:	a2 16       	cp	r10, r18
    7742:	b1 04       	cpc	r11, r1
    7744:	91 f4       	brne	.+36     	; 0x776a <processPacket+0x162>
		&& ((tftpBlock > MAX_ADDR / 0x200) || (tftpBlock < highPacket) || (tftpBlock > highPacket + 1)))
    7746:	89 e3       	ldi	r24, 0x39	; 57
    7748:	e8 16       	cp	r14, r24
    774a:	f1 04       	cpc	r15, r1
    774c:	60 f4       	brcc	.+24     	; 0x7766 <processPacket+0x15e>
    774e:	80 91 1c 01 	lds	r24, 0x011C
    7752:	90 91 1d 01 	lds	r25, 0x011D
    7756:	e8 16       	cp	r14, r24
    7758:	f9 06       	cpc	r15, r25
    775a:	28 f0       	brcs	.+10     	; 0x7766 <processPacket+0x15e>
    775c:	01 96       	adiw	r24, 0x01	; 1
    775e:	8e 15       	cp	r24, r14
    7760:	9f 05       	cpc	r25, r15
    7762:	08 f0       	brcs	.+2      	; 0x7766 <processPacket+0x15e>
    7764:	4d c0       	rjmp	.+154    	; 0x7800 <processPacket+0x1f8>
		tftpOpcode = TFTP_OPCODE_UKN;
    7766:	a1 2c       	mov	r10, r1
    7768:	b1 2c       	mov	r11, r1

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
    776a:	e5 e0       	ldi	r30, 0x05	; 5
    776c:	8e 16       	cp	r8, r30
    776e:	e2 e0       	ldi	r30, 0x02	; 2
    7770:	9e 06       	cpc	r9, r30
    7772:	08 f0       	brcs	.+2      	; 0x7776 <processPacket+0x16e>
    7774:	02 c1       	rjmp	.+516    	; 0x797a <processPacket+0x372>

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
    7776:	f3 e0       	ldi	r31, 0x03	; 3
    7778:	af 16       	cp	r10, r31
    777a:	b1 04       	cpc	r11, r1
    777c:	09 f4       	brne	.+2      	; 0x7780 <processPacket+0x178>
    777e:	46 c0       	rjmp	.+140    	; 0x780c <processPacket+0x204>
    7780:	78 f5       	brcc	.+94     	; 0x77e0 <processPacket+0x1d8>
    7782:	81 e0       	ldi	r24, 0x01	; 1
    7784:	a8 16       	cp	r10, r24
    7786:	b1 04       	cpc	r11, r1
    7788:	c1 f1       	breq	.+112    	; 0x77fa <processPacket+0x1f2>
    778a:	e2 e0       	ldi	r30, 0x02	; 2
    778c:	ae 16       	cp	r10, r30
    778e:	b1 04       	cpc	r11, r1
    7790:	09 f0       	breq	.+2      	; 0x7794 <processPacket+0x18c>
    7792:	f5 c0       	rjmp	.+490    	; 0x797e <processPacket+0x376>
			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPRRQ);)
			break;

		case TFTP_OPCODE_WRQ: // Write request
			// Valid WRQ -> reset timer
			resetTick();
    7794:	e6 d2       	rcall	.+1484   	; 0x7d62 <resetTick>

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPWRQ);)
    7796:	65 e3       	ldi	r22, 0x35	; 53
    7798:	72 e7       	ldi	r23, 0x72	; 114
    779a:	89 eb       	ldi	r24, 0xB9	; 185
    779c:	92 e7       	ldi	r25, 0x72	; 114
    779e:	35 d2       	rcall	.+1130   	; 0x7c0a <tracePGMln>

			// Flagging image as invalid since the flashing process has started
			eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_BAD_VALUE);
    77a0:	6f ef       	ldi	r22, 0xFF	; 255
    77a2:	82 e0       	ldi	r24, 0x02	; 2
    77a4:	90 e0       	ldi	r25, 0x00	; 0
    77a6:	fe d3       	rcall	.+2044   	; 0x7fa4 <__eewr_byte_m328p>

#if defined(RANDOM_TFTP_DATA_PORT)
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
    77a8:	80 91 27 01 	lds	r24, 0x0127
    77ac:	90 91 28 01 	lds	r25, 0x0128
    77b0:	fd de       	rcall	.-518    	; 0x75ac <sockInit>
#endif

			DBG_TFTP(
    77b2:	69 e1       	ldi	r22, 0x19	; 25
    77b4:	72 e7       	ldi	r23, 0x72	; 114
    77b6:	89 eb       	ldi	r24, 0xB9	; 185
    77b8:	92 e7       	ldi	r25, 0x72	; 114
    77ba:	27 d2       	rcall	.+1102   	; 0x7c0a <tracePGMln>
    77bc:	60 91 27 01 	lds	r22, 0x0127
    77c0:	70 91 28 01 	lds	r23, 0x0128
    77c4:	80 e0       	ldi	r24, 0x00	; 0
    77c6:	90 e0       	ldi	r25, 0x00	; 0
    77c8:	44 e0       	ldi	r20, 0x04	; 4
    77ca:	50 d2       	rcall	.+1184   	; 0x7c6c <tracehex>
#else
				tracenum(tftpTransferPort);
#endif
			)

			lastPacket = highPacket = 0;
    77cc:	10 92 1d 01 	sts	0x011D, r1
    77d0:	10 92 1c 01 	sts	0x011C, r1
    77d4:	10 92 1f 01 	sts	0x011F, r1
    77d8:	10 92 1e 01 	sts	0x011E, r1
			returnCode = ACK; // Send back acknowledge for packet 0
    77dc:	52 e0       	ldi	r21, 0x02	; 2
			break;
    77de:	df c0       	rjmp	.+446    	; 0x799e <processPacket+0x396>

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
    77e0:	f4 e0       	ldi	r31, 0x04	; 4
    77e2:	af 16       	cp	r10, r31
    77e4:	b1 04       	cpc	r11, r1
    77e6:	09 f4       	brne	.+2      	; 0x77ea <processPacket+0x1e2>
    77e8:	c1 c0       	rjmp	.+386    	; 0x796c <processPacket+0x364>
    77ea:	25 e0       	ldi	r18, 0x05	; 5
    77ec:	a2 16       	cp	r10, r18
    77ee:	b1 04       	cpc	r11, r1
    77f0:	09 f0       	breq	.+2      	; 0x77f4 <processPacket+0x1ec>
    77f2:	c5 c0       	rjmp	.+394    	; 0x797e <processPacket+0x376>
			break;

		// Error signal
		case TFTP_OPCODE_ERROR:

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPERR);)
    77f4:	61 eb       	ldi	r22, 0xB1	; 177
    77f6:	71 e7       	ldi	r23, 0x71	; 113
    77f8:	bb c0       	rjmp	.+374    	; 0x7970 <processPacket+0x368>


	switch(tftpOpcode) {

		case TFTP_OPCODE_RRQ: // Read request
			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPRRQ);)
    77fa:	63 e4       	ldi	r22, 0x43	; 67
    77fc:	72 e7       	ldi	r23, 0x72	; 114
    77fe:	b8 c0       	rjmp	.+368    	; 0x7970 <processPacket+0x368>

	if((tftpOpcode == TFTP_OPCODE_DATA)
		&& ((tftpBlock > MAX_ADDR / 0x200) || (tftpBlock < highPacket) || (tftpBlock > highPacket + 1)))
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
    7800:	25 e0       	ldi	r18, 0x05	; 5
    7802:	82 16       	cp	r8, r18
    7804:	22 e0       	ldi	r18, 0x02	; 2
    7806:	92 06       	cpc	r9, r18
    7808:	08 f0       	brcs	.+2      	; 0x780c <processPacket+0x204>
    780a:	b7 c0       	rjmp	.+366    	; 0x797a <processPacket+0x372>
			returnCode = ACK; // Send back acknowledge for packet 0
			break;

		case TFTP_OPCODE_DATA:
			// Valid Data Packet -> reset timer
			resetTick();
    780c:	aa d2       	rcall	.+1364   	; 0x7d62 <resetTick>

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPDATA);)
    780e:	6a e2       	ldi	r22, 0x2A	; 42
    7810:	72 e7       	ldi	r23, 0x72	; 114
    7812:	89 eb       	ldi	r24, 0xB9	; 185
    7814:	92 e7       	ldi	r25, 0x72	; 114
    7816:	f9 d1       	rcall	.+1010   	; 0x7c0a <tracePGMln>

			packetLength = tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE);
			lastPacket = tftpBlock;
    7818:	f0 92 1f 01 	sts	0x011F, r15
    781c:	e0 92 1e 01 	sts	0x011E, r14
#if defined(RAMPZ)
			writeAddr = (((address_t)((tftpBlock - 1)/0x80) << 16) | ((address_t)((tftpBlock - 1)%0x80) << 9));
#else
			writeAddr = (address_t)((address_t)(tftpBlock - 1) << 9); // Flash write address for this block
    7820:	81 e0       	ldi	r24, 0x01	; 1
    7822:	e8 1a       	sub	r14, r24
    7824:	f1 08       	sbc	r15, r1
    7826:	fe 2c       	mov	r15, r14
    7828:	ee 24       	eor	r14, r14
    782a:	ff 0c       	add	r15, r15
#endif

			if((writeAddr + packetLength) > MAX_ADDR) {
    782c:	c7 01       	movw	r24, r14
    782e:	80 0f       	add	r24, r16
    7830:	91 1f       	adc	r25, r17
    7832:	81 30       	cpi	r24, 0x01	; 1
    7834:	90 47       	sbci	r25, 0x70	; 112
    7836:	38 f0       	brcs	.+14     	; 0x7846 <processPacket+0x23e>
				// Flash is full - abort with an error before a bootloader overwrite occurs
				// Application is now corrupt, so do not hand over.

				DBG_TFTP(tracePGMlnTftp(mDebugTftp_FULL);)
    7838:	6b e0       	ldi	r22, 0x0B	; 11
    783a:	72 e7       	ldi	r23, 0x72	; 114
    783c:	89 eb       	ldi	r24, 0xB9	; 185
    783e:	92 e7       	ldi	r25, 0x72	; 114
    7840:	e4 d1       	rcall	.+968    	; 0x7c0a <tracePGMln>

				returnCode = ERROR_FULL;
    7842:	53 e0       	ldi	r21, 0x03	; 3
    7844:	ac c0       	rjmp	.+344    	; 0x799e <processPacket+0x396>
			} else {

				DBG_TFTP(
    7846:	60 ef       	ldi	r22, 0xF0	; 240
    7848:	71 e7       	ldi	r23, 0x71	; 113
    784a:	89 eb       	ldi	r24, 0xB9	; 185
    784c:	92 e7       	ldi	r25, 0x72	; 114
    784e:	dd d1       	rcall	.+954    	; 0x7c0a <tracePGMln>
    7850:	c7 01       	movw	r24, r14
    7852:	a0 e0       	ldi	r26, 0x00	; 0
    7854:	b0 e0       	ldi	r27, 0x00	; 0
    7856:	46 e0       	ldi	r20, 0x06	; 6
    7858:	bc 01       	movw	r22, r24
    785a:	cd 01       	movw	r24, r26
    785c:	07 d2       	rcall	.+1038   	; 0x7c6c <tracehex>
				uint8_t* pageBase = buffer + (UDP_HEADER_SIZE + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE); // Start of block data
				uint16_t offset = 0; // Block offset


				// Set the return code before packetLength gets rounded up
				if(packetLength < TFTP_DATA_SIZE) returnCode = FINAL_ACK;
    785e:	01 15       	cp	r16, r1
    7860:	f2 e0       	ldi	r31, 0x02	; 2
    7862:	1f 07       	cpc	r17, r31
    7864:	10 f4       	brcc	.+4      	; 0x786a <processPacket+0x262>
    7866:	54 e0       	ldi	r21, 0x04	; 4
    7868:	01 c0       	rjmp	.+2      	; 0x786c <processPacket+0x264>
				else returnCode = ACK;
    786a:	52 e0       	ldi	r21, 0x02	; 2

				// Round up packet length to a full flash sector size
				while(packetLength % SPM_PAGESIZE) packetLength++;
    786c:	c8 01       	movw	r24, r16
    786e:	8f 77       	andi	r24, 0x7F	; 127
    7870:	99 27       	eor	r25, r25
    7872:	89 2b       	or	r24, r25
    7874:	19 f0       	breq	.+6      	; 0x787c <processPacket+0x274>
    7876:	0f 5f       	subi	r16, 0xFF	; 255
    7878:	1f 4f       	sbci	r17, 0xFF	; 255
    787a:	f8 cf       	rjmp	.-16     	; 0x786c <processPacket+0x264>

				DBG_TFTP(
    787c:	65 ed       	ldi	r22, 0xD5	; 213
    787e:	71 e7       	ldi	r23, 0x71	; 113
    7880:	89 eb       	ldi	r24, 0xB9	; 185
    7882:	92 e7       	ldi	r25, 0x72	; 114
    7884:	c3 5f       	subi	r28, 0xF3	; 243
    7886:	dd 4f       	sbci	r29, 0xFD	; 253
    7888:	58 83       	st	Y, r21
    788a:	cd 50       	subi	r28, 0x0D	; 13
    788c:	d2 40       	sbci	r29, 0x02	; 2
    788e:	bd d1       	rcall	.+890    	; 0x7c0a <tracePGMln>
    7890:	c8 01       	movw	r24, r16
    7892:	a0 e0       	ldi	r26, 0x00	; 0
    7894:	b0 e0       	ldi	r27, 0x00	; 0
    7896:	44 e0       	ldi	r20, 0x04	; 4
    7898:	bc 01       	movw	r22, r24
    789a:	cd 01       	movw	r24, r26
    789c:	e7 d1       	rcall	.+974    	; 0x7c6c <tracehex>
					tracePGMlnTftp(mDebugTftp_PLEN);
					tracenum(packetLength);
				)

				if(writeAddr == 0) {
    789e:	c3 5f       	subi	r28, 0xF3	; 243
    78a0:	dd 4f       	sbci	r29, 0xFD	; 253
    78a2:	58 81       	ld	r21, Y
    78a4:	cd 50       	subi	r28, 0x0D	; 13
    78a6:	d2 40       	sbci	r29, 0x02	; 2
    78a8:	e1 14       	cp	r14, r1
    78aa:	f1 04       	cpc	r15, r1
    78ac:	51 f0       	breq	.+20     	; 0x78c2 <processPacket+0x2ba>
    78ae:	de 01       	movw	r26, r28
    78b0:	1d 96       	adiw	r26, 0x0d	; 13
					}
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
    78b2:	20 e0       	ldi	r18, 0x00	; 0
    78b4:	30 e0       	ldi	r19, 0x00	; 0
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
					boot_page_fill(writeAddr + offset, writeValue);
    78b6:	41 e0       	ldi	r20, 0x01	; 1
					)

					offset += 2;

					if(offset % SPM_PAGESIZE == 0) {
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
    78b8:	63 e0       	ldi	r22, 0x03	; 3
						boot_spm_busy_wait();
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
    78ba:	75 e0       	ldi	r23, 0x05	; 5
						boot_spm_busy_wait();
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
    78bc:	f1 e1       	ldi	r31, 0x11	; 17
    78be:	bf 2e       	mov	r11, r31
					}
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
    78c0:	3c c0       	rjmp	.+120    	; 0x793a <processPacket+0x332>
					tracenum(packetLength);
				)

				if(writeAddr == 0) {
					// First sector - validate
					if(!validImage(pageBase)) {
    78c2:	ce 01       	movw	r24, r28
    78c4:	0d 96       	adiw	r24, 0x0d	; 13
    78c6:	c3 5f       	subi	r28, 0xF3	; 243
    78c8:	dd 4f       	sbci	r29, 0xFD	; 253
    78ca:	58 83       	st	Y, r21
    78cc:	cd 50       	subi	r28, 0x0D	; 13
    78ce:	d2 40       	sbci	r29, 0x02	; 2
    78d0:	72 d1       	rcall	.+740    	; 0x7bb6 <validImage>
    78d2:	c3 5f       	subi	r28, 0xF3	; 243
    78d4:	dd 4f       	sbci	r29, 0xFD	; 253
    78d6:	58 81       	ld	r21, Y
    78d8:	cd 50       	subi	r28, 0x0D	; 13
    78da:	d2 40       	sbci	r29, 0x02	; 2
    78dc:	81 11       	cpse	r24, r1
    78de:	e7 cf       	rjmp	.-50     	; 0x78ae <processPacket+0x2a6>

#if defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__)
						/* FIXME: Validity checks. Small programms (under 512 bytes?) don't
						 * have the the JMP sections and that is why app.bin was failing.
						 * When flashing big binaries is fixed, uncomment the break below.*/
						returnCode = INVALID_IMAGE;
    78e0:	55 e0       	ldi	r21, 0x05	; 5
    78e2:	5d c0       	rjmp	.+186    	; 0x799e <processPacket+0x396>
    78e4:	f6 01       	movw	r30, r12
    78e6:	e2 0f       	add	r30, r18
    78e8:	f3 1f       	adc	r31, r19
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
    78ea:	85 85       	ldd	r24, Z+13	; 0x0d
    78ec:	90 e0       	ldi	r25, 0x00	; 0
    78ee:	98 2f       	mov	r25, r24
    78f0:	88 27       	eor	r24, r24
    78f2:	ec 91       	ld	r30, X
    78f4:	8e 2b       	or	r24, r30
					boot_page_fill(writeAddr + offset, writeValue);
    78f6:	f7 01       	movw	r30, r14
    78f8:	0c 01       	movw	r0, r24
    78fa:	40 93 57 00 	sts	0x0057, r20
    78fe:	e8 95       	spm
    7900:	11 24       	eor	r1, r1
							tracePGM(mDebugTftp_OFFSET);
							tracenum(writeAddr + offset);
						}
					)

					offset += 2;
    7902:	2e 5f       	subi	r18, 0xFE	; 254
    7904:	3f 4f       	sbci	r19, 0xFF	; 255

					if(offset % SPM_PAGESIZE == 0) {
    7906:	c9 01       	movw	r24, r18
    7908:	8f 77       	andi	r24, 0x7F	; 127
    790a:	99 27       	eor	r25, r25
    790c:	89 2b       	or	r24, r25
    790e:	89 f4       	brne	.+34     	; 0x7932 <processPacket+0x32a>
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
    7910:	ee 57       	subi	r30, 0x7E	; 126
    7912:	f1 09       	sbc	r31, r1
    7914:	60 93 57 00 	sts	0x0057, r22
    7918:	e8 95       	spm
						boot_spm_busy_wait();
    791a:	07 b6       	in	r0, 0x37	; 55
    791c:	00 fc       	sbrc	r0, 0
    791e:	fd cf       	rjmp	.-6      	; 0x791a <processPacket+0x312>
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
    7920:	70 93 57 00 	sts	0x0057, r23
    7924:	e8 95       	spm
						boot_spm_busy_wait();
    7926:	07 b6       	in	r0, 0x37	; 55
    7928:	00 fc       	sbrc	r0, 0
    792a:	fd cf       	rjmp	.-6      	; 0x7926 <processPacket+0x31e>
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
    792c:	b0 92 57 00 	sts	0x0057, r11
    7930:	e8 95       	spm
    7932:	12 96       	adiw	r26, 0x02	; 2
    7934:	f2 e0       	ldi	r31, 0x02	; 2
    7936:	ef 0e       	add	r14, r31
    7938:	f1 1c       	adc	r15, r1
					}
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
    793a:	20 17       	cp	r18, r16
    793c:	31 07       	cpc	r19, r17
    793e:	90 f2       	brcs	.-92     	; 0x78e4 <processPacket+0x2dc>
						boot_rww_enable();
#endif
					}
				}

				if(returnCode == FINAL_ACK) {
    7940:	54 30       	cpi	r21, 0x04	; 4
    7942:	69 f5       	brne	.+90     	; 0x799e <processPacket+0x396>
					// Flash is complete
					// Hand over to application

					DBG_TFTP(tracePGMlnTftp(mDebugTftp_DONE);)
    7944:	63 ec       	ldi	r22, 0xC3	; 195
    7946:	71 e7       	ldi	r23, 0x71	; 113
    7948:	89 eb       	ldi	r24, 0xB9	; 185
    794a:	92 e7       	ldi	r25, 0x72	; 114
    794c:	c3 5f       	subi	r28, 0xF3	; 243
    794e:	dd 4f       	sbci	r29, 0xFD	; 253
    7950:	58 83       	st	Y, r21
    7952:	cd 50       	subi	r28, 0x0D	; 13
    7954:	d2 40       	sbci	r29, 0x02	; 2
    7956:	59 d1       	rcall	.+690    	; 0x7c0a <tracePGMln>

					// Flag the image as valid since we received the last packet
					eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
    7958:	6e ee       	ldi	r22, 0xEE	; 238
    795a:	82 e0       	ldi	r24, 0x02	; 2
    795c:	90 e0       	ldi	r25, 0x00	; 0
    795e:	22 d3       	rcall	.+1604   	; 0x7fa4 <__eewr_byte_m328p>
    7960:	c3 5f       	subi	r28, 0xF3	; 243
    7962:	dd 4f       	sbci	r29, 0xFD	; 253
    7964:	58 81       	ld	r21, Y
    7966:	cd 50       	subi	r28, 0x0D	; 13
    7968:	d2 40       	sbci	r29, 0x02	; 2
    796a:	19 c0       	rjmp	.+50     	; 0x799e <processPacket+0x396>
			break;

		// Acknowledgment
		case TFTP_OPCODE_ACK:

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPACK);)
    796c:	67 eb       	ldi	r22, 0xB7	; 183
    796e:	71 e7       	ldi	r23, 0x71	; 113
			break;

		// Error signal
		case TFTP_OPCODE_ERROR:

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPERR);)
    7970:	89 eb       	ldi	r24, 0xB9	; 185
    7972:	92 e7       	ldi	r25, 0x72	; 114
    7974:	4a d1       	rcall	.+660    	; 0x7c0a <tracePGMln>
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
		tftpOpcode = TFTP_OPCODE_UKN;

	uint8_t returnCode = ERROR_UNKNOWN;
    7976:	50 e0       	ldi	r21, 0x00	; 0
		case TFTP_OPCODE_ERROR:

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPERR);)

			/* FIXME: Resetting might be needed here too */
			break;
    7978:	12 c0       	rjmp	.+36     	; 0x799e <processPacket+0x396>
	if((tftpOpcode == TFTP_OPCODE_DATA)
		&& ((tftpBlock > MAX_ADDR / 0x200) || (tftpBlock < highPacket) || (tftpBlock > highPacket + 1)))
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
		tftpOpcode = TFTP_OPCODE_UKN;
    797a:	a1 2c       	mov	r10, r1
    797c:	b1 2c       	mov	r11, r1

			/* FIXME: Resetting might be needed here too */
			break;

		default:
			DBG_TFTP(
    797e:	61 ea       	ldi	r22, 0xA1	; 161
    7980:	71 e7       	ldi	r23, 0x71	; 113
    7982:	89 eb       	ldi	r24, 0xB9	; 185
    7984:	92 e7       	ldi	r25, 0x72	; 114
    7986:	41 d1       	rcall	.+642    	; 0x7c0a <tracePGMln>
    7988:	b5 01       	movw	r22, r10
    798a:	80 e0       	ldi	r24, 0x00	; 0
    798c:	90 e0       	ldi	r25, 0x00	; 0
    798e:	44 e0       	ldi	r20, 0x04	; 4
    7990:	6d d1       	rcall	.+730    	; 0x7c6c <tracehex>
			)

#if defined(RANDOM_TFTP_DATA_PORT)
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
    7992:	80 91 27 01 	lds	r24, 0x0127
    7996:	90 91 28 01 	lds	r25, 0x0128
    799a:	08 de       	rcall	.-1008   	; 0x75ac <sockInit>
			 * It can be done by reinitializig the tftpd or
			 * by resetting the device. I should find out which is best...
			 * Right now it is being done by resetting the timer if we have a
			 * data packet. */
			// Invalid - return error
			returnCode = ERROR_INVALID;
    799c:	51 e0       	ldi	r21, 0x01	; 1
			break;

	}

	return(returnCode);
}
    799e:	85 2f       	mov	r24, r21
    79a0:	c3 5f       	subi	r28, 0xF3	; 243
    79a2:	dd 4f       	sbci	r29, 0xFD	; 253
    79a4:	de bf       	out	0x3e, r29	; 62
    79a6:	cd bf       	out	0x3d, r28	; 61
    79a8:	df 91       	pop	r29
    79aa:	cf 91       	pop	r28
    79ac:	1f 91       	pop	r17
    79ae:	0f 91       	pop	r16
    79b0:	ff 90       	pop	r15
    79b2:	ef 90       	pop	r14
    79b4:	df 90       	pop	r13
    79b6:	cf 90       	pop	r12
    79b8:	bf 90       	pop	r11
    79ba:	af 90       	pop	r10
    79bc:	9f 90       	pop	r9
    79be:	8f 90       	pop	r8
    79c0:	08 95       	ret

000079c2 <tftpInit>:

/**
 * Initializes the network controller
 */
void tftpInit(void)
{
    79c2:	cf 93       	push	r28
	// Open socket
	sockInit(TFTP_PORT);
    79c4:	85 e4       	ldi	r24, 0x45	; 69
    79c6:	90 e0       	ldi	r25, 0x00	; 0
    79c8:	f1 dd       	rcall	.-1054   	; 0x75ac <sockInit>

#if defined(RANDOM_TFTP_DATA_PORT)
#else
	if(eeprom_read_byte(EEPROM_SIG_3) == EEPROM_SIG_3_VALUE)
    79ca:	87 e1       	ldi	r24, 0x17	; 23
    79cc:	90 e0       	ldi	r25, 0x00	; 0
    79ce:	e2 d2       	rcall	.+1476   	; 0x7f94 <__eerd_byte_m328p>
    79d0:	8b 3b       	cpi	r24, 0xBB	; 187
    79d2:	91 f4       	brne	.+36     	; 0x79f8 <tftpInit+0x36>
		tftpTransferPort = ((eeprom_read_byte(EEPROM_PORT + 1) << 8) + eeprom_read_byte(EEPROM_PORT));
    79d4:	89 e1       	ldi	r24, 0x19	; 25
    79d6:	90 e0       	ldi	r25, 0x00	; 0
    79d8:	dd d2       	rcall	.+1466   	; 0x7f94 <__eerd_byte_m328p>
    79da:	c8 2f       	mov	r28, r24
    79dc:	88 e1       	ldi	r24, 0x18	; 24
    79de:	90 e0       	ldi	r25, 0x00	; 0
    79e0:	d9 d2       	rcall	.+1458   	; 0x7f94 <__eerd_byte_m328p>
    79e2:	2c 2f       	mov	r18, r28
    79e4:	30 e0       	ldi	r19, 0x00	; 0
    79e6:	32 2f       	mov	r19, r18
    79e8:	22 27       	eor	r18, r18
    79ea:	28 0f       	add	r18, r24
    79ec:	31 1d       	adc	r19, r1
    79ee:	30 93 28 01 	sts	0x0128, r19
    79f2:	20 93 27 01 	sts	0x0127, r18
    79f6:	06 c0       	rjmp	.+12     	; 0x7a04 <tftpInit+0x42>
	else
		tftpTransferPort = TFTP_DATA_PORT;
    79f8:	89 e7       	ldi	r24, 0x79	; 121
    79fa:	97 eb       	ldi	r25, 0xB7	; 183
    79fc:	90 93 28 01 	sts	0x0128, r25
    7a00:	80 93 27 01 	sts	0x0127, r24
#endif

	DBG_TFTP(
    7a04:	65 e6       	ldi	r22, 0x65	; 101
    7a06:	71 e7       	ldi	r23, 0x71	; 113
    7a08:	89 eb       	ldi	r24, 0xB9	; 185
    7a0a:	92 e7       	ldi	r25, 0x72	; 114
    7a0c:	fe d0       	rcall	.+508    	; 0x7c0a <tracePGMln>
    7a0e:	69 e5       	ldi	r22, 0x59	; 89
    7a10:	71 e7       	ldi	r23, 0x71	; 113
    7a12:	89 eb       	ldi	r24, 0xB9	; 185
    7a14:	92 e7       	ldi	r25, 0x72	; 114
    7a16:	f9 d0       	rcall	.+498    	; 0x7c0a <tracePGMln>
    7a18:	60 91 27 01 	lds	r22, 0x0127
    7a1c:	70 91 28 01 	lds	r23, 0x0128
    7a20:	80 e0       	ldi	r24, 0x00	; 0
    7a22:	90 e0       	ldi	r25, 0x00	; 0
    7a24:	44 e0       	ldi	r20, 0x04	; 4
#else
		tracePGMlnTftp(mDebugTftp_PORT);
		tracenum(tftpTransferPort);
#endif
	)
}
    7a26:	cf 91       	pop	r28
		tftpTransferPort = ((eeprom_read_byte(EEPROM_PORT + 1) << 8) + eeprom_read_byte(EEPROM_PORT));
	else
		tftpTransferPort = TFTP_DATA_PORT;
#endif

	DBG_TFTP(
    7a28:	21 c1       	rjmp	.+578    	; 0x7c6c <tracehex>

00007a2a <tftpPoll>:

/**
 * Looks for a connection
 */
uint8_t tftpPoll(void)
{
    7a2a:	af 92       	push	r10
    7a2c:	bf 92       	push	r11
    7a2e:	cf 92       	push	r12
    7a30:	df 92       	push	r13
    7a32:	ef 92       	push	r14
    7a34:	ff 92       	push	r15
    7a36:	0f 93       	push	r16
    7a38:	1f 93       	push	r17
    7a3a:	cf 93       	push	r28
    7a3c:	df 93       	push	r29
    7a3e:	cd b7       	in	r28, 0x3d	; 61
    7a40:	de b7       	in	r29, 0x3e	; 62
    7a42:	c4 56       	subi	r28, 0x64	; 100
    7a44:	d1 09       	sbc	r29, r1
    7a46:	de bf       	out	0x3e, r29	; 62
    7a48:	cd bf       	out	0x3d, r28	; 61
	uint8_t response = ACK;
	// Get the size of the recieved data
	uint16_t packetSize = spiReadWord(REG_S3_RX_RSR0);
    7a4a:	86 e2       	ldi	r24, 0x26	; 38
    7a4c:	97 e0       	ldi	r25, 0x07	; 7
    7a4e:	05 dd       	rcall	.-1526   	; 0x745a <spiReadWord>
// 			_delay_ms(400);
// 			packetSize = spiReadWord(REG_S3_RX_RSR0);
// 		}
// 	} while (packetSize != incSize);

	if(packetSize) {
    7a50:	89 2b       	or	r24, r25
    7a52:	11 f4       	brne	.+4      	; 0x7a58 <tftpPoll+0x2e>
		// Complete
		return(0);
	}

	// Tftp continues
	return(1);
    7a54:	81 e0       	ldi	r24, 0x01	; 1
    7a56:	a0 c0       	rjmp	.+320    	; 0x7b98 <tftpPoll+0x16e>
// 			packetSize = spiReadWord(REG_S3_RX_RSR0);
// 		}
// 	} while (packetSize != incSize);

	if(packetSize) {
		tftpFlashing = TRUE;
    7a58:	81 e0       	ldi	r24, 0x01	; 1
    7a5a:	80 93 2a 01 	sts	0x012A, r24

		while((spiReadReg(REG_S3_IR) & IR_RECV)) {
    7a5e:	82 e0       	ldi	r24, 0x02	; 2
    7a60:	97 e0       	ldi	r25, 0x07	; 7
    7a62:	e1 dc       	rcall	.-1598   	; 0x7426 <spiReadReg>
    7a64:	82 ff       	sbrs	r24, 2
    7a66:	0e c0       	rjmp	.+28     	; 0x7a84 <tftpPoll+0x5a>
			spiWriteReg(REG_S3_IR, IR_RECV);
    7a68:	64 e0       	ldi	r22, 0x04	; 4
    7a6a:	82 e0       	ldi	r24, 0x02	; 2
    7a6c:	97 e0       	ldi	r25, 0x07	; 7
    7a6e:	b1 dc       	rcall	.-1694   	; 0x73d2 <spiWriteReg>
    7a70:	2f ef       	ldi	r18, 0xFF	; 255
    7a72:	37 e8       	ldi	r19, 0x87	; 135
    7a74:	83 e1       	ldi	r24, 0x13	; 19
    7a76:	21 50       	subi	r18, 0x01	; 1
    7a78:	30 40       	sbci	r19, 0x00	; 0
    7a7a:	80 40       	sbci	r24, 0x00	; 0
    7a7c:	e1 f7       	brne	.-8      	; 0x7a76 <tftpPoll+0x4c>
    7a7e:	00 c0       	rjmp	.+0      	; 0x7a80 <tftpPoll+0x56>
    7a80:	00 00       	nop
    7a82:	ed cf       	rjmp	.-38     	; 0x7a5e <tftpPoll+0x34>
			_delay_ms(TFTP_PACKET_DELAY);
		}

		// Process Packet and get TFTP response code
#if (DEBUG_TFTP > 0)
		packetSize = spiReadWord(REG_S3_RX_RSR0);
    7a84:	86 e2       	ldi	r24, 0x26	; 38
    7a86:	97 e0       	ldi	r25, 0x07	; 7
    7a88:	e8 dc       	rcall	.-1584   	; 0x745a <spiReadWord>
		response = processPacket(packetSize);
    7a8a:	be dd       	rcall	.-1156   	; 0x7608 <processPacket>
    7a8c:	b8 2e       	mov	r11, r24
	uint8_t txBuffer[100];
	uint8_t* txPtr = txBuffer;
	uint8_t packetLength;
	uint16_t writePointer;

	writePointer = spiReadWord(REG_S3_TX_WR0) + S3_TX_START;
    7a8e:	84 e2       	ldi	r24, 0x24	; 36
    7a90:	97 e0       	ldi	r25, 0x07	; 7
    7a92:	e3 dc       	rcall	.-1594   	; 0x745a <spiReadWord>
    7a94:	8c 01       	movw	r16, r24
    7a96:	18 5a       	subi	r17, 0xA8	; 168

	switch(response) {
    7a98:	92 e0       	ldi	r25, 0x02	; 2
    7a9a:	b9 16       	cp	r11, r25
    7a9c:	69 f1       	breq	.+90     	; 0x7af8 <tftpPoll+0xce>
    7a9e:	9b 15       	cp	r25, r11
    7aa0:	20 f0       	brcs	.+8      	; 0x7aaa <tftpPoll+0x80>
    7aa2:	e1 e0       	ldi	r30, 0x01	; 1
    7aa4:	be 16       	cp	r11, r30
    7aa6:	b1 f0       	breq	.+44     	; 0x7ad4 <tftpPoll+0xaa>
    7aa8:	07 c0       	rjmp	.+14     	; 0x7ab8 <tftpPoll+0x8e>
    7aaa:	f3 e0       	ldi	r31, 0x03	; 3
    7aac:	bf 16       	cp	r11, r31
    7aae:	d9 f0       	breq	.+54     	; 0x7ae6 <tftpPoll+0xbc>
    7ab0:	24 e0       	ldi	r18, 0x04	; 4
    7ab2:	b2 16       	cp	r11, r18
    7ab4:	09 f4       	brne	.+2      	; 0x7ab8 <tftpPoll+0x8e>
    7ab6:	6d c0       	rjmp	.+218    	; 0x7b92 <tftpPoll+0x168>
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_unknown_error_packet, packetLength);
#else
			memcpy_P(txBuffer, tftp_unknown_error_packet, packetLength);
    7ab8:	4a e0       	ldi	r20, 0x0A	; 10
    7aba:	50 e0       	ldi	r21, 0x00	; 0
    7abc:	62 e2       	ldi	r22, 0x22	; 34
    7abe:	71 e7       	ldi	r23, 0x71	; 113
    7ac0:	ce 01       	movw	r24, r28
    7ac2:	01 96       	adiw	r24, 0x01	; 1
    7ac4:	5e d2       	rcall	.+1212   	; 0x7f82 <memcpy_P>
	switch(response) {
		default:

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
    7ac6:	8a e0       	ldi	r24, 0x0A	; 10
	txPtr = txBuffer;

	while(packetLength--) {
		spiWriteReg(writePointer++, *txPtr++);

		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
    7ac8:	fe 01       	movw	r30, r28
    7aca:	31 96       	adiw	r30, 0x01	; 1
    7acc:	7f 01       	movw	r14, r30
    7ace:	a8 2e       	mov	r10, r24
    7ad0:	ae 0e       	add	r10, r30
    7ad2:	41 c0       	rjmp	.+130    	; 0x7b56 <tftpPoll+0x12c>
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_opcode_error_packet, packetLength);
#else
			memcpy_P(txBuffer, tftp_opcode_error_packet, packetLength);
    7ad4:	4c e0       	ldi	r20, 0x0C	; 12
    7ad6:	50 e0       	ldi	r21, 0x00	; 0
    7ad8:	67 e3       	ldi	r22, 0x37	; 55
    7ada:	71 e7       	ldi	r23, 0x71	; 113
    7adc:	ce 01       	movw	r24, r28
    7ade:	01 96       	adiw	r24, 0x01	; 1
    7ae0:	50 d2       	rcall	.+1184   	; 0x7f82 <memcpy_P>
#endif
			break;

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
    7ae2:	8c e0       	ldi	r24, 0x0C	; 12
    7ae4:	f1 cf       	rjmp	.-30     	; 0x7ac8 <tftpPoll+0x9e>
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_full_error_packet, packetLength);
#else
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
    7ae6:	49 e0       	ldi	r20, 0x09	; 9
    7ae8:	50 e0       	ldi	r21, 0x00	; 0
    7aea:	6d e2       	ldi	r22, 0x2D	; 45
    7aec:	71 e7       	ldi	r23, 0x71	; 113
    7aee:	ce 01       	movw	r24, r28
    7af0:	01 96       	adiw	r24, 0x01	; 1
    7af2:	47 d2       	rcall	.+1166   	; 0x7f82 <memcpy_P>
#endif
			break;

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
    7af4:	89 e0       	ldi	r24, 0x09	; 9
    7af6:	e8 cf       	rjmp	.-48     	; 0x7ac8 <tftpPoll+0x9e>
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
#endif
			break;

		case ACK:
			if(lastPacket > highPacket) highPacket = lastPacket;
    7af8:	20 91 1e 01 	lds	r18, 0x011E
    7afc:	30 91 1f 01 	lds	r19, 0x011F
    7b00:	40 91 1c 01 	lds	r20, 0x011C
    7b04:	50 91 1d 01 	lds	r21, 0x011D
    7b08:	42 17       	cp	r20, r18
    7b0a:	53 07       	cpc	r21, r19
    7b0c:	20 f4       	brcc	.+8      	; 0x7b16 <tftpPoll+0xec>
    7b0e:	30 93 1d 01 	sts	0x011D, r19
    7b12:	20 93 1c 01 	sts	0x011C, r18

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_SACK);)
    7b16:	68 e9       	ldi	r22, 0x98	; 152
    7b18:	71 e7       	ldi	r23, 0x71	; 113
    7b1a:	89 eb       	ldi	r24, 0xB9	; 185
    7b1c:	92 e7       	ldi	r25, 0x72	; 114
    7b1e:	75 d0       	rcall	.+234    	; 0x7c0a <tracePGMln>
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
			*txPtr++ = TFTP_OPCODE_ACK >> 8;
    7b20:	19 82       	std	Y+1, r1	; 0x01
			*txPtr++ = TFTP_OPCODE_ACK & 0xff;
    7b22:	84 e0       	ldi	r24, 0x04	; 4
    7b24:	8a 83       	std	Y+2, r24	; 0x02
			// lastPacket is block code
			*txPtr++ = lastPacket >> 8;
    7b26:	20 91 1e 01 	lds	r18, 0x011E
    7b2a:	30 91 1f 01 	lds	r19, 0x011F
    7b2e:	3b 83       	std	Y+3, r19	; 0x03
			*txPtr = lastPacket & 0xff;
    7b30:	2c 83       	std	Y+4, r18	; 0x04
    7b32:	ca cf       	rjmp	.-108    	; 0x7ac8 <tftpPoll+0x9e>
	}

	txPtr = txBuffer;

	while(packetLength--) {
		spiWriteReg(writePointer++, *txPtr++);
    7b34:	f7 01       	movw	r30, r14
    7b36:	61 91       	ld	r22, Z+
    7b38:	7f 01       	movw	r14, r30
    7b3a:	68 01       	movw	r12, r16
    7b3c:	ff ef       	ldi	r31, 0xFF	; 255
    7b3e:	cf 1a       	sub	r12, r31
    7b40:	df 0a       	sbc	r13, r31
    7b42:	c8 01       	movw	r24, r16
    7b44:	46 dc       	rcall	.-1908   	; 0x73d2 <spiWriteReg>

		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
    7b46:	c1 14       	cp	r12, r1
    7b48:	20 e6       	ldi	r18, 0x60	; 96
    7b4a:	d2 06       	cpc	r13, r18
    7b4c:	19 f4       	brne	.+6      	; 0x7b54 <tftpPoll+0x12a>
    7b4e:	c1 2c       	mov	r12, r1
    7b50:	28 e5       	ldi	r18, 0x58	; 88
    7b52:	d2 2e       	mov	r13, r18
    7b54:	86 01       	movw	r16, r12
			break;
	}

	txPtr = txBuffer;

	while(packetLength--) {
    7b56:	ae 10       	cpse	r10, r14
    7b58:	ed cf       	rjmp	.-38     	; 0x7b34 <tftpPoll+0x10a>
		spiWriteReg(writePointer++, *txPtr++);

		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
	}

	spiWriteWord(REG_S3_TX_WR0, writePointer - S3_TX_START);
    7b5a:	b8 01       	movw	r22, r16
    7b5c:	78 55       	subi	r23, 0x58	; 88
    7b5e:	84 e2       	ldi	r24, 0x24	; 36
    7b60:	97 e0       	ldi	r25, 0x07	; 7
    7b62:	50 dc       	rcall	.-1888   	; 0x7404 <spiWriteWord>
	spiWriteReg(REG_S3_CR, CR_SEND);
    7b64:	60 e2       	ldi	r22, 0x20	; 32
    7b66:	81 e0       	ldi	r24, 0x01	; 1
    7b68:	97 e0       	ldi	r25, 0x07	; 7
    7b6a:	33 dc       	rcall	.-1946   	; 0x73d2 <spiWriteReg>

	while(spiReadReg(REG_S3_CR));
    7b6c:	81 e0       	ldi	r24, 0x01	; 1
    7b6e:	97 e0       	ldi	r25, 0x07	; 7
    7b70:	5a dc       	rcall	.-1868   	; 0x7426 <spiReadReg>
    7b72:	81 11       	cpse	r24, r1
    7b74:	fb cf       	rjmp	.-10     	; 0x7b6c <tftpPoll+0x142>

	DBG_TFTP(tracePGMlnTftp(mDebugTftp_RESP);)
    7b76:	6b e7       	ldi	r22, 0x7B	; 123
    7b78:	71 e7       	ldi	r23, 0x71	; 113
    7b7a:	89 eb       	ldi	r24, 0xB9	; 185
    7b7c:	92 e7       	ldi	r25, 0x72	; 114
    7b7e:	45 d0       	rcall	.+138    	; 0x7c0a <tracePGMln>
#endif
		// Send the response
		sendResponse(response);
	}

	if(response == FINAL_ACK) {
    7b80:	34 e0       	ldi	r19, 0x04	; 4
    7b82:	b3 12       	cpse	r11, r19
    7b84:	67 cf       	rjmp	.-306    	; 0x7a54 <tftpPoll+0x2a>
		spiWriteReg(REG_S3_CR, CR_CLOSE);
    7b86:	60 e1       	ldi	r22, 0x10	; 16
    7b88:	81 e0       	ldi	r24, 0x01	; 1
    7b8a:	97 e0       	ldi	r25, 0x07	; 7
    7b8c:	22 dc       	rcall	.-1980   	; 0x73d2 <spiWriteReg>
		// Complete
		return(0);
    7b8e:	80 e0       	ldi	r24, 0x00	; 0
    7b90:	03 c0       	rjmp	.+6      	; 0x7b98 <tftpPoll+0x16e>
			DBG_TFTP(tracePGMlnTftp(mDebugTftp_SACK);)
			/* no break */

		case FINAL_ACK:

			DBG_TFTP(
    7b92:	69 e8       	ldi	r22, 0x89	; 137
    7b94:	71 e7       	ldi	r23, 0x71	; 113
    7b96:	c1 cf       	rjmp	.-126    	; 0x7b1a <tftpPoll+0xf0>
		return(0);
	}

	// Tftp continues
	return(1);
}
    7b98:	cc 59       	subi	r28, 0x9C	; 156
    7b9a:	df 4f       	sbci	r29, 0xFF	; 255
    7b9c:	de bf       	out	0x3e, r29	; 62
    7b9e:	cd bf       	out	0x3d, r28	; 61
    7ba0:	df 91       	pop	r29
    7ba2:	cf 91       	pop	r28
    7ba4:	1f 91       	pop	r17
    7ba6:	0f 91       	pop	r16
    7ba8:	ff 90       	pop	r15
    7baa:	ef 90       	pop	r14
    7bac:	df 90       	pop	r13
    7bae:	cf 90       	pop	r12
    7bb0:	bf 90       	pop	r11
    7bb2:	af 90       	pop	r10
    7bb4:	08 95       	ret

00007bb6 <validImage>:
#include "serial.h"
#include "debug.h"
#include "debug_vald.h"

uint8_t validImage(uint8_t* base)
{
    7bb6:	20 e0       	ldi	r18, 0x00	; 0
    7bb8:	30 e0       	ldi	r19, 0x00	; 0
    7bba:	fc 01       	movw	r30, r24
    7bbc:	e2 0f       	add	r30, r18
    7bbe:	f3 1f       	adc	r31, r19
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {

		// For each vector, check it is of the form:
		// 0x0C 0x94 0xWX 0xYZ  ; JMP 0xWXYZ
		if(base[i] != 0x0c) {
    7bc0:	40 81       	ld	r20, Z
    7bc2:	4c 30       	cpi	r20, 0x0C	; 12
    7bc4:	51 f4       	brne	.+20     	; 0x7bda <validImage+0x24>
				tracePGM(mDebugVald_0x0C);
			)
			return(0);
		}
		
		if(base[i + 1] != 0x94) {
    7bc6:	41 81       	ldd	r20, Z+1	; 0x01
    7bc8:	44 39       	cpi	r20, 0x94	; 148
    7bca:	39 f4       	brne	.+14     	; 0x7bda <validImage+0x24>
    7bcc:	2c 5f       	subi	r18, 0xFC	; 252
    7bce:	3f 4f       	sbci	r19, 0xFF	; 255

uint8_t validImage(uint8_t* base)
{
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
    7bd0:	24 33       	cpi	r18, 0x34	; 52
    7bd2:	31 05       	cpc	r19, r1
    7bd4:	91 f7       	brne	.-28     	; 0x7bba <validImage+0x4>
		}
	}

	DBG_VALD(tracePGMlnVald(mDebugVald_VALID);)

	return(1);
    7bd6:	81 e0       	ldi	r24, 0x01	; 1
}
    7bd8:	08 95       	ret
				tracenum(i);
				tracePGM(mDebugVald_WITH);
				tracenum(base[i]);
				tracePGM(mDebugVald_0x0C);
			)
			return(0);
    7bda:	80 e0       	ldi	r24, 0x00	; 0
    7bdc:	08 95       	ret

00007bde <tracePGM>:
 */
const unsigned char mDebug_NEWLINE[]	PROGMEM =	"\r\n";
const unsigned char mDebug_HEXPREF[]	PROGMEM =	"0x";

void tracePGM(const void* p_msg)
{
    7bde:	0f 93       	push	r16
    7be0:	1f 93       	push	r17
    7be2:	cf 93       	push	r28
    7be4:	df 93       	push	r29
    7be6:	ec 01       	movw	r28, r24
	uint8_t	c = 1, i = 0;
    7be8:	00 e0       	ldi	r16, 0x00	; 0
		 * 0x30000 is specific to atmega2560 and won't work on smaller or larger flashes.
		 * I should find a way to macro the calculation of this value
		 */
		c = pgm_read_byte_far(PROGMEM_OFFSET + (uint32_t)(uint16_t)p_msg + i);
#else
		c = pgm_read_byte_near((uint16_t)p_msg + i);
    7bea:	fe 01       	movw	r30, r28
    7bec:	e0 0f       	add	r30, r16
    7bee:	f1 1d       	adc	r31, r1
    7bf0:	14 91       	lpm	r17, Z
#endif
		if (c != 0) putch(c);
    7bf2:	11 23       	and	r17, r17
    7bf4:	11 f0       	breq	.+4      	; 0x7bfa <tracePGM+0x1c>
    7bf6:	81 2f       	mov	r24, r17
    7bf8:	6e d0       	rcall	.+220    	; 0x7cd6 <putch>
		i++;
    7bfa:	0f 5f       	subi	r16, 0xFF	; 255

void tracePGM(const void* p_msg)
{
	uint8_t	c = 1, i = 0;

	while(c != 0){
    7bfc:	11 11       	cpse	r17, r1
    7bfe:	f5 cf       	rjmp	.-22     	; 0x7bea <tracePGM+0xc>
		c = pgm_read_byte_near((uint16_t)p_msg + i);
#endif
		if (c != 0) putch(c);
		i++;
	}
}
    7c00:	df 91       	pop	r29
    7c02:	cf 91       	pop	r28
    7c04:	1f 91       	pop	r17
    7c06:	0f 91       	pop	r16
    7c08:	08 95       	ret

00007c0a <tracePGMln>:


void tracePGMln(const void* p_prefix, const void* p_msg)
{
    7c0a:	0f 93       	push	r16
    7c0c:	1f 93       	push	r17
    7c0e:	cf 93       	push	r28
    7c10:	df 93       	push	r29
    7c12:	ec 01       	movw	r28, r24
    7c14:	8b 01       	movw	r16, r22
	tracePGM(mDebug_NEWLINE);
    7c16:	83 ec       	ldi	r24, 0xC3	; 195
    7c18:	92 e7       	ldi	r25, 0x72	; 114
    7c1a:	e1 df       	rcall	.-62     	; 0x7bde <tracePGM>
	tracePGM(p_prefix);
    7c1c:	ce 01       	movw	r24, r28
    7c1e:	df df       	rcall	.-66     	; 0x7bde <tracePGM>
	tracePGM(p_msg);
    7c20:	c8 01       	movw	r24, r16
}
    7c22:	df 91       	pop	r29
    7c24:	cf 91       	pop	r28
    7c26:	1f 91       	pop	r17
    7c28:	0f 91       	pop	r16

void tracePGMln(const void* p_prefix, const void* p_msg)
{
	tracePGM(mDebug_NEWLINE);
	tracePGM(p_prefix);
	tracePGM(p_msg);
    7c2a:	d9 cf       	rjmp	.-78     	; 0x7bde <tracePGM>

00007c2c <trace>:
}


void trace(char* msg)
{
    7c2c:	cf 93       	push	r28
    7c2e:	df 93       	push	r29
	uint8_t c;

	if(*msg != '\0') {
    7c30:	fc 01       	movw	r30, r24
    7c32:	20 81       	ld	r18, Z
    7c34:	22 23       	and	r18, r18
    7c36:	31 f0       	breq	.+12     	; 0x7c44 <trace+0x18>
    7c38:	ec 01       	movw	r28, r24
		while((c = *msg++)) putch(c);
    7c3a:	89 91       	ld	r24, Y+
    7c3c:	88 23       	and	r24, r24
    7c3e:	11 f0       	breq	.+4      	; 0x7c44 <trace+0x18>
    7c40:	4a d0       	rcall	.+148    	; 0x7cd6 <putch>
    7c42:	fb cf       	rjmp	.-10     	; 0x7c3a <trace+0xe>
	}
}
    7c44:	df 91       	pop	r29
    7c46:	cf 91       	pop	r28
    7c48:	08 95       	ret

00007c4a <traceln>:


void traceln(const void* p_prefix, char* msg)
{
    7c4a:	0f 93       	push	r16
    7c4c:	1f 93       	push	r17
    7c4e:	cf 93       	push	r28
    7c50:	df 93       	push	r29
    7c52:	ec 01       	movw	r28, r24
    7c54:	8b 01       	movw	r16, r22
	tracePGM(mDebug_NEWLINE);
    7c56:	83 ec       	ldi	r24, 0xC3	; 195
    7c58:	92 e7       	ldi	r25, 0x72	; 114
    7c5a:	c1 df       	rcall	.-126    	; 0x7bde <tracePGM>
	tracePGM(p_prefix);
    7c5c:	ce 01       	movw	r24, r28
    7c5e:	bf df       	rcall	.-130    	; 0x7bde <tracePGM>
	trace(msg);
    7c60:	c8 01       	movw	r24, r16
}
    7c62:	df 91       	pop	r29
    7c64:	cf 91       	pop	r28
    7c66:	1f 91       	pop	r17
    7c68:	0f 91       	pop	r16

void traceln(const void* p_prefix, char* msg)
{
	tracePGM(mDebug_NEWLINE);
	tracePGM(p_prefix);
	trace(msg);
    7c6a:	e0 cf       	rjmp	.-64     	; 0x7c2c <trace>

00007c6c <tracehex>:
}


void tracehex(uint32_t num, uint8_t len)
{
    7c6c:	cf 92       	push	r12
    7c6e:	df 92       	push	r13
    7c70:	ef 92       	push	r14
    7c72:	ff 92       	push	r15
    7c74:	cf 93       	push	r28
    7c76:	6b 01       	movw	r12, r22
    7c78:	7c 01       	movw	r14, r24
    7c7a:	c4 2f       	mov	r28, r20
	tracePGM(mDebug_HEXPREF);
    7c7c:	80 ec       	ldi	r24, 0xC0	; 192
    7c7e:	92 e7       	ldi	r25, 0x72	; 114
    7c80:	ae df       	rcall	.-164    	; 0x7bde <tracePGM>

	while(len > 0) {
    7c82:	cc 23       	and	r28, r28
    7c84:	a9 f0       	breq	.+42     	; 0x7cb0 <tracehex+0x44>
		puthex(num >> (4 * (len - 1)));
    7c86:	8c 2f       	mov	r24, r28
    7c88:	90 e0       	ldi	r25, 0x00	; 0
    7c8a:	01 97       	sbiw	r24, 0x01	; 1
    7c8c:	88 0f       	add	r24, r24
    7c8e:	99 1f       	adc	r25, r25
    7c90:	88 0f       	add	r24, r24
    7c92:	99 1f       	adc	r25, r25
    7c94:	a7 01       	movw	r20, r14
    7c96:	96 01       	movw	r18, r12
    7c98:	04 c0       	rjmp	.+8      	; 0x7ca2 <tracehex+0x36>
    7c9a:	56 95       	lsr	r21
    7c9c:	47 95       	ror	r20
    7c9e:	37 95       	ror	r19
    7ca0:	27 95       	ror	r18
    7ca2:	8a 95       	dec	r24
    7ca4:	d2 f7       	brpl	.-12     	; 0x7c9a <tracehex+0x2e>
    7ca6:	da 01       	movw	r26, r20
    7ca8:	c9 01       	movw	r24, r18
    7caa:	1c d0       	rcall	.+56     	; 0x7ce4 <puthex>
		len--;
    7cac:	c1 50       	subi	r28, 0x01	; 1
    7cae:	e9 cf       	rjmp	.-46     	; 0x7c82 <tracehex+0x16>
	}
}
    7cb0:	cf 91       	pop	r28
    7cb2:	ff 90       	pop	r15
    7cb4:	ef 90       	pop	r14
    7cb6:	df 90       	pop	r13
    7cb8:	cf 90       	pop	r12
    7cba:	08 95       	ret

00007cbc <serialInit>:


void serialInit(void)
{
	// Double speed mode USART0
	UART_STATUS_REG		= _BV(UART_DOUBLE_SPEED);
    7cbc:	82 e0       	ldi	r24, 0x02	; 2
    7cbe:	80 93 c0 00 	sts	0x00C0, r24
	// Enable receiver and transiter on USART0
	UART_CONTROL_REG	= _BV(UART_ENABLE_RECEIVER) | _BV(UART_ENABLE_TRANSMITTER);
    7cc2:	88 e1       	ldi	r24, 0x18	; 24
    7cc4:	80 93 c1 00 	sts	0x00C1, r24
	// Set 8bit character length on USART0
	UART_MODE_REG		= _BV(UART_CHAR_SIZE_LOW) | _BV(UART_CHAR_SIZE_MID);
    7cc8:	86 e0       	ldi	r24, 0x06	; 6
    7cca:	80 93 c2 00 	sts	0x00C2, r24
	// Set USART0 baud rate
	UART_BAUD_RATE_LOW	= (uint8_t)((F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1);
    7cce:	80 e1       	ldi	r24, 0x10	; 16
    7cd0:	80 93 c4 00 	sts	0x00C4, r24
    7cd4:	08 95       	ret

00007cd6 <putch>:
}


void putch(uint8_t c)
{
	while(!(UART_STATUS_REG & _BV(UART_DATA_REG_EMPTY)));
    7cd6:	90 91 c0 00 	lds	r25, 0x00C0
    7cda:	95 ff       	sbrs	r25, 5
    7cdc:	fc cf       	rjmp	.-8      	; 0x7cd6 <putch>
	UART_DATA_REG = c;
    7cde:	80 93 c6 00 	sts	0x00C6, r24
    7ce2:	08 95       	ret

00007ce4 <puthex>:
}


void puthex(uint8_t c)
{
	c &= 0xf;
    7ce4:	8f 70       	andi	r24, 0x0F	; 15
	if(c > 9) c += 7;
    7ce6:	8a 30       	cpi	r24, 0x0A	; 10
    7ce8:	08 f0       	brcs	.+2      	; 0x7cec <puthex+0x8>
    7cea:	89 5f       	subi	r24, 0xF9	; 249
	//while(!(UART_STATUS_REG & _BV(UART_DATA_REG_EMPTY)));
	//UART_DATA_REG = c + '0';
	putch(c + '0');
    7cec:	80 5d       	subi	r24, 0xD0	; 208
    7cee:	f3 cf       	rjmp	.-26     	; 0x7cd6 <putch>

00007cf0 <getch>:

uint8_t getch(void)
{
	//uint8_t ch;

	while(!(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)));
    7cf0:	80 91 c0 00 	lds	r24, 0x00C0
    7cf4:	87 ff       	sbrs	r24, 7
    7cf6:	fc cf       	rjmp	.-8      	; 0x7cf0 <getch>
	if(!(UART_STATUS_REG & _BV(UART_FRAME_ERROR))) {
    7cf8:	80 91 c0 00 	lds	r24, 0x00C0
    7cfc:	84 fd       	sbrc	r24, 4
    7cfe:	01 c0       	rjmp	.+2      	; 0x7d02 <getch+0x12>
		 * expects to be talking to the application, and DON'T reset the
		 * watchdog.  This should cause the bootloader to abort and run
		 * the application "soon", if it keeps happening.  (Note that we
		 * don't care that an invalid char is returned...)
		 */
		wdt_reset();
    7d00:	a8 95       	wdr
	}

	//ch = UART_DATA_REG;
	//return ch;

	return(UART_DATA_REG);
    7d02:	80 91 c6 00 	lds	r24, 0x00C6
}
    7d06:	08 95       	ret

00007d08 <serialPoll>:


uint8_t serialPoll(void)
{
	if(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)) {
    7d08:	80 91 c0 00 	lds	r24, 0x00C0
    7d0c:	87 ff       	sbrs	r24, 7
    7d0e:	05 c0       	rjmp	.+10     	; 0x7d1a <serialPoll+0x12>
		resetTick();
    7d10:	28 d0       	rcall	.+80     	; 0x7d62 <resetTick>
		serialFlashing = TRUE;
    7d12:	81 e0       	ldi	r24, 0x01	; 1
    7d14:	80 93 29 01 	sts	0x0129, r24
#if defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) || defined(__AVR_ATmega1284P__)
		return(processOptiboot());
    7d18:	50 c0       	rjmp	.+160    	; 0x7dba <processOptiboot>
#elif defined(__AVR_ATmega2560__)
		return(processStk500boot());
#endif
	}
	return(1);
}
    7d1a:	81 e0       	ldi	r24, 0x01	; 1
    7d1c:	08 95       	ret

00007d1e <updateLed>:
static uint16_t tick = 0;


void updateLed(void)
{
	uint16_t next_timer_1 = TCNT1;
    7d1e:	80 91 84 00 	lds	r24, 0x0084
    7d22:	90 91 85 00 	lds	r25, 0x0085

	if(next_timer_1 & 0x400) LED_PORT ^= _BV(LED); // Led pin high
    7d26:	92 ff       	sbrs	r25, 2
    7d28:	05 c0       	rjmp	.+10     	; 0x7d34 <updateLed+0x16>
    7d2a:	25 b1       	in	r18, 0x05	; 5
    7d2c:	30 e2       	ldi	r19, 0x20	; 32
    7d2e:	23 27       	eor	r18, r19
    7d30:	25 b9       	out	0x05, r18	; 5
    7d32:	01 c0       	rjmp	.+2      	; 0x7d36 <updateLed+0x18>
	else LED_PORT &= ~_BV(LED); // Led pin low
    7d34:	2d 98       	cbi	0x05, 5	; 5

	if(next_timer_1 < last_timer_1) {
    7d36:	20 91 22 01 	lds	r18, 0x0122
    7d3a:	30 91 23 01 	lds	r19, 0x0123
    7d3e:	82 17       	cp	r24, r18
    7d40:	93 07       	cpc	r25, r19
    7d42:	50 f4       	brcc	.+20     	; 0x7d58 <updateLed+0x3a>
		tick++;
    7d44:	20 91 20 01 	lds	r18, 0x0120
    7d48:	30 91 21 01 	lds	r19, 0x0121
    7d4c:	2f 5f       	subi	r18, 0xFF	; 255
    7d4e:	3f 4f       	sbci	r19, 0xFF	; 255
    7d50:	30 93 21 01 	sts	0x0121, r19
    7d54:	20 93 20 01 	sts	0x0120, r18
		    tracePGMlnUtil(mDebugUtil_LAST);
		    tracenum(last_timer_1);
		)
	}

	last_timer_1 = next_timer_1;
    7d58:	90 93 23 01 	sts	0x0123, r25
    7d5c:	80 93 22 01 	sts	0x0122, r24
    7d60:	08 95       	ret

00007d62 <resetTick>:
}

void resetTick(void)
{
	TCNT1 = 0;
    7d62:	10 92 85 00 	sts	0x0085, r1
    7d66:	10 92 84 00 	sts	0x0084, r1
	tick = 0;
    7d6a:	10 92 21 01 	sts	0x0121, r1
    7d6e:	10 92 20 01 	sts	0x0120, r1
    7d72:	08 95       	ret

00007d74 <timedOut>:
{
	// Never timeout if there is no code in Flash
#if (FLASHEND > 0x10000)
	if(pgm_read_word_far(0x0000) == 0xFFFF) return(0);
#else
	if(pgm_read_word_near(0x0000) == 0xFFFF) return(0);
    7d74:	e0 e0       	ldi	r30, 0x00	; 0
    7d76:	f0 e0       	ldi	r31, 0x00	; 0
    7d78:	85 91       	lpm	r24, Z+
    7d7a:	94 91       	lpm	r25, Z
    7d7c:	01 96       	adiw	r24, 0x01	; 1
    7d7e:	41 f0       	breq	.+16     	; 0x7d90 <timedOut+0x1c>
#endif

	if(tick > TIMEOUT) return(1);
    7d80:	81 e0       	ldi	r24, 0x01	; 1
    7d82:	20 91 20 01 	lds	r18, 0x0120
    7d86:	30 91 21 01 	lds	r19, 0x0121
    7d8a:	25 30       	cpi	r18, 0x05	; 5
    7d8c:	31 05       	cpc	r19, r1
    7d8e:	08 f4       	brcc	.+2      	; 0x7d92 <timedOut+0x1e>
{
	// Never timeout if there is no code in Flash
#if (FLASHEND > 0x10000)
	if(pgm_read_word_far(0x0000) == 0xFFFF) return(0);
#else
	if(pgm_read_word_near(0x0000) == 0xFFFF) return(0);
    7d90:	80 e0       	ldi	r24, 0x00	; 0
#endif

	if(tick > TIMEOUT) return(1);
	else return(0);
}
    7d92:	08 95       	ret

00007d94 <verifySpace>:
static uint16_t address = 0;
static uint8_t  length;

static void verifySpace(void)
{
	if(getch() != CRC_EOP) {
    7d94:	ad df       	rcall	.-166    	; 0x7cf0 <getch>
    7d96:	80 32       	cpi	r24, 0x20	; 32
    7d98:	39 f0       	breq	.+14     	; 0x7da8 <verifySpace+0x14>
		WDTCSR = _BV(WDCE) | _BV(WDE);
    7d9a:	88 e1       	ldi	r24, 0x18	; 24
    7d9c:	80 93 60 00 	sts	0x0060, r24
		WDTCSR = WATCHDOG_16MS;	// shorten WD timeout
    7da0:	88 e0       	ldi	r24, 0x08	; 8
    7da2:	80 93 60 00 	sts	0x0060, r24
    7da6:	ff cf       	rjmp	.-2      	; 0x7da6 <verifySpace+0x12>
		while(1)				// and busy-loop so that WD causes
			;					// a reset and app start.
	}
	putch(STK_INSYNC);
    7da8:	84 e1       	ldi	r24, 0x14	; 20
    7daa:	95 cf       	rjmp	.-214    	; 0x7cd6 <putch>

00007dac <getNch>:
}


static void getNch(uint8_t count)
{
    7dac:	cf 93       	push	r28
    7dae:	c8 2f       	mov	r28, r24
	do getch();
    7db0:	9f df       	rcall	.-194    	; 0x7cf0 <getch>
	while(--count);
    7db2:	c1 50       	subi	r28, 0x01	; 1
    7db4:	e9 f7       	brne	.-6      	; 0x7db0 <getNch+0x4>
	verifySpace();
}
    7db6:	cf 91       	pop	r28

static void getNch(uint8_t count)
{
	do getch();
	while(--count);
	verifySpace();
    7db8:	ed cf       	rjmp	.-38     	; 0x7d94 <verifySpace>

00007dba <processOptiboot>:
}


uint8_t processOptiboot(void)
{
    7dba:	ef 92       	push	r14
    7dbc:	ff 92       	push	r15
    7dbe:	0f 93       	push	r16
    7dc0:	1f 93       	push	r17
    7dc2:	cf 93       	push	r28
    7dc4:	df 93       	push	r29
    7dc6:	cd b7       	in	r28, 0x3d	; 61
    7dc8:	de b7       	in	r29, 0x3e	; 62
    7dca:	c1 50       	subi	r28, 0x01	; 1
    7dcc:	d1 40       	sbci	r29, 0x01	; 1
    7dce:	de bf       	out	0x3e, r29	; 62
    7dd0:	cd bf       	out	0x3d, r28	; 61
	uint8_t ch;

	ch = getch();
    7dd2:	8e df       	rcall	.-228    	; 0x7cf0 <getch>

	if(ch == STK_GET_PARAMETER) {
    7dd4:	81 34       	cpi	r24, 0x41	; 65
    7dd6:	a9 f4       	brne	.+42     	; 0x7e02 <processOptiboot+0x48>
		unsigned char which = getch();
    7dd8:	8b df       	rcall	.-234    	; 0x7cf0 <getch>
		verifySpace();
    7dda:	cf 5f       	subi	r28, 0xFF	; 255
    7ddc:	de 4f       	sbci	r29, 0xFE	; 254
    7dde:	88 83       	st	Y, r24
    7de0:	c1 50       	subi	r28, 0x01	; 1
    7de2:	d1 40       	sbci	r29, 0x01	; 1
    7de4:	d7 df       	rcall	.-82     	; 0x7d94 <verifySpace>
		if(which == 0x82) {
    7de6:	cf 5f       	subi	r28, 0xFF	; 255
    7de8:	de 4f       	sbci	r29, 0xFE	; 254
    7dea:	88 81       	ld	r24, Y
    7dec:	c1 50       	subi	r28, 0x01	; 1
    7dee:	d1 40       	sbci	r29, 0x01	; 1
    7df0:	82 38       	cpi	r24, 0x82	; 130
    7df2:	11 f4       	brne	.+4      	; 0x7df8 <processOptiboot+0x3e>
			/*
			 * Send tftpboot version as "minor SW version"
			 */
			putch(ARIADNE_MINVER);
    7df4:	84 e0       	ldi	r24, 0x04	; 4
    7df6:	03 c0       	rjmp	.+6      	; 0x7dfe <processOptiboot+0x44>
		} else if(which == 0x81) {
    7df8:	81 38       	cpi	r24, 0x81	; 129
    7dfa:	f9 f0       	breq	.+62     	; 0x7e3a <processOptiboot+0x80>
		} else {
			/*
			 * GET PARAMETER returns a generic 0x03 reply for
			 * other parameters - enough to keep Avrdude happy
			 */
			putch(0x03);
    7dfc:	83 e0       	ldi	r24, 0x03	; 3
    7dfe:	6b df       	rcall	.-298    	; 0x7cd6 <putch>
    7e00:	b2 c0       	rjmp	.+356    	; 0x7f66 <processOptiboot+0x1ac>
		}
	} else if(ch == STK_SET_DEVICE) {
    7e02:	82 34       	cpi	r24, 0x42	; 66
    7e04:	11 f4       	brne	.+4      	; 0x7e0a <processOptiboot+0x50>
		// SET DEVICE is ignored
		getNch(20);
    7e06:	84 e1       	ldi	r24, 0x14	; 20
    7e08:	03 c0       	rjmp	.+6      	; 0x7e10 <processOptiboot+0x56>
	} else if(ch == STK_SET_DEVICE_EXT) {
    7e0a:	85 34       	cpi	r24, 0x45	; 69
    7e0c:	19 f4       	brne	.+6      	; 0x7e14 <processOptiboot+0x5a>
		// SET DEVICE EXT is ignored
		getNch(4);
    7e0e:	84 e0       	ldi	r24, 0x04	; 4
    7e10:	cd df       	rcall	.-102    	; 0x7dac <getNch>
    7e12:	a9 c0       	rjmp	.+338    	; 0x7f66 <processOptiboot+0x1ac>
	} else if(ch == STK_LOAD_ADDRESS) {
    7e14:	85 35       	cpi	r24, 0x55	; 85
    7e16:	69 f4       	brne	.+26     	; 0x7e32 <processOptiboot+0x78>
		// LOAD ADDRESS
		uint16_t newAddress;
		newAddress = getch();
    7e18:	6b df       	rcall	.-298    	; 0x7cf0 <getch>
    7e1a:	18 2f       	mov	r17, r24
		newAddress = (newAddress & 0xff) | (getch() << 8);
    7e1c:	69 df       	rcall	.-302    	; 0x7cf0 <getch>
    7e1e:	21 2f       	mov	r18, r17
    7e20:	30 e0       	ldi	r19, 0x00	; 0
    7e22:	38 2b       	or	r19, r24
#ifdef RAMPZ
		// Transfer top bit to RAMPZ
		RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif

		newAddress += newAddress; // Convert from word address to byte address
    7e24:	22 0f       	add	r18, r18
    7e26:	33 1f       	adc	r19, r19
		address = newAddress;
    7e28:	30 93 26 01 	sts	0x0126, r19
    7e2c:	20 93 25 01 	sts	0x0125, r18
    7e30:	99 c0       	rjmp	.+306    	; 0x7f64 <processOptiboot+0x1aa>
		verifySpace();
	} else if(ch == STK_UNIVERSAL) {
    7e32:	86 35       	cpi	r24, 0x56	; 86
    7e34:	21 f4       	brne	.+8      	; 0x7e3e <processOptiboot+0x84>
		// UNIVERSAL command is ignored
		getNch(4);
    7e36:	84 e0       	ldi	r24, 0x04	; 4
    7e38:	b9 df       	rcall	.-142    	; 0x7dac <getNch>
		putch(0x00);
    7e3a:	80 e0       	ldi	r24, 0x00	; 0
    7e3c:	e0 cf       	rjmp	.-64     	; 0x7dfe <processOptiboot+0x44>
	}
	/* Write memory, length is big endian and is in bytes */
	else if(ch == STK_PROG_PAGE) {
    7e3e:	84 36       	cpi	r24, 0x64	; 100
    7e40:	09 f0       	breq	.+2      	; 0x7e44 <processOptiboot+0x8a>
    7e42:	60 c0       	rjmp	.+192    	; 0x7f04 <processOptiboot+0x14a>
		// PROGRAM PAGE - we support flash programming only, not EEPROM
		uint8_t  buff[256];
		uint8_t* bufPtr;
		uint16_t addrPtr;

		getch();			/* getlen() */
    7e44:	55 df       	rcall	.-342    	; 0x7cf0 <getch>
		length = getch();
    7e46:	54 df       	rcall	.-344    	; 0x7cf0 <getch>
    7e48:	80 93 24 01 	sts	0x0124, r24
		getch();
    7e4c:	51 df       	rcall	.-350    	; 0x7cf0 <getch>

		// If we are in RWW section, immediately start page erase
		if(address < NRWWSTART) boot_page_erase((uint16_t)(void*)address);
    7e4e:	e0 91 25 01 	lds	r30, 0x0125
    7e52:	f0 91 26 01 	lds	r31, 0x0126
    7e56:	e1 15       	cp	r30, r1
    7e58:	80 e7       	ldi	r24, 0x70	; 112
    7e5a:	f8 07       	cpc	r31, r24
    7e5c:	20 f4       	brcc	.+8      	; 0x7e66 <processOptiboot+0xac>
    7e5e:	83 e0       	ldi	r24, 0x03	; 3
    7e60:	80 93 57 00 	sts	0x0057, r24
    7e64:	e8 95       	spm
    7e66:	8e 01       	movw	r16, r28
    7e68:	0f 5f       	subi	r16, 0xFF	; 255
    7e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    7e6c:	78 01       	movw	r14, r16

		// While that is going on, read in page contents
		bufPtr = buff;
		do* bufPtr++ = getch();
    7e6e:	40 df       	rcall	.-384    	; 0x7cf0 <getch>
    7e70:	f8 01       	movw	r30, r16
    7e72:	81 93       	st	Z+, r24
    7e74:	8f 01       	movw	r16, r30
		while(--length);
    7e76:	80 91 24 01 	lds	r24, 0x0124
    7e7a:	81 50       	subi	r24, 0x01	; 1
    7e7c:	80 93 24 01 	sts	0x0124, r24
    7e80:	81 11       	cpse	r24, r1
    7e82:	f5 cf       	rjmp	.-22     	; 0x7e6e <processOptiboot+0xb4>

		// If we are in NRWW section, page erase has to be delayed until now.
		// Todo: Take RAMPZ into account
		if(address >= NRWWSTART) boot_page_erase((uint16_t)(void*)address);
    7e84:	e0 91 25 01 	lds	r30, 0x0125
    7e88:	f0 91 26 01 	lds	r31, 0x0126
    7e8c:	e1 15       	cp	r30, r1
    7e8e:	80 e7       	ldi	r24, 0x70	; 112
    7e90:	f8 07       	cpc	r31, r24
    7e92:	20 f0       	brcs	.+8      	; 0x7e9c <processOptiboot+0xe2>
    7e94:	83 e0       	ldi	r24, 0x03	; 3
    7e96:	80 93 57 00 	sts	0x0057, r24
    7e9a:	e8 95       	spm

		// Read command terminator, start reply
		verifySpace();
    7e9c:	7b df       	rcall	.-266    	; 0x7d94 <verifySpace>

		// If only a partial page is to be programmed, the erase might not be complete.
		// So check that here
		boot_spm_busy_wait();
    7e9e:	07 b6       	in	r0, 0x37	; 55
    7ea0:	00 fc       	sbrc	r0, 0
    7ea2:	fd cf       	rjmp	.-6      	; 0x7e9e <processOptiboot+0xe4>

		// Copy buffer into programming buffer
		bufPtr = buff;
		addrPtr = (uint16_t)(void*)address;
    7ea4:	20 91 25 01 	lds	r18, 0x0125
    7ea8:	30 91 26 01 	lds	r19, 0x0126
    7eac:	89 01       	movw	r16, r18
    7eae:	02 58       	subi	r16, 0x82	; 130
    7eb0:	1f 4f       	sbci	r17, 0xFF	; 255
		// If only a partial page is to be programmed, the erase might not be complete.
		// So check that here
		boot_spm_busy_wait();

		// Copy buffer into programming buffer
		bufPtr = buff;
    7eb2:	c9 01       	movw	r24, r18
    7eb4:	69 81       	ldd	r22, Y+1	; 0x01
    7eb6:	a7 01       	movw	r20, r14
    7eb8:	42 1b       	sub	r20, r18
    7eba:	53 0b       	sbc	r21, r19
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
			boot_page_fill((uint16_t)(void*)addrPtr, a);
    7ebc:	ff 24       	eor	r15, r15
    7ebe:	f3 94       	inc	r15
    7ec0:	da 01       	movw	r26, r20
    7ec2:	a8 0f       	add	r26, r24
    7ec4:	b9 1f       	adc	r27, r25
		addrPtr = (uint16_t)(void*)address;
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
    7ec6:	11 96       	adiw	r26, 0x01	; 1
    7ec8:	ec 91       	ld	r30, X
    7eca:	11 97       	sbiw	r26, 0x01	; 1
    7ecc:	70 e0       	ldi	r23, 0x00	; 0
    7ece:	7e 2b       	or	r23, r30
			boot_page_fill((uint16_t)(void*)addrPtr, a);
    7ed0:	fc 01       	movw	r30, r24
    7ed2:	0b 01       	movw	r0, r22
    7ed4:	f0 92 57 00 	sts	0x0057, r15
    7ed8:	e8 95       	spm
    7eda:	11 24       	eor	r1, r1
			addrPtr += 2;
		} while(--ch);
    7edc:	80 17       	cp	r24, r16
    7ede:	91 07       	cpc	r25, r17
    7ee0:	21 f0       	breq	.+8      	; 0x7eea <processOptiboot+0x130>
    7ee2:	02 96       	adiw	r24, 0x02	; 2
		addrPtr = (uint16_t)(void*)address;
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
    7ee4:	12 96       	adiw	r26, 0x02	; 2
    7ee6:	6c 91       	ld	r22, X
    7ee8:	eb cf       	rjmp	.-42     	; 0x7ec0 <processOptiboot+0x106>
			boot_page_fill((uint16_t)(void*)addrPtr, a);
			addrPtr += 2;
		} while(--ch);

		// Write from programming buffer
		boot_page_write((uint16_t)(void*)address);
    7eea:	85 e0       	ldi	r24, 0x05	; 5
    7eec:	f9 01       	movw	r30, r18
    7eee:	80 93 57 00 	sts	0x0057, r24
    7ef2:	e8 95       	spm
		boot_spm_busy_wait();
    7ef4:	07 b6       	in	r0, 0x37	; 55
    7ef6:	00 fc       	sbrc	r0, 0
    7ef8:	fd cf       	rjmp	.-6      	; 0x7ef4 <processOptiboot+0x13a>

#if defined(RWWSRE)
		// Reenable read access to flash
		boot_rww_enable();
    7efa:	81 e1       	ldi	r24, 0x11	; 17
    7efc:	80 93 57 00 	sts	0x0057, r24
    7f00:	e8 95       	spm
    7f02:	31 c0       	rjmp	.+98     	; 0x7f66 <processOptiboot+0x1ac>
#endif
	}
	/* Read memory block mode, length is big endian.  */
	else if(ch == STK_READ_PAGE) {
    7f04:	84 37       	cpi	r24, 0x74	; 116
    7f06:	d1 f4       	brne	.+52     	; 0x7f3c <processOptiboot+0x182>
		// READ PAGE - we only read flash
		getch();			/* getlen() */
    7f08:	f3 de       	rcall	.-538    	; 0x7cf0 <getch>
		length = getch();
    7f0a:	f2 de       	rcall	.-540    	; 0x7cf0 <getch>
    7f0c:	80 93 24 01 	sts	0x0124, r24
		getch();
    7f10:	ef de       	rcall	.-546    	; 0x7cf0 <getch>

		verifySpace();
    7f12:	40 df       	rcall	.-384    	; 0x7d94 <verifySpace>
			__asm__("elpm %0,Z\n":"=r"(result):"z"(address));
			putch(result);
			address++;
		} while(--length);
#else
		do putch(pgm_read_byte_near(address++));
    7f14:	e0 91 25 01 	lds	r30, 0x0125
    7f18:	f0 91 26 01 	lds	r31, 0x0126
    7f1c:	cf 01       	movw	r24, r30
    7f1e:	01 96       	adiw	r24, 0x01	; 1
    7f20:	90 93 26 01 	sts	0x0126, r25
    7f24:	80 93 25 01 	sts	0x0125, r24
    7f28:	84 91       	lpm	r24, Z
    7f2a:	d5 de       	rcall	.-598    	; 0x7cd6 <putch>
		while(--length);
    7f2c:	80 91 24 01 	lds	r24, 0x0124
    7f30:	81 50       	subi	r24, 0x01	; 1
    7f32:	80 93 24 01 	sts	0x0124, r24
    7f36:	81 11       	cpse	r24, r1
    7f38:	ed cf       	rjmp	.-38     	; 0x7f14 <processOptiboot+0x15a>
    7f3a:	15 c0       	rjmp	.+42     	; 0x7f66 <processOptiboot+0x1ac>
#endif
	}
	/* Get device signature bytes  */
	else if(ch == STK_READ_SIGN) {
    7f3c:	85 37       	cpi	r24, 0x75	; 117
    7f3e:	39 f4       	brne	.+14     	; 0x7f4e <processOptiboot+0x194>
		// READ SIGN - return what Avrdude wants to hear
		verifySpace();
    7f40:	29 df       	rcall	.-430    	; 0x7d94 <verifySpace>
		putch(SIGNATURE_0);
    7f42:	8e e1       	ldi	r24, 0x1E	; 30
    7f44:	c8 de       	rcall	.-624    	; 0x7cd6 <putch>
		putch(SIGNATURE_1);
    7f46:	85 e9       	ldi	r24, 0x95	; 149
    7f48:	c6 de       	rcall	.-628    	; 0x7cd6 <putch>
		putch(SIGNATURE_2);
    7f4a:	8f e0       	ldi	r24, 0x0F	; 15
    7f4c:	58 cf       	rjmp	.-336    	; 0x7dfe <processOptiboot+0x44>
	} else if(ch == STK_LEAVE_PROGMODE) {
    7f4e:	81 35       	cpi	r24, 0x51	; 81
    7f50:	49 f4       	brne	.+18     	; 0x7f64 <processOptiboot+0x1aa>
		// Adaboot no-wait mod
		//watchdogConfig(WATCHDOG_16MS);
		verifySpace();
    7f52:	20 df       	rcall	.-448    	; 0x7d94 <verifySpace>
		eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
    7f54:	6e ee       	ldi	r22, 0xEE	; 238
    7f56:	82 e0       	ldi	r24, 0x02	; 2
    7f58:	90 e0       	ldi	r25, 0x00	; 0
    7f5a:	24 d0       	rcall	.+72     	; 0x7fa4 <__eewr_byte_m328p>
		putch(STK_OK);
    7f5c:	80 e1       	ldi	r24, 0x10	; 16
    7f5e:	bb de       	rcall	.-650    	; 0x7cd6 <putch>
		return(0);
    7f60:	80 e0       	ldi	r24, 0x00	; 0
    7f62:	04 c0       	rjmp	.+8      	; 0x7f6c <processOptiboot+0x1b2>
	} else {
		// This covers the response to commands like STK_ENTER_PROGMODE
		verifySpace();
    7f64:	17 df       	rcall	.-466    	; 0x7d94 <verifySpace>
	}
	putch(STK_OK);
    7f66:	80 e1       	ldi	r24, 0x10	; 16
    7f68:	b6 de       	rcall	.-660    	; 0x7cd6 <putch>
	return(1);
    7f6a:	81 e0       	ldi	r24, 0x01	; 1
}
    7f6c:	cf 5f       	subi	r28, 0xFF	; 255
    7f6e:	de 4f       	sbci	r29, 0xFE	; 254
    7f70:	de bf       	out	0x3e, r29	; 62
    7f72:	cd bf       	out	0x3d, r28	; 61
    7f74:	df 91       	pop	r29
    7f76:	cf 91       	pop	r28
    7f78:	1f 91       	pop	r17
    7f7a:	0f 91       	pop	r16
    7f7c:	ff 90       	pop	r15
    7f7e:	ef 90       	pop	r14
    7f80:	08 95       	ret

00007f82 <memcpy_P>:
    7f82:	fb 01       	movw	r30, r22
    7f84:	dc 01       	movw	r26, r24
    7f86:	02 c0       	rjmp	.+4      	; 0x7f8c <memcpy_P+0xa>
    7f88:	05 90       	lpm	r0, Z+
    7f8a:	0d 92       	st	X+, r0
    7f8c:	41 50       	subi	r20, 0x01	; 1
    7f8e:	50 40       	sbci	r21, 0x00	; 0
    7f90:	d8 f7       	brcc	.-10     	; 0x7f88 <memcpy_P+0x6>
    7f92:	08 95       	ret

00007f94 <__eerd_byte_m328p>:
    7f94:	f9 99       	sbic	0x1f, 1	; 31
    7f96:	fe cf       	rjmp	.-4      	; 0x7f94 <__eerd_byte_m328p>
    7f98:	92 bd       	out	0x22, r25	; 34
    7f9a:	81 bd       	out	0x21, r24	; 33
    7f9c:	f8 9a       	sbi	0x1f, 0	; 31
    7f9e:	99 27       	eor	r25, r25
    7fa0:	80 b5       	in	r24, 0x20	; 32
    7fa2:	08 95       	ret

00007fa4 <__eewr_byte_m328p>:
    7fa4:	26 2f       	mov	r18, r22

00007fa6 <__eewr_r18_m328p>:
    7fa6:	f9 99       	sbic	0x1f, 1	; 31
    7fa8:	fe cf       	rjmp	.-4      	; 0x7fa6 <__eewr_r18_m328p>
    7faa:	1f ba       	out	0x1f, r1	; 31
    7fac:	92 bd       	out	0x22, r25	; 34
    7fae:	81 bd       	out	0x21, r24	; 33
    7fb0:	20 bd       	out	0x20, r18	; 32
    7fb2:	0f b6       	in	r0, 0x3f	; 63
    7fb4:	f8 94       	cli
    7fb6:	fa 9a       	sbi	0x1f, 2	; 31
    7fb8:	f9 9a       	sbi	0x1f, 1	; 31
    7fba:	0f be       	out	0x3f, r0	; 63
    7fbc:	01 96       	adiw	r24, 0x01	; 1
    7fbe:	08 95       	ret

00007fc0 <_exit>:
    7fc0:	f8 94       	cli

00007fc2 <__stop_program>:
    7fc2:	ff cf       	rjmp	.-2      	; 0x7fc2 <__stop_program>
