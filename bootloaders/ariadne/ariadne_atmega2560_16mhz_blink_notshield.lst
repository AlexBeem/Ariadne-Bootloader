
ariadne_atmega2560_16mhz_blink_notshield.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  0003fed4  00000f68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ed4  0003f000  0003f000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800220  00800220  00000f88  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  00000f99  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bfe  00000000  00000000  00001109  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c2c  00000000  00000000  00002d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000016a3  00000000  00000000  00003933  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003fc  00000000  00000000  00004fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000630  00000000  00000000  000053d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001682  00000000  00000000  00005a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00007086  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0003f000 <__vectors>:
   3f000:	8e c0       	rjmp	.+284    	; 0x3f11e <__ctors_end>
   3f002:	00 00       	nop
   3f004:	0e c1       	rjmp	.+540    	; 0x3f222 <__bad_interrupt>
   3f006:	00 00       	nop
   3f008:	0c c1       	rjmp	.+536    	; 0x3f222 <__bad_interrupt>
   3f00a:	00 00       	nop
   3f00c:	0a c1       	rjmp	.+532    	; 0x3f222 <__bad_interrupt>
   3f00e:	00 00       	nop
   3f010:	08 c1       	rjmp	.+528    	; 0x3f222 <__bad_interrupt>
   3f012:	00 00       	nop
   3f014:	06 c1       	rjmp	.+524    	; 0x3f222 <__bad_interrupt>
   3f016:	00 00       	nop
   3f018:	04 c1       	rjmp	.+520    	; 0x3f222 <__bad_interrupt>
   3f01a:	00 00       	nop
   3f01c:	02 c1       	rjmp	.+516    	; 0x3f222 <__bad_interrupt>
   3f01e:	00 00       	nop
   3f020:	00 c1       	rjmp	.+512    	; 0x3f222 <__bad_interrupt>
   3f022:	00 00       	nop
   3f024:	fe c0       	rjmp	.+508    	; 0x3f222 <__bad_interrupt>
   3f026:	00 00       	nop
   3f028:	fc c0       	rjmp	.+504    	; 0x3f222 <__bad_interrupt>
   3f02a:	00 00       	nop
   3f02c:	fa c0       	rjmp	.+500    	; 0x3f222 <__bad_interrupt>
   3f02e:	00 00       	nop
   3f030:	f8 c0       	rjmp	.+496    	; 0x3f222 <__bad_interrupt>
   3f032:	00 00       	nop
   3f034:	f6 c0       	rjmp	.+492    	; 0x3f222 <__bad_interrupt>
   3f036:	00 00       	nop
   3f038:	f4 c0       	rjmp	.+488    	; 0x3f222 <__bad_interrupt>
   3f03a:	00 00       	nop
   3f03c:	f2 c0       	rjmp	.+484    	; 0x3f222 <__bad_interrupt>
   3f03e:	00 00       	nop
   3f040:	f0 c0       	rjmp	.+480    	; 0x3f222 <__bad_interrupt>
   3f042:	00 00       	nop
   3f044:	ee c0       	rjmp	.+476    	; 0x3f222 <__bad_interrupt>
   3f046:	00 00       	nop
   3f048:	ec c0       	rjmp	.+472    	; 0x3f222 <__bad_interrupt>
   3f04a:	00 00       	nop
   3f04c:	ea c0       	rjmp	.+468    	; 0x3f222 <__bad_interrupt>
   3f04e:	00 00       	nop
   3f050:	e8 c0       	rjmp	.+464    	; 0x3f222 <__bad_interrupt>
   3f052:	00 00       	nop
   3f054:	e6 c0       	rjmp	.+460    	; 0x3f222 <__bad_interrupt>
   3f056:	00 00       	nop
   3f058:	e4 c0       	rjmp	.+456    	; 0x3f222 <__bad_interrupt>
   3f05a:	00 00       	nop
   3f05c:	e2 c0       	rjmp	.+452    	; 0x3f222 <__bad_interrupt>
   3f05e:	00 00       	nop
   3f060:	e0 c0       	rjmp	.+448    	; 0x3f222 <__bad_interrupt>
   3f062:	00 00       	nop
   3f064:	de c0       	rjmp	.+444    	; 0x3f222 <__bad_interrupt>
   3f066:	00 00       	nop
   3f068:	dc c0       	rjmp	.+440    	; 0x3f222 <__bad_interrupt>
   3f06a:	00 00       	nop
   3f06c:	da c0       	rjmp	.+436    	; 0x3f222 <__bad_interrupt>
   3f06e:	00 00       	nop
   3f070:	d8 c0       	rjmp	.+432    	; 0x3f222 <__bad_interrupt>
   3f072:	00 00       	nop
   3f074:	d6 c0       	rjmp	.+428    	; 0x3f222 <__bad_interrupt>
   3f076:	00 00       	nop
   3f078:	d4 c0       	rjmp	.+424    	; 0x3f222 <__bad_interrupt>
   3f07a:	00 00       	nop
   3f07c:	d2 c0       	rjmp	.+420    	; 0x3f222 <__bad_interrupt>
   3f07e:	00 00       	nop
   3f080:	d0 c0       	rjmp	.+416    	; 0x3f222 <__bad_interrupt>
   3f082:	00 00       	nop
   3f084:	ce c0       	rjmp	.+412    	; 0x3f222 <__bad_interrupt>
   3f086:	00 00       	nop
   3f088:	cc c0       	rjmp	.+408    	; 0x3f222 <__bad_interrupt>
   3f08a:	00 00       	nop
   3f08c:	ca c0       	rjmp	.+404    	; 0x3f222 <__bad_interrupt>
   3f08e:	00 00       	nop
   3f090:	c8 c0       	rjmp	.+400    	; 0x3f222 <__bad_interrupt>
   3f092:	00 00       	nop
   3f094:	c6 c0       	rjmp	.+396    	; 0x3f222 <__bad_interrupt>
   3f096:	00 00       	nop
   3f098:	c4 c0       	rjmp	.+392    	; 0x3f222 <__bad_interrupt>
   3f09a:	00 00       	nop
   3f09c:	c2 c0       	rjmp	.+388    	; 0x3f222 <__bad_interrupt>
   3f09e:	00 00       	nop
   3f0a0:	c0 c0       	rjmp	.+384    	; 0x3f222 <__bad_interrupt>
   3f0a2:	00 00       	nop
   3f0a4:	be c0       	rjmp	.+380    	; 0x3f222 <__bad_interrupt>
   3f0a6:	00 00       	nop
   3f0a8:	bc c0       	rjmp	.+376    	; 0x3f222 <__bad_interrupt>
   3f0aa:	00 00       	nop
   3f0ac:	ba c0       	rjmp	.+372    	; 0x3f222 <__bad_interrupt>
   3f0ae:	00 00       	nop
   3f0b0:	b8 c0       	rjmp	.+368    	; 0x3f222 <__bad_interrupt>
   3f0b2:	00 00       	nop
   3f0b4:	b6 c0       	rjmp	.+364    	; 0x3f222 <__bad_interrupt>
   3f0b6:	00 00       	nop
   3f0b8:	b4 c0       	rjmp	.+360    	; 0x3f222 <__bad_interrupt>
   3f0ba:	00 00       	nop
   3f0bc:	b2 c0       	rjmp	.+356    	; 0x3f222 <__bad_interrupt>
   3f0be:	00 00       	nop
   3f0c0:	b0 c0       	rjmp	.+352    	; 0x3f222 <__bad_interrupt>
   3f0c2:	00 00       	nop
   3f0c4:	ae c0       	rjmp	.+348    	; 0x3f222 <__bad_interrupt>
   3f0c6:	00 00       	nop
   3f0c8:	ac c0       	rjmp	.+344    	; 0x3f222 <__bad_interrupt>
   3f0ca:	00 00       	nop
   3f0cc:	aa c0       	rjmp	.+340    	; 0x3f222 <__bad_interrupt>
   3f0ce:	00 00       	nop
   3f0d0:	a8 c0       	rjmp	.+336    	; 0x3f222 <__bad_interrupt>
   3f0d2:	00 00       	nop
   3f0d4:	a6 c0       	rjmp	.+332    	; 0x3f222 <__bad_interrupt>
   3f0d6:	00 00       	nop
   3f0d8:	a4 c0       	rjmp	.+328    	; 0x3f222 <__bad_interrupt>
   3f0da:	00 00       	nop
   3f0dc:	a2 c0       	rjmp	.+324    	; 0x3f222 <__bad_interrupt>
   3f0de:	00 00       	nop
   3f0e0:	a0 c0       	rjmp	.+320    	; 0x3f222 <__bad_interrupt>
	...

0003f0e4 <__trampolines_end>:
   3f0e4:	13 00       	.word	0x0013	; ????
   3f0e6:	05 00       	.word	0x0005	; ????
   3f0e8:	00 49       	sbci	r16, 0x90	; 144
   3f0ea:	6e 76       	andi	r22, 0x6E	; 110
   3f0ec:	61 6c       	ori	r22, 0xC1	; 193
   3f0ee:	69 64       	ori	r22, 0x49	; 73
   3f0f0:	20 69       	ori	r18, 0x90	; 144
   3f0f2:	6d 61       	ori	r22, 0x1D	; 29
   3f0f4:	67 65       	ori	r22, 0x57	; 87
   3f0f6:	20 66       	ori	r18, 0x60	; 96
   3f0f8:	69 6c       	ori	r22, 0xC9	; 201
   3f0fa:	65 00       	.word	0x0065	; ????

0003f0fc <tftp_unknown_error_packet>:
   3f0fc:	08 00 05 00 00 45 72 72 6f 72 00                    .....Error.

0003f107 <tftp_full_error_packet>:
   3f107:	09 00 05 00 03 46 75 6c 6c 00                       .....Full.

0003f111 <tftp_opcode_error_packet>:
   3f111:	0a 00 05 00 00 4f 70 63 6f 64 65 3f 00              .....Opcode?.

0003f11e <__ctors_end>:
   3f11e:	11 24       	eor	r1, r1
   3f120:	1f be       	out	0x3f, r1	; 63
   3f122:	cf ef       	ldi	r28, 0xFF	; 255
   3f124:	d1 e2       	ldi	r29, 0x21	; 33
   3f126:	de bf       	out	0x3e, r29	; 62
   3f128:	cd bf       	out	0x3d, r28	; 61
   3f12a:	01 e0       	ldi	r16, 0x01	; 1
   3f12c:	0c bf       	out	0x3c, r16	; 60

0003f12e <__do_copy_data>:
   3f12e:	12 e0       	ldi	r17, 0x02	; 2
   3f130:	a0 e0       	ldi	r26, 0x00	; 0
   3f132:	b2 e0       	ldi	r27, 0x02	; 2
   3f134:	e4 ed       	ldi	r30, 0xD4	; 212
   3f136:	fe ef       	ldi	r31, 0xFE	; 254
   3f138:	03 e0       	ldi	r16, 0x03	; 3
   3f13a:	0b bf       	out	0x3b, r16	; 59
   3f13c:	02 c0       	rjmp	.+4      	; 0x3f142 <__do_copy_data+0x14>
   3f13e:	07 90       	elpm	r0, Z+
   3f140:	0d 92       	st	X+, r0
   3f142:	a0 32       	cpi	r26, 0x20	; 32
   3f144:	b1 07       	cpc	r27, r17
   3f146:	d9 f7       	brne	.-10     	; 0x3f13e <__do_copy_data+0x10>

0003f148 <__do_clear_bss>:
   3f148:	22 e0       	ldi	r18, 0x02	; 2
   3f14a:	a0 e2       	ldi	r26, 0x20	; 32
   3f14c:	b2 e0       	ldi	r27, 0x02	; 2
   3f14e:	01 c0       	rjmp	.+2      	; 0x3f152 <.do_clear_bss_start>

0003f150 <.do_clear_bss_loop>:
   3f150:	1d 92       	st	X+, r1

0003f152 <.do_clear_bss_start>:
   3f152:	ac 32       	cpi	r26, 0x2C	; 44
   3f154:	b2 07       	cpc	r27, r18
   3f156:	e1 f7       	brne	.-8      	; 0x3f150 <.do_clear_bss_loop>
   3f158:	01 d0       	rcall	.+2      	; 0x3f15c <main>
   3f15a:	ba c6       	rjmp	.+3444   	; 0x3fed0 <_exit>

0003f15c <main>:

int main(void)
{
	/* Disable the watchdog timer to prevent
	 * eternal reset loop of doom and despair */
	MCUSR = 0;
   3f15c:	14 be       	out	0x34, r1	; 52
	wdt_disable();
   3f15e:	88 e1       	ldi	r24, 0x18	; 24
   3f160:	0f b6       	in	r0, 0x3f	; 63
   3f162:	f8 94       	cli
   3f164:	80 93 60 00 	sts	0x0060, r24
   3f168:	10 92 60 00 	sts	0x0060, r1
   3f16c:	0f be       	out	0x3f, r0	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   3f16e:	2f ef       	ldi	r18, 0xFF	; 255
   3f170:	83 ec       	ldi	r24, 0xC3	; 195
   3f172:	99 e0       	ldi	r25, 0x09	; 9
   3f174:	21 50       	subi	r18, 0x01	; 1
   3f176:	80 40       	sbci	r24, 0x00	; 0
   3f178:	90 40       	sbci	r25, 0x00	; 0
   3f17a:	e1 f7       	brne	.-8      	; 0x3f174 <main+0x18>
   3f17c:	00 c0       	rjmp	.+0      	; 0x3f17e <main+0x22>
   3f17e:	00 00       	nop
	/* This code makes the following assumptions:
	 * No interrupts will execute
	 * SP points to RAMEND
	 * r1 contains zero */
	//cli();
	asm volatile("clr __zero_reg__");
   3f180:	11 24       	eor	r1, r1
	// 0x02 -> ClkIO/8 -> 500ns period, 32ms max
	// 0X03 -> ClkIO/64 -> 4us period, 256ms max
	// 0x04 -> ClkIO/256 -> 16us period, 1024ms max
	// 0x05 -> ClkIO/1024 -> 64us period, 4096ms max
	// Set up Timer 1 as timekeeper for LED flashing
	TCCR1B = _BV(CS12) | _BV(CS10); // Same thing as TCCR1B = 0x05;
   3f182:	85 e0       	ldi	r24, 0x05	; 5
   3f184:	80 93 81 00 	sts	0x0081, r24

	/* Write version information in the EEPROM */
	if(eeprom_read_byte(EEPROM_MAJVER) != ARIADNE_MAJVER)
   3f188:	80 e0       	ldi	r24, 0x00	; 0
   3f18a:	90 e0       	ldi	r25, 0x00	; 0
   3f18c:	8b d6       	rcall	.+3350   	; 0x3fea4 <__eerd_byte_m2560>
   3f18e:	88 23       	and	r24, r24
   3f190:	21 f0       	breq	.+8      	; 0x3f19a <main+0x3e>
		eeprom_write_byte(EEPROM_MAJVER, ARIADNE_MAJVER);
   3f192:	60 e0       	ldi	r22, 0x00	; 0
   3f194:	80 e0       	ldi	r24, 0x00	; 0
   3f196:	90 e0       	ldi	r25, 0x00	; 0
   3f198:	8d d6       	rcall	.+3354   	; 0x3feb4 <__eewr_byte_m2560>
	if(eeprom_read_byte(EEPROM_MINVER) != ARIADNE_MINVER)
   3f19a:	81 e0       	ldi	r24, 0x01	; 1
   3f19c:	90 e0       	ldi	r25, 0x00	; 0
   3f19e:	82 d6       	rcall	.+3332   	; 0x3fea4 <__eerd_byte_m2560>
   3f1a0:	84 30       	cpi	r24, 0x04	; 4
   3f1a2:	21 f0       	breq	.+8      	; 0x3f1ac <main+0x50>
		eeprom_write_byte(EEPROM_MINVER, ARIADNE_MINVER);
   3f1a4:	64 e0       	ldi	r22, 0x04	; 4
   3f1a6:	81 e0       	ldi	r24, 0x01	; 1
   3f1a8:	90 e0       	ldi	r25, 0x00	; 0
   3f1aa:	84 d6       	rcall	.+3336   	; 0x3feb4 <__eewr_byte_m2560>

	/* Initialize UART communication */
	serialInit();
   3f1ac:	62 d3       	rcall	.+1732   	; 0x3f872 <serialInit>
		buttonInit();
	)

	/* Initalize SPI communication */
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_SPI);)
	spiInit();
   3f1ae:	92 d0       	rcall	.+292    	; 0x3f2d4 <spiInit>
	/* Initialize networking */
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_NET);)
	netInit();
   3f1b0:	9c d0       	rcall	.+312    	; 0x3f2ea <netInit>

	/* Initialize the UDP socket for tftp */
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_TFTP);)
	tftpInit();
   3f1b2:	67 d2       	rcall	.+1230   	; 0x3f682 <tftpInit>
#if defined(ANNOUNCE)
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_ANN);)
	announceInit();
#endif

	serialFlashing = FALSE;
   3f1b4:	10 92 2a 02 	sts	0x022A, r1
	tftpFlashing = FALSE;
   3f1b8:	10 92 2b 02 	sts	0x022B, r1
			if(eeprom_read_byte(EEPROM_IMG_STAT) == EEPROM_IMG_OK_VALUE) break;

			//TODO: determine the conditions for reseting server OR reseting socket
			if(tftpFlashing == TRUE) {
				// Delete first page of flash memory
				boot_page_erase(0);
   3f1bc:	c3 e0       	ldi	r28, 0x03	; 3
   3f1be:	c1 2c       	mov	r12, r1
   3f1c0:	d1 2c       	mov	r13, r1
   3f1c2:	76 01       	movw	r14, r12
	serialFlashing = FALSE;
	tftpFlashing = FALSE;

	for(;;) {
		// If there is no serial flashing under way, poll tftp
		if(!serialFlashing)
   3f1c4:	80 91 2a 02 	lds	r24, 0x022A
   3f1c8:	88 23       	and	r24, r24
   3f1ca:	29 f0       	breq	.+10     	; 0x3f1d6 <main+0x7a>
			// If tftp recieved a FINAL_ACK, break
			if(tftpPoll() == 0)
				break;

		// If there is no tftp flashing, poll serial
		if(!tftpFlashing)
   3f1cc:	80 91 2b 02 	lds	r24, 0x022B
   3f1d0:	88 23       	and	r24, r24
   3f1d2:	49 f0       	breq	.+18     	; 0x3f1e6 <main+0x8a>
   3f1d4:	04 c0       	rjmp	.+8      	; 0x3f1de <main+0x82>

	for(;;) {
		// If there is no serial flashing under way, poll tftp
		if(!serialFlashing)
			// If tftp recieved a FINAL_ACK, break
			if(tftpPoll() == 0)
   3f1d6:	78 d2       	rcall	.+1264   	; 0x3f6c8 <tftpPoll>
   3f1d8:	81 11       	cpse	r24, r1
   3f1da:	f8 cf       	rjmp	.-16     	; 0x3f1cc <main+0x70>
   3f1dc:	1d c0       	rjmp	.+58     	; 0x3f218 <main+0xbc>
		/* As explained above this goes out */
#if defined(ANNOUNCE)
		announcePoll();
#endif

		if(timedOut()) {
   3f1de:	a4 d3       	rcall	.+1864   	; 0x3f928 <timedOut>
   3f1e0:	81 11       	cpse	r24, r1
   3f1e2:	05 c0       	rjmp	.+10     	; 0x3f1ee <main+0x92>
   3f1e4:	17 c0       	rjmp	.+46     	; 0x3f214 <main+0xb8>
				break;

		// If there is no tftp flashing, poll serial
		if(!tftpFlashing)
			// If flashing is done exit
			if(serialPoll() == 0)
   3f1e6:	6b d3       	rcall	.+1750   	; 0x3f8be <serialPoll>
   3f1e8:	81 11       	cpse	r24, r1
   3f1ea:	f9 cf       	rjmp	.-14     	; 0x3f1de <main+0x82>
   3f1ec:	15 c0       	rjmp	.+42     	; 0x3f218 <main+0xbc>
#if defined(ANNOUNCE)
		announcePoll();
#endif

		if(timedOut()) {
			if(eeprom_read_byte(EEPROM_IMG_STAT) == EEPROM_IMG_OK_VALUE) break;
   3f1ee:	82 e0       	ldi	r24, 0x02	; 2
   3f1f0:	90 e0       	ldi	r25, 0x00	; 0
   3f1f2:	58 d6       	rcall	.+3248   	; 0x3fea4 <__eerd_byte_m2560>
   3f1f4:	8e 3e       	cpi	r24, 0xEE	; 238
   3f1f6:	81 f0       	breq	.+32     	; 0x3f218 <main+0xbc>

			//TODO: determine the conditions for reseting server OR reseting socket
			if(tftpFlashing == TRUE) {
   3f1f8:	80 91 2b 02 	lds	r24, 0x022B
   3f1fc:	81 30       	cpi	r24, 0x01	; 1
   3f1fe:	51 f4       	brne	.+20     	; 0x3f214 <main+0xb8>
				// Delete first page of flash memory
				boot_page_erase(0);
   3f200:	f6 01       	movw	r30, r12
   3f202:	e0 92 5b 00 	sts	0x005B, r14
   3f206:	c0 93 57 00 	sts	0x0057, r28
   3f20a:	e8 95       	spm
				// Reinitialize TFTP
				tftpInit();
   3f20c:	3a d2       	rcall	.+1140   	; 0x3f682 <tftpInit>
				// Reset the timeout counter
				resetTick();
   3f20e:	83 d3       	rcall	.+1798   	; 0x3f916 <resetTick>
				// Unset tftp flag
				tftpFlashing = FALSE;
   3f210:	10 92 2b 02 	sts	0x022B, r1
			}
		}
		/* Blink the notification led */
#ifndef DISABLE_BLINK
		updateLed();
   3f214:	5f d3       	rcall	.+1726   	; 0x3f8d4 <updateLed>
#endif  //DISABLE_BLINK
	}
   3f216:	d6 cf       	rjmp	.-84     	; 0x3f1c4 <main+0x68>

	/* Exit to user application */
	DBG_MAIN(tracePGMlnMain(mDebugMain_EXIT);)
	asm volatile(
   3f218:	ee 27       	eor	r30, r30
   3f21a:	ff 27       	eor	r31, r31
   3f21c:	09 94       	ijmp
		"clr	r31		\n\t"
		"ijmp	\n\t"
	);
	//appStart();
	//return(0); /* never reached */
}
   3f21e:	80 e0       	ldi	r24, 0x00	; 0
   3f220:	90 e0       	ldi	r25, 0x00	; 0

0003f222 <__bad_interrupt>:
   3f222:	ee ce       	rjmp	.-548    	; 0x3f000 <__vectors>

0003f224 <spiWriteReg>:
		tracenum(address);
		tracePGM(mDebugSpi_COMMA);
		tracenum(value);
	)

	SPCR = _BV(SPE) | _BV(MSTR); // Set SPI as master
   3f224:	20 e5       	ldi	r18, 0x50	; 80
   3f226:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
   3f228:	2c 98       	cbi	0x05, 4	; 5

	SPDR = SPI_WRITE;
   3f22a:	20 ef       	ldi	r18, 0xF0	; 240
   3f22c:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   3f22e:	0d b4       	in	r0, 0x2d	; 45
   3f230:	07 fe       	sbrs	r0, 7
   3f232:	fd cf       	rjmp	.-6      	; 0x3f22e <spiWriteReg+0xa>

	SPDR = address >> 8;
   3f234:	29 2f       	mov	r18, r25
   3f236:	33 27       	eor	r19, r19
   3f238:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   3f23a:	0d b4       	in	r0, 0x2d	; 45
   3f23c:	07 fe       	sbrs	r0, 7
   3f23e:	fd cf       	rjmp	.-6      	; 0x3f23a <spiWriteReg+0x16>

	SPDR = address & 0xff;
   3f240:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
   3f242:	0d b4       	in	r0, 0x2d	; 45
   3f244:	07 fe       	sbrs	r0, 7
   3f246:	fd cf       	rjmp	.-6      	; 0x3f242 <spiWriteReg+0x1e>

	SPDR = value;
   3f248:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & _BV(SPIF)));
   3f24a:	0d b4       	in	r0, 0x2d	; 45
   3f24c:	07 fe       	sbrs	r0, 7
   3f24e:	fd cf       	rjmp	.-6      	; 0x3f24a <spiWriteReg+0x26>

	SS_HIGH();
   3f250:	2c 9a       	sbi	0x05, 4	; 5
	SPCR = 0; // Turn off SPI
   3f252:	1c bc       	out	0x2c, r1	; 44
   3f254:	08 95       	ret

0003f256 <spiWriteWord>:
}

void spiWriteWord(uint16_t address, uint16_t value)
{
   3f256:	0f 93       	push	r16
   3f258:	1f 93       	push	r17
   3f25a:	cf 93       	push	r28
   3f25c:	df 93       	push	r29
   3f25e:	8c 01       	movw	r16, r24
   3f260:	eb 01       	movw	r28, r22
	// Write uint16_t to Ethernet controller
	spiWriteReg(address++, value >> 8);
   3f262:	67 2f       	mov	r22, r23
   3f264:	77 27       	eor	r23, r23
   3f266:	de df       	rcall	.-68     	; 0x3f224 <spiWriteReg>
	spiWriteReg(address, value & 0xff);
   3f268:	6c 2f       	mov	r22, r28
   3f26a:	c8 01       	movw	r24, r16
   3f26c:	01 96       	adiw	r24, 0x01	; 1
}
   3f26e:	df 91       	pop	r29
   3f270:	cf 91       	pop	r28
   3f272:	1f 91       	pop	r17
   3f274:	0f 91       	pop	r16

void spiWriteWord(uint16_t address, uint16_t value)
{
	// Write uint16_t to Ethernet controller
	spiWriteReg(address++, value >> 8);
	spiWriteReg(address, value & 0xff);
   3f276:	d6 cf       	rjmp	.-84     	; 0x3f224 <spiWriteReg>

0003f278 <spiReadReg>:
	)
	#endif

	uint8_t returnValue;

	SPCR = _BV(SPE) | _BV(MSTR);
   3f278:	20 e5       	ldi	r18, 0x50	; 80
   3f27a:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
   3f27c:	2c 98       	cbi	0x05, 4	; 5

	SPDR = SPI_READ;
   3f27e:	2f e0       	ldi	r18, 0x0F	; 15
   3f280:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   3f282:	0d b4       	in	r0, 0x2d	; 45
   3f284:	07 fe       	sbrs	r0, 7
   3f286:	fd cf       	rjmp	.-6      	; 0x3f282 <spiReadReg+0xa>

	SPDR = address >> 8;
   3f288:	29 2f       	mov	r18, r25
   3f28a:	33 27       	eor	r19, r19
   3f28c:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   3f28e:	0d b4       	in	r0, 0x2d	; 45
   3f290:	07 fe       	sbrs	r0, 7
   3f292:	fd cf       	rjmp	.-6      	; 0x3f28e <spiReadReg+0x16>

	SPDR = address & 0xff;
   3f294:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
   3f296:	0d b4       	in	r0, 0x2d	; 45
   3f298:	07 fe       	sbrs	r0, 7
   3f29a:	fd cf       	rjmp	.-6      	; 0x3f296 <spiReadReg+0x1e>

	SPDR = 0;
   3f29c:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
   3f29e:	0d b4       	in	r0, 0x2d	; 45
   3f2a0:	07 fe       	sbrs	r0, 7
   3f2a2:	fd cf       	rjmp	.-6      	; 0x3f29e <spiReadReg+0x26>

	SS_HIGH();
   3f2a4:	2c 9a       	sbi	0x05, 4	; 5
	returnValue = SPDR;
   3f2a6:	8e b5       	in	r24, 0x2e	; 46
	SPCR = 0;
   3f2a8:	1c bc       	out	0x2c, r1	; 44

	return(returnValue);
}
   3f2aa:	08 95       	ret

0003f2ac <spiReadWord>:

uint16_t spiReadWord(uint16_t address)
{
   3f2ac:	1f 93       	push	r17
   3f2ae:	cf 93       	push	r28
   3f2b0:	df 93       	push	r29
   3f2b2:	ec 01       	movw	r28, r24
	// Read uint16_t from Ethernet controller
	return((spiReadReg(address) << 8) | spiReadReg(address + 1));
   3f2b4:	e1 df       	rcall	.-62     	; 0x3f278 <spiReadReg>
   3f2b6:	18 2f       	mov	r17, r24
   3f2b8:	ce 01       	movw	r24, r28
   3f2ba:	01 96       	adiw	r24, 0x01	; 1
   3f2bc:	dd df       	rcall	.-70     	; 0x3f278 <spiReadReg>
   3f2be:	21 2f       	mov	r18, r17
   3f2c0:	30 e0       	ldi	r19, 0x00	; 0
   3f2c2:	32 2f       	mov	r19, r18
   3f2c4:	22 27       	eor	r18, r18
}
   3f2c6:	a9 01       	movw	r20, r18
   3f2c8:	48 2b       	or	r20, r24
   3f2ca:	ca 01       	movw	r24, r20
   3f2cc:	df 91       	pop	r29
   3f2ce:	cf 91       	pop	r28
   3f2d0:	1f 91       	pop	r17
   3f2d2:	08 95       	ret

0003f2d4 <spiInit>:
	 * At this stage all pins are set to HIGH. This in fact DISABLES SPI for both Ethernet and SD.
	 * SS pin for ethernet is pulled low just in time for reading or writing data inside those
	 * functions. */

	/** Set SPI pins high */
	SPI_PORT = _BV(SCK) | _BV(MISO) | _BV(MOSI) | _BV(SS);
   3f2d4:	8f e0       	ldi	r24, 0x0F	; 15
   3f2d6:	85 b9       	out	0x05, r24	; 5
	/** Set SPI pins as output */
	SPI_DDR = _BV(SCK) | _BV(MOSI) | _BV(SS);
   3f2d8:	87 e0       	ldi	r24, 0x07	; 7
   3f2da:	84 b9       	out	0x04, r24	; 4

	#if (ETH_SS != SS)
	/** Initialize extra SS pin used in some boards (mega) */
	/** Set ethernet SS high */
	ETH_PORT |= _BV(ETH_SS);
   3f2dc:	2c 9a       	sbi	0x05, 4	; 5
	/** Set ethernet SS as output */
	ETH_DDR |= _BV(ETH_SS);
   3f2de:	24 9a       	sbi	0x04, 4	; 4

	#ifndef DISABLE_BLINK
	#if (LED != SCK)
	/** Set up pins to flash the onboard led */
	/** Set led pin to high */
	LED_PORT |= _BV(LED);
   3f2e0:	2f 9a       	sbi	0x05, 7	; 5
	/** Set led pin as output */
	LED_DDR |= _BV(LED);
   3f2e2:	27 9a       	sbi	0x04, 7	; 4
	#endif  //LED != SCK
	#endif  //DISABLE_BLINK

	/** Set up SPI
	 ** Set the Double SPI Speed Bit */
	SPSR = (1 << SPI2X);
   3f2e4:	81 e0       	ldi	r24, 0x01	; 1
   3f2e6:	8d bd       	out	0x2d, r24	; 45
   3f2e8:	08 95       	ret

0003f2ea <netInit>:
	0x55          // TMSR Tx Memory Size Register, 2K per socket
};


void netInit(void)
{
   3f2ea:	0f 93       	push	r16
   3f2ec:	1f 93       	push	r17
   3f2ee:	cf 93       	push	r28
   3f2f0:	df 93       	push	r29
	uint8_t i;

	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
   3f2f2:	83 e0       	ldi	r24, 0x03	; 3
   3f2f4:	90 e0       	ldi	r25, 0x00	; 0
   3f2f6:	d6 d5       	rcall	.+2988   	; 0x3fea4 <__eerd_byte_m2560>
   3f2f8:	85 35       	cpi	r24, 0x55	; 85
   3f2fa:	29 f0       	breq	.+10     	; 0x3f306 <netInit+0x1c>
   3f2fc:	00 e0       	ldi	r16, 0x00	; 0
   3f2fe:	12 e0       	ldi	r17, 0x02	; 2
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {
   3f300:	c0 e0       	ldi	r28, 0x00	; 0
   3f302:	d0 e0       	ldi	r29, 0x00	; 0
   3f304:	13 c0       	rjmp	.+38     	; 0x3f32c <netInit+0x42>
   3f306:	84 e0       	ldi	r24, 0x04	; 4
   3f308:	90 e0       	ldi	r25, 0x00	; 0
   3f30a:	cc d5       	rcall	.+2968   	; 0x3fea4 <__eerd_byte_m2560>
   3f30c:	8a 3a       	cpi	r24, 0xAA	; 170
   3f30e:	b1 f7       	brne	.-20     	; 0x3f2fc <netInit+0x12>
   3f310:	01 e0       	ldi	r16, 0x01	; 1
   3f312:	12 e0       	ldi	r17, 0x02	; 2
   3f314:	c5 e0       	ldi	r28, 0x05	; 5
   3f316:	d0 e0       	ldi	r29, 0x00	; 0

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
			registerBuffer[i + 1] = eeprom_read_byte(EEPROM_DATA + i);
   3f318:	ce 01       	movw	r24, r28
   3f31a:	c4 d5       	rcall	.+2952   	; 0x3fea4 <__eerd_byte_m2560>
   3f31c:	f8 01       	movw	r30, r16
   3f31e:	81 93       	st	Z+, r24
   3f320:	8f 01       	movw	r16, r30
   3f322:	21 96       	adiw	r28, 0x01	; 1
	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
   3f324:	c7 31       	cpi	r28, 0x17	; 23
   3f326:	d1 05       	cpc	r29, r1
   3f328:	b9 f7       	brne	.-18     	; 0x3f318 <netInit+0x2e>
   3f32a:	e8 cf       	rjmp	.-48     	; 0x3f2fc <netInit+0x12>
		}
	)

	/** Configure Wiznet chip. Network settings */
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
		spiWriteReg(i, registerBuffer[i]);
   3f32c:	f8 01       	movw	r30, r16
   3f32e:	61 91       	ld	r22, Z+
   3f330:	8f 01       	movw	r16, r30
   3f332:	ce 01       	movw	r24, r28
   3f334:	77 df       	rcall	.-274    	; 0x3f224 <spiWriteReg>
   3f336:	21 96       	adiw	r28, 0x01	; 1
			if(i != 14) putch(0x2E);
		}
	)

	/** Configure Wiznet chip. Network settings */
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
   3f338:	cc 31       	cpi	r28, 0x1C	; 28
   3f33a:	d1 05       	cpc	r29, r1
   3f33c:	b9 f7       	brne	.-18     	; 0x3f32c <netInit+0x42>
		spiWriteReg(i, registerBuffer[i]);

	DBG_NET(tracePGMlnNet(mDebugNet_DONE);)
}
   3f33e:	df 91       	pop	r29
   3f340:	cf 91       	pop	r28
   3f342:	1f 91       	pop	r17
   3f344:	0f 91       	pop	r16
   3f346:	08 95       	ret

0003f348 <sockInit>:

uint16_t lastPacket = 0, highPacket = 0;


static void sockInit(uint16_t port)
{
   3f348:	cf 93       	push	r28
   3f34a:	df 93       	push	r29
   3f34c:	ec 01       	movw	r28, r24
	DBG_TFTP(
		tracePGMlnTftp(mDebugTftp_SOCK);
		tracenum(port);
	)

	spiWriteReg(REG_S3_CR, CR_CLOSE);
   3f34e:	60 e1       	ldi	r22, 0x10	; 16
   3f350:	81 e0       	ldi	r24, 0x01	; 1
   3f352:	97 e0       	ldi	r25, 0x07	; 7
   3f354:	67 df       	rcall	.-306    	; 0x3f224 <spiWriteReg>

	do {
		// Write TFTP Port
		spiWriteWord(REG_S3_PORT0, port);
   3f356:	be 01       	movw	r22, r28
   3f358:	84 e0       	ldi	r24, 0x04	; 4
   3f35a:	97 e0       	ldi	r25, 0x07	; 7
   3f35c:	7c df       	rcall	.-264    	; 0x3f256 <spiWriteWord>
		// Write mode
		spiWriteReg(REG_S3_MR, MR_UDP);
   3f35e:	62 e0       	ldi	r22, 0x02	; 2
   3f360:	80 e0       	ldi	r24, 0x00	; 0
   3f362:	97 e0       	ldi	r25, 0x07	; 7
   3f364:	5f df       	rcall	.-322    	; 0x3f224 <spiWriteReg>
		// Open Socket
		spiWriteReg(REG_S3_CR, CR_OPEN);
   3f366:	61 e0       	ldi	r22, 0x01	; 1
   3f368:	81 e0       	ldi	r24, 0x01	; 1
   3f36a:	97 e0       	ldi	r25, 0x07	; 7
   3f36c:	5b df       	rcall	.-330    	; 0x3f224 <spiWriteReg>

		// Read Status
		if(spiReadReg(REG_S3_SR) != SOCK_UDP)
   3f36e:	83 e0       	ldi	r24, 0x03	; 3
   3f370:	97 e0       	ldi	r25, 0x07	; 7
   3f372:	82 df       	rcall	.-252    	; 0x3f278 <spiReadReg>
   3f374:	82 32       	cpi	r24, 0x22	; 34
   3f376:	21 f0       	breq	.+8      	; 0x3f380 <sockInit+0x38>
			// Close Socket if it wasn't initialized correctly
			spiWriteReg(REG_S3_CR, CR_CLOSE);
   3f378:	60 e1       	ldi	r22, 0x10	; 16
   3f37a:	81 e0       	ldi	r24, 0x01	; 1
   3f37c:	97 e0       	ldi	r25, 0x07	; 7
   3f37e:	52 df       	rcall	.-348    	; 0x3f224 <spiWriteReg>

		// If socket correctly opened continue
	} while(spiReadReg(REG_S3_SR) != SOCK_UDP);
   3f380:	83 e0       	ldi	r24, 0x03	; 3
   3f382:	97 e0       	ldi	r25, 0x07	; 7
   3f384:	79 df       	rcall	.-270    	; 0x3f278 <spiReadReg>
   3f386:	82 32       	cpi	r24, 0x22	; 34
   3f388:	31 f7       	brne	.-52     	; 0x3f356 <sockInit+0xe>
}
   3f38a:	df 91       	pop	r29
   3f38c:	cf 91       	pop	r28
   3f38e:	08 95       	ret

0003f390 <processPacket>:
#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
#else
static uint8_t processPacket(void)
#endif
{
   3f390:	2f 92       	push	r2
   3f392:	3f 92       	push	r3
   3f394:	4f 92       	push	r4
   3f396:	5f 92       	push	r5
   3f398:	6f 92       	push	r6
   3f39a:	7f 92       	push	r7
   3f39c:	8f 92       	push	r8
   3f39e:	9f 92       	push	r9
   3f3a0:	af 92       	push	r10
   3f3a2:	bf 92       	push	r11
   3f3a4:	cf 92       	push	r12
   3f3a6:	df 92       	push	r13
   3f3a8:	ef 92       	push	r14
   3f3aa:	ff 92       	push	r15
   3f3ac:	0f 93       	push	r16
   3f3ae:	1f 93       	push	r17
   3f3b0:	cf 93       	push	r28
   3f3b2:	df 93       	push	r29
   3f3b4:	cd b7       	in	r28, 0x3d	; 61
   3f3b6:	de b7       	in	r29, 0x3e	; 62
   3f3b8:	cd 50       	subi	r28, 0x0D	; 13
   3f3ba:	d2 40       	sbci	r29, 0x02	; 2
   3f3bc:	de bf       	out	0x3e, r29	; 62
   3f3be:	cd bf       	out	0x3d, r28	; 61

		DBG_BTN(button();)
	)

	// Read data from chip to buffer
	readPointer = spiReadWord(REG_S3_RX_RD0);
   3f3c0:	88 e2       	ldi	r24, 0x28	; 40
   3f3c2:	97 e0       	ldi	r25, 0x07	; 7
   3f3c4:	73 df       	rcall	.-282    	; 0x3f2ac <spiReadWord>
	DBG_TFTP_EX(
		tracePGMlnTftp(mDebugTftp_RPTR);
		tracenum(readPointer);
	)

	if(readPointer == 0) readPointer += S3_RX_START;
   3f3c6:	00 97       	sbiw	r24, 0x00	; 0
   3f3c8:	11 f4       	brne	.+4      	; 0x3f3ce <processPacket+0x3e>
   3f3ca:	80 e0       	ldi	r24, 0x00	; 0
   3f3cc:	98 e7       	ldi	r25, 0x78	; 120
   3f3ce:	8e 01       	movw	r16, r28
   3f3d0:	0f 5f       	subi	r16, 0xFF	; 255
   3f3d2:	1f 4f       	sbci	r17, 0xFF	; 255
   3f3d4:	6e 01       	movw	r12, r28
   3f3d6:	23 ef       	ldi	r18, 0xF3	; 243
   3f3d8:	c2 1a       	sub	r12, r18
   3f3da:	2d ef       	ldi	r18, 0xFD	; 253
   3f3dc:	d2 0a       	sbc	r13, r18
   3f3de:	58 01       	movw	r10, r16

	for(count = TFTP_PACKET_MAX_SIZE; count--;) {
   3f3e0:	0c 15       	cp	r16, r12
   3f3e2:	1d 05       	cpc	r17, r13
   3f3e4:	89 f0       	breq	.+34     	; 0x3f408 <processPacket+0x78>
				tracePGMlnTftp(mDebugTftp_RPOS);
				tracenum(readPointer);
			}
		)

		*bufPtr++ = spiReadReg(readPointer++);
   3f3e6:	7c 01       	movw	r14, r24
   3f3e8:	ef ef       	ldi	r30, 0xFF	; 255
   3f3ea:	ee 1a       	sub	r14, r30
   3f3ec:	fe 0a       	sbc	r15, r30
   3f3ee:	44 df       	rcall	.-376    	; 0x3f278 <spiReadReg>
   3f3f0:	f8 01       	movw	r30, r16
   3f3f2:	81 93       	st	Z+, r24
   3f3f4:	8f 01       	movw	r16, r30

		if(readPointer == S3_RX_END) readPointer = S3_RX_START;
   3f3f6:	e1 14       	cp	r14, r1
   3f3f8:	f0 e8       	ldi	r31, 0x80	; 128
   3f3fa:	ff 06       	cpc	r15, r31
   3f3fc:	19 f4       	brne	.+6      	; 0x3f404 <processPacket+0x74>
   3f3fe:	e1 2c       	mov	r14, r1
   3f400:	e8 e7       	ldi	r30, 0x78	; 120
   3f402:	fe 2e       	mov	r15, r30
   3f404:	c7 01       	movw	r24, r14
   3f406:	ec cf       	rjmp	.-40     	; 0x3f3e0 <processPacket+0x50>
	}

	spiWriteWord(REG_S3_RX_RD0, readPointer);     // Write back new pointer
   3f408:	bc 01       	movw	r22, r24
   3f40a:	88 e2       	ldi	r24, 0x28	; 40
   3f40c:	97 e0       	ldi	r25, 0x07	; 7
   3f40e:	23 df       	rcall	.-442    	; 0x3f256 <spiWriteWord>
	spiWriteReg(REG_S3_CR, CR_RECV);
   3f410:	60 e4       	ldi	r22, 0x40	; 64
   3f412:	81 e0       	ldi	r24, 0x01	; 1
   3f414:	97 e0       	ldi	r25, 0x07	; 7
   3f416:	06 df       	rcall	.-500    	; 0x3f224 <spiWriteReg>

	while(spiReadReg(REG_S3_CR));
   3f418:	81 e0       	ldi	r24, 0x01	; 1
   3f41a:	97 e0       	ldi	r25, 0x07	; 7
   3f41c:	2d df       	rcall	.-422    	; 0x3f278 <spiReadReg>
   3f41e:	81 11       	cpse	r24, r1
   3f420:	fb cf       	rjmp	.-10     	; 0x3f418 <processPacket+0x88>
   3f422:	75 01       	movw	r14, r10
   3f424:	0c e0       	ldi	r16, 0x0C	; 12
   3f426:	17 e0       	ldi	r17, 0x07	; 7
	)

	// Set up return IP address and port
	uint8_t i;

	for(i = 0; i < 6; i++) spiWriteReg(REG_S3_DIPR0 + i, buffer[i]);
   3f428:	f7 01       	movw	r30, r14
   3f42a:	61 91       	ld	r22, Z+
   3f42c:	7f 01       	movw	r14, r30
   3f42e:	c8 01       	movw	r24, r16
   3f430:	f9 de       	rcall	.-526    	; 0x3f224 <spiWriteReg>
   3f432:	0f 5f       	subi	r16, 0xFF	; 255
   3f434:	1f 4f       	sbci	r17, 0xFF	; 255
   3f436:	02 31       	cpi	r16, 0x12	; 18
   3f438:	f7 e0       	ldi	r31, 0x07	; 7
   3f43a:	1f 07       	cpc	r17, r31
   3f43c:	a9 f7       	brne	.-22     	; 0x3f428 <processPacket+0x98>

	DBG_TFTP(tracePGMlnTftp(mDebugTftp_RADDR);)

	// Parse packet
	uint16_t tftpDataLen = (buffer[6] << 8) + buffer[7];
   3f43e:	0f 81       	ldd	r16, Y+7	; 0x07
   3f440:	10 e0       	ldi	r17, 0x00	; 0
   3f442:	10 2f       	mov	r17, r16
   3f444:	00 27       	eor	r16, r16
   3f446:	88 85       	ldd	r24, Y+8	; 0x08
   3f448:	08 0f       	add	r16, r24
   3f44a:	11 1d       	adc	r17, r1
	uint16_t tftpOpcode  = (buffer[8] << 8) + buffer[9];
   3f44c:	29 85       	ldd	r18, Y+9	; 0x09
   3f44e:	30 e0       	ldi	r19, 0x00	; 0
   3f450:	32 2f       	mov	r19, r18
   3f452:	22 27       	eor	r18, r18
   3f454:	8a 85       	ldd	r24, Y+10	; 0x0a
   3f456:	28 0f       	add	r18, r24
   3f458:	31 1d       	adc	r19, r1
	uint16_t tftpBlock   = (buffer[10] << 8) + buffer[11];
   3f45a:	8b 85       	ldd	r24, Y+11	; 0x0b
   3f45c:	90 e0       	ldi	r25, 0x00	; 0
   3f45e:	f8 2e       	mov	r15, r24
   3f460:	ee 24       	eor	r14, r14
   3f462:	4c 85       	ldd	r20, Y+12	; 0x0c
   3f464:	e4 0e       	add	r14, r20
   3f466:	f1 1c       	adc	r15, r1
		tracenum(tftpOpcode);
		tracePGM(mDebugTftp_DLEN);
		tracenum(tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE));
	)

	if((tftpOpcode == TFTP_OPCODE_DATA)
   3f468:	23 30       	cpi	r18, 0x03	; 3
   3f46a:	31 05       	cpc	r19, r1
   3f46c:	91 f4       	brne	.+36     	; 0x3f492 <processPacket+0x102>
		&& ((tftpBlock > MAX_ADDR / 0x200) || (tftpBlock < highPacket) || (tftpBlock > highPacket + 1)))
   3f46e:	29 ef       	ldi	r18, 0xF9	; 249
   3f470:	e2 16       	cp	r14, r18
   3f472:	21 e0       	ldi	r18, 0x01	; 1
   3f474:	f2 06       	cpc	r15, r18
   3f476:	a8 f5       	brcc	.+106    	; 0x3f4e2 <processPacket+0x152>
   3f478:	20 91 20 02 	lds	r18, 0x0220
   3f47c:	30 91 21 02 	lds	r19, 0x0221
   3f480:	e2 16       	cp	r14, r18
   3f482:	f3 06       	cpc	r15, r19
   3f484:	70 f1       	brcs	.+92     	; 0x3f4e2 <processPacket+0x152>
   3f486:	2f 5f       	subi	r18, 0xFF	; 255
   3f488:	3f 4f       	sbci	r19, 0xFF	; 255
   3f48a:	2e 15       	cp	r18, r14
   3f48c:	3f 05       	cpc	r19, r15
   3f48e:	48 f1       	brcs	.+82     	; 0x3f4e2 <processPacket+0x152>
   3f490:	24 c0       	rjmp	.+72     	; 0x3f4da <processPacket+0x14a>
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
   3f492:	05 30       	cpi	r16, 0x05	; 5
   3f494:	12 40       	sbci	r17, 0x02	; 2
   3f496:	28 f5       	brcc	.+74     	; 0x3f4e2 <processPacket+0x152>

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
   3f498:	24 30       	cpi	r18, 0x04	; 4
   3f49a:	31 05       	cpc	r19, r1
   3f49c:	d0 f4       	brcc	.+52     	; 0x3f4d2 <processPacket+0x142>
   3f49e:	21 30       	cpi	r18, 0x01	; 1
   3f4a0:	31 05       	cpc	r19, r1
   3f4a2:	31 f1       	breq	.+76     	; 0x3f4f0 <processPacket+0x160>
   3f4a4:	22 30       	cpi	r18, 0x02	; 2
   3f4a6:	31 05       	cpc	r19, r1
   3f4a8:	e1 f4       	brne	.+56     	; 0x3f4e2 <processPacket+0x152>
			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPRRQ);)
			break;

		case TFTP_OPCODE_WRQ: // Write request
			// Valid WRQ -> reset timer
			resetTick();
   3f4aa:	35 d2       	rcall	.+1130   	; 0x3f916 <resetTick>

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPWRQ);)

			// Flagging image as invalid since the flashing process has started
			eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_BAD_VALUE);
   3f4ac:	6f ef       	ldi	r22, 0xFF	; 255
   3f4ae:	82 e0       	ldi	r24, 0x02	; 2
   3f4b0:	90 e0       	ldi	r25, 0x00	; 0
   3f4b2:	00 d5       	rcall	.+2560   	; 0x3feb4 <__eewr_byte_m2560>

#if defined(RANDOM_TFTP_DATA_PORT)
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
   3f4b4:	80 91 28 02 	lds	r24, 0x0228
   3f4b8:	90 91 29 02 	lds	r25, 0x0229
   3f4bc:	45 df       	rcall	.-374    	; 0x3f348 <sockInit>
#else
				tracenum(tftpTransferPort);
#endif
			)

			lastPacket = highPacket = 0;
   3f4be:	10 92 21 02 	sts	0x0221, r1
   3f4c2:	10 92 20 02 	sts	0x0220, r1
   3f4c6:	10 92 23 02 	sts	0x0223, r1
   3f4ca:	10 92 22 02 	sts	0x0222, r1
			returnCode = ACK; // Send back acknowledge for packet 0
   3f4ce:	22 e0       	ldi	r18, 0x02	; 2
   3f4d0:	44 c0       	rjmp	.+136    	; 0x3f55a <processPacket+0x1ca>

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
   3f4d2:	26 30       	cpi	r18, 0x06	; 6
   3f4d4:	31 05       	cpc	r19, r1
   3f4d6:	60 f0       	brcs	.+24     	; 0x3f4f0 <processPacket+0x160>
   3f4d8:	04 c0       	rjmp	.+8      	; 0x3f4e2 <processPacket+0x152>

	if((tftpOpcode == TFTP_OPCODE_DATA)
		&& ((tftpBlock > MAX_ADDR / 0x200) || (tftpBlock < highPacket) || (tftpBlock > highPacket + 1)))
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
   3f4da:	05 30       	cpi	r16, 0x05	; 5
   3f4dc:	82 e0       	ldi	r24, 0x02	; 2
   3f4de:	18 07       	cpc	r17, r24
   3f4e0:	68 f0       	brcs	.+26     	; 0x3f4fc <processPacket+0x16c>
			)

#if defined(RANDOM_TFTP_DATA_PORT)
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
   3f4e2:	80 91 28 02 	lds	r24, 0x0228
   3f4e6:	90 91 29 02 	lds	r25, 0x0229
   3f4ea:	2e df       	rcall	.-420    	; 0x3f348 <sockInit>
			 * It can be done by reinitializig the tftpd or
			 * by resetting the device. I should find out which is best...
			 * Right now it is being done by resetting the timer if we have a
			 * data packet. */
			// Invalid - return error
			returnCode = ERROR_INVALID;
   3f4ec:	21 e0       	ldi	r18, 0x01	; 1
   3f4ee:	35 c0       	rjmp	.+106    	; 0x3f55a <processPacket+0x1ca>
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
		tftpOpcode = TFTP_OPCODE_UKN;

	uint8_t returnCode = ERROR_UNKNOWN;
   3f4f0:	c3 5f       	subi	r28, 0xF3	; 243
   3f4f2:	dd 4f       	sbci	r29, 0xFD	; 253
   3f4f4:	18 82       	st	Y, r1
   3f4f6:	cd 50       	subi	r28, 0x0D	; 13
   3f4f8:	d2 40       	sbci	r29, 0x02	; 2
   3f4fa:	a7 c0       	rjmp	.+334    	; 0x3f64a <processPacket+0x2ba>
			returnCode = ACK; // Send back acknowledge for packet 0
			break;

		case TFTP_OPCODE_DATA:
			// Valid Data Packet -> reset timer
			resetTick();
   3f4fc:	0c d2       	rcall	.+1048   	; 0x3f916 <resetTick>

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPDATA);)

			packetLength = tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE);
   3f4fe:	04 50       	subi	r16, 0x04	; 4
   3f500:	11 09       	sbc	r17, r1
			lastPacket = tftpBlock;
   3f502:	f0 92 23 02 	sts	0x0223, r15
   3f506:	e0 92 22 02 	sts	0x0222, r14
#if defined(RAMPZ)
			writeAddr = (((address_t)((tftpBlock - 1)/0x80) << 16) | ((address_t)((tftpBlock - 1)%0x80) << 9));
   3f50a:	c7 01       	movw	r24, r14
   3f50c:	01 97       	sbiw	r24, 0x01	; 1
   3f50e:	6c 01       	movw	r12, r24
   3f510:	e1 2c       	mov	r14, r1
   3f512:	f1 2c       	mov	r15, r1
   3f514:	29 e0       	ldi	r18, 0x09	; 9
   3f516:	cc 0c       	add	r12, r12
   3f518:	dd 1c       	adc	r13, r13
   3f51a:	ee 1c       	adc	r14, r14
   3f51c:	ff 1c       	adc	r15, r15
   3f51e:	2a 95       	dec	r18
   3f520:	d1 f7       	brne	.-12     	; 0x3f516 <processPacket+0x186>
   3f522:	ee 24       	eor	r14, r14
   3f524:	ff 24       	eor	r15, r15
   3f526:	88 0f       	add	r24, r24
   3f528:	89 2f       	mov	r24, r25
   3f52a:	88 1f       	adc	r24, r24
   3f52c:	99 0b       	sbc	r25, r25
   3f52e:	91 95       	neg	r25
   3f530:	a0 e0       	ldi	r26, 0x00	; 0
   3f532:	b0 e0       	ldi	r27, 0x00	; 0
   3f534:	dc 01       	movw	r26, r24
   3f536:	99 27       	eor	r25, r25
   3f538:	88 27       	eor	r24, r24
   3f53a:	c8 2a       	or	r12, r24
   3f53c:	d9 2a       	or	r13, r25
   3f53e:	ea 2a       	or	r14, r26
   3f540:	fb 2a       	or	r15, r27
#else
			writeAddr = (address_t)((address_t)(tftpBlock - 1) << 9); // Flash write address for this block
#endif

			if((writeAddr + packetLength) > MAX_ADDR) {
   3f542:	d7 01       	movw	r26, r14
   3f544:	c6 01       	movw	r24, r12
   3f546:	80 0f       	add	r24, r16
   3f548:	91 1f       	adc	r25, r17
   3f54a:	a1 1d       	adc	r26, r1
   3f54c:	b1 1d       	adc	r27, r1
   3f54e:	81 30       	cpi	r24, 0x01	; 1
   3f550:	90 4f       	sbci	r25, 0xF0	; 240
   3f552:	a3 40       	sbci	r26, 0x03	; 3
   3f554:	b1 05       	cpc	r27, r1
   3f556:	38 f0       	brcs	.+14     	; 0x3f566 <processPacket+0x1d6>
				// Flash is full - abort with an error before a bootloader overwrite occurs
				// Application is now corrupt, so do not hand over.

				DBG_TFTP(tracePGMlnTftp(mDebugTftp_FULL);)

				returnCode = ERROR_FULL;
   3f558:	23 e0       	ldi	r18, 0x03	; 3
   3f55a:	c3 5f       	subi	r28, 0xF3	; 243
   3f55c:	dd 4f       	sbci	r29, 0xFD	; 253
   3f55e:	28 83       	st	Y, r18
   3f560:	cd 50       	subi	r28, 0x0D	; 13
   3f562:	d2 40       	sbci	r29, 0x02	; 2
   3f564:	72 c0       	rjmp	.+228    	; 0x3f64a <processPacket+0x2ba>
				uint8_t* pageBase = buffer + (UDP_HEADER_SIZE + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE); // Start of block data
				uint16_t offset = 0; // Block offset


				// Set the return code before packetLength gets rounded up
				if(packetLength < TFTP_DATA_SIZE) returnCode = FINAL_ACK;
   3f566:	01 15       	cp	r16, r1
   3f568:	f2 e0       	ldi	r31, 0x02	; 2
   3f56a:	1f 07       	cpc	r17, r31
   3f56c:	10 f4       	brcc	.+4      	; 0x3f572 <processPacket+0x1e2>
   3f56e:	24 e0       	ldi	r18, 0x04	; 4
   3f570:	01 c0       	rjmp	.+2      	; 0x3f574 <processPacket+0x1e4>
				else returnCode = ACK;
   3f572:	22 e0       	ldi	r18, 0x02	; 2
   3f574:	c3 5f       	subi	r28, 0xF3	; 243
   3f576:	dd 4f       	sbci	r29, 0xFD	; 253
   3f578:	28 83       	st	Y, r18
   3f57a:	cd 50       	subi	r28, 0x0D	; 13
   3f57c:	d2 40       	sbci	r29, 0x02	; 2

				// Round up packet length to a full flash sector size
				while(packetLength % SPM_PAGESIZE) packetLength++;
   3f57e:	00 23       	and	r16, r16
   3f580:	19 f0       	breq	.+6      	; 0x3f588 <processPacket+0x1f8>
   3f582:	0f 5f       	subi	r16, 0xFF	; 255
   3f584:	1f 4f       	sbci	r17, 0xFF	; 255
   3f586:	fb cf       	rjmp	.-10     	; 0x3f57e <processPacket+0x1ee>
				DBG_TFTP(
					tracePGMlnTftp(mDebugTftp_PLEN);
					tracenum(packetLength);
				)

				if(writeAddr == 0) {
   3f588:	c1 14       	cp	r12, r1
   3f58a:	d1 04       	cpc	r13, r1
   3f58c:	e1 04       	cpc	r14, r1
   3f58e:	f1 04       	cpc	r15, r1
   3f590:	19 f4       	brne	.+6      	; 0x3f598 <processPacket+0x208>
					// First sector - validate
					if(!validImage(pageBase)) {
   3f592:	ce 01       	movw	r24, r28
   3f594:	0d 96       	adiw	r24, 0x0d	; 13
   3f596:	59 d1       	rcall	.+690    	; 0x3f84a <validImage>
   3f598:	de 01       	movw	r26, r28
   3f59a:	1d 96       	adiw	r26, 0x0d	; 13
					}
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
   3f59c:	20 e0       	ldi	r18, 0x00	; 0
   3f59e:	30 e0       	ldi	r19, 0x00	; 0
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
					boot_page_fill(writeAddr + offset, writeValue);
   3f5a0:	99 24       	eor	r9, r9
   3f5a2:	93 94       	inc	r9
					)

					offset += 2;

					if(offset % SPM_PAGESIZE == 0) {
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
   3f5a4:	26 01       	movw	r4, r12
   3f5a6:	37 01       	movw	r6, r14
   3f5a8:	81 e0       	ldi	r24, 0x01	; 1
   3f5aa:	58 1a       	sub	r5, r24
   3f5ac:	61 08       	sbc	r6, r1
   3f5ae:	71 08       	sbc	r7, r1
   3f5b0:	f3 e0       	ldi	r31, 0x03	; 3
   3f5b2:	8f 2e       	mov	r8, r31
						boot_spm_busy_wait();
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
   3f5b4:	85 e0       	ldi	r24, 0x05	; 5
   3f5b6:	38 2e       	mov	r3, r24
						boot_spm_busy_wait();
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
   3f5b8:	91 e1       	ldi	r25, 0x11	; 17
   3f5ba:	29 2e       	mov	r2, r25
					}
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
   3f5bc:	20 17       	cp	r18, r16
   3f5be:	31 07       	cpc	r19, r17
   3f5c0:	08 f0       	brcs	.+2      	; 0x3f5c4 <processPacket+0x234>
   3f5c2:	38 c0       	rjmp	.+112    	; 0x3f634 <processPacket+0x2a4>
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
					boot_page_fill(writeAddr + offset, writeValue);
   3f5c4:	c7 01       	movw	r24, r14
   3f5c6:	b6 01       	movw	r22, r12
   3f5c8:	62 0f       	add	r22, r18
   3f5ca:	73 1f       	adc	r23, r19
   3f5cc:	81 1d       	adc	r24, r1
   3f5ce:	91 1d       	adc	r25, r1
   3f5d0:	f5 01       	movw	r30, r10
   3f5d2:	e2 0f       	add	r30, r18
   3f5d4:	f3 1f       	adc	r31, r19
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
   3f5d6:	45 85       	ldd	r20, Z+13	; 0x0d
   3f5d8:	50 e0       	ldi	r21, 0x00	; 0
   3f5da:	54 2f       	mov	r21, r20
   3f5dc:	44 27       	eor	r20, r20
   3f5de:	ec 91       	ld	r30, X
   3f5e0:	4e 2b       	or	r20, r30
					boot_page_fill(writeAddr + offset, writeValue);
   3f5e2:	0a 01       	movw	r0, r20
   3f5e4:	fb 01       	movw	r30, r22
   3f5e6:	80 93 5b 00 	sts	0x005B, r24
   3f5ea:	90 92 57 00 	sts	0x0057, r9
   3f5ee:	e8 95       	spm
   3f5f0:	11 24       	eor	r1, r1
							tracePGM(mDebugTftp_OFFSET);
							tracenum(writeAddr + offset);
						}
					)

					offset += 2;
   3f5f2:	2e 5f       	subi	r18, 0xFE	; 254
   3f5f4:	3f 4f       	sbci	r19, 0xFF	; 255

					if(offset % SPM_PAGESIZE == 0) {
   3f5f6:	21 11       	cpse	r18, r1
   3f5f8:	1b c0       	rjmp	.+54     	; 0x3f630 <processPacket+0x2a0>
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
   3f5fa:	b3 01       	movw	r22, r6
   3f5fc:	a2 01       	movw	r20, r4
   3f5fe:	42 0f       	add	r20, r18
   3f600:	53 1f       	adc	r21, r19
   3f602:	61 1d       	adc	r22, r1
   3f604:	71 1d       	adc	r23, r1
   3f606:	fa 01       	movw	r30, r20
   3f608:	60 93 5b 00 	sts	0x005B, r22
   3f60c:	80 92 57 00 	sts	0x0057, r8
   3f610:	e8 95       	spm
						boot_spm_busy_wait();
   3f612:	07 b6       	in	r0, 0x37	; 55
   3f614:	00 fc       	sbrc	r0, 0
   3f616:	fd cf       	rjmp	.-6      	; 0x3f612 <processPacket+0x282>
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
   3f618:	fa 01       	movw	r30, r20
   3f61a:	60 93 5b 00 	sts	0x005B, r22
   3f61e:	30 92 57 00 	sts	0x0057, r3
   3f622:	e8 95       	spm
						boot_spm_busy_wait();
   3f624:	07 b6       	in	r0, 0x37	; 55
   3f626:	00 fc       	sbrc	r0, 0
   3f628:	fd cf       	rjmp	.-6      	; 0x3f624 <processPacket+0x294>
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
   3f62a:	20 92 57 00 	sts	0x0057, r2
   3f62e:	e8 95       	spm
   3f630:	12 96       	adiw	r26, 0x02	; 2
   3f632:	c4 cf       	rjmp	.-120    	; 0x3f5bc <processPacket+0x22c>
#endif
					}
				}

				if(returnCode == FINAL_ACK) {
   3f634:	c3 5f       	subi	r28, 0xF3	; 243
   3f636:	dd 4f       	sbci	r29, 0xFD	; 253
   3f638:	28 81       	ld	r18, Y
   3f63a:	cd 50       	subi	r28, 0x0D	; 13
   3f63c:	d2 40       	sbci	r29, 0x02	; 2
   3f63e:	24 30       	cpi	r18, 0x04	; 4
   3f640:	21 f4       	brne	.+8      	; 0x3f64a <processPacket+0x2ba>
					// Hand over to application

					DBG_TFTP(tracePGMlnTftp(mDebugTftp_DONE);)

					// Flag the image as valid since we received the last packet
					eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
   3f642:	6e ee       	ldi	r22, 0xEE	; 238
   3f644:	82 e0       	ldi	r24, 0x02	; 2
   3f646:	90 e0       	ldi	r25, 0x00	; 0
   3f648:	35 d4       	rcall	.+2154   	; 0x3feb4 <__eewr_byte_m2560>
			break;

	}

	return(returnCode);
}
   3f64a:	c3 5f       	subi	r28, 0xF3	; 243
   3f64c:	dd 4f       	sbci	r29, 0xFD	; 253
   3f64e:	88 81       	ld	r24, Y
   3f650:	cd 50       	subi	r28, 0x0D	; 13
   3f652:	d2 40       	sbci	r29, 0x02	; 2
   3f654:	c3 5f       	subi	r28, 0xF3	; 243
   3f656:	dd 4f       	sbci	r29, 0xFD	; 253
   3f658:	de bf       	out	0x3e, r29	; 62
   3f65a:	cd bf       	out	0x3d, r28	; 61
   3f65c:	df 91       	pop	r29
   3f65e:	cf 91       	pop	r28
   3f660:	1f 91       	pop	r17
   3f662:	0f 91       	pop	r16
   3f664:	ff 90       	pop	r15
   3f666:	ef 90       	pop	r14
   3f668:	df 90       	pop	r13
   3f66a:	cf 90       	pop	r12
   3f66c:	bf 90       	pop	r11
   3f66e:	af 90       	pop	r10
   3f670:	9f 90       	pop	r9
   3f672:	8f 90       	pop	r8
   3f674:	7f 90       	pop	r7
   3f676:	6f 90       	pop	r6
   3f678:	5f 90       	pop	r5
   3f67a:	4f 90       	pop	r4
   3f67c:	3f 90       	pop	r3
   3f67e:	2f 90       	pop	r2
   3f680:	08 95       	ret

0003f682 <tftpInit>:

/**
 * Initializes the network controller
 */
void tftpInit(void)
{
   3f682:	cf 93       	push	r28
	// Open socket
	sockInit(TFTP_PORT);
   3f684:	85 e4       	ldi	r24, 0x45	; 69
   3f686:	90 e0       	ldi	r25, 0x00	; 0
   3f688:	5f de       	rcall	.-834    	; 0x3f348 <sockInit>

#if defined(RANDOM_TFTP_DATA_PORT)
#else
	if(eeprom_read_byte(EEPROM_SIG_3) == EEPROM_SIG_3_VALUE)
   3f68a:	87 e1       	ldi	r24, 0x17	; 23
   3f68c:	90 e0       	ldi	r25, 0x00	; 0
   3f68e:	0a d4       	rcall	.+2068   	; 0x3fea4 <__eerd_byte_m2560>
   3f690:	8b 3b       	cpi	r24, 0xBB	; 187
   3f692:	91 f4       	brne	.+36     	; 0x3f6b8 <tftpInit+0x36>
		tftpTransferPort = ((eeprom_read_byte(EEPROM_PORT + 1) << 8) + eeprom_read_byte(EEPROM_PORT));
   3f694:	89 e1       	ldi	r24, 0x19	; 25
   3f696:	90 e0       	ldi	r25, 0x00	; 0
   3f698:	05 d4       	rcall	.+2058   	; 0x3fea4 <__eerd_byte_m2560>
   3f69a:	c8 2f       	mov	r28, r24
   3f69c:	88 e1       	ldi	r24, 0x18	; 24
   3f69e:	90 e0       	ldi	r25, 0x00	; 0
   3f6a0:	01 d4       	rcall	.+2050   	; 0x3fea4 <__eerd_byte_m2560>
   3f6a2:	2c 2f       	mov	r18, r28
   3f6a4:	30 e0       	ldi	r19, 0x00	; 0
   3f6a6:	32 2f       	mov	r19, r18
   3f6a8:	22 27       	eor	r18, r18
   3f6aa:	28 0f       	add	r18, r24
   3f6ac:	31 1d       	adc	r19, r1
   3f6ae:	30 93 29 02 	sts	0x0229, r19
   3f6b2:	20 93 28 02 	sts	0x0228, r18
   3f6b6:	06 c0       	rjmp	.+12     	; 0x3f6c4 <tftpInit+0x42>
	else
		tftpTransferPort = TFTP_DATA_PORT;
   3f6b8:	89 e7       	ldi	r24, 0x79	; 121
   3f6ba:	97 eb       	ldi	r25, 0xB7	; 183
   3f6bc:	90 93 29 02 	sts	0x0229, r25
   3f6c0:	80 93 28 02 	sts	0x0228, r24
#else
		tracePGMlnTftp(mDebugTftp_PORT);
		tracenum(tftpTransferPort);
#endif
	)
}
   3f6c4:	cf 91       	pop	r28
   3f6c6:	08 95       	ret

0003f6c8 <tftpPoll>:

/**
 * Looks for a connection
 */
uint8_t tftpPoll(void)
{
   3f6c8:	af 92       	push	r10
   3f6ca:	bf 92       	push	r11
   3f6cc:	cf 92       	push	r12
   3f6ce:	df 92       	push	r13
   3f6d0:	ef 92       	push	r14
   3f6d2:	ff 92       	push	r15
   3f6d4:	0f 93       	push	r16
   3f6d6:	1f 93       	push	r17
   3f6d8:	cf 93       	push	r28
   3f6da:	df 93       	push	r29
   3f6dc:	cd b7       	in	r28, 0x3d	; 61
   3f6de:	de b7       	in	r29, 0x3e	; 62
   3f6e0:	c4 56       	subi	r28, 0x64	; 100
   3f6e2:	d1 09       	sbc	r29, r1
   3f6e4:	de bf       	out	0x3e, r29	; 62
   3f6e6:	cd bf       	out	0x3d, r28	; 61
	uint8_t response = ACK;
	// Get the size of the recieved data
	uint16_t packetSize = spiReadWord(REG_S3_RX_RSR0);
   3f6e8:	86 e2       	ldi	r24, 0x26	; 38
   3f6ea:	97 e0       	ldi	r25, 0x07	; 7
   3f6ec:	df dd       	rcall	.-1090   	; 0x3f2ac <spiReadWord>
// 			_delay_ms(400);
// 			packetSize = spiReadWord(REG_S3_RX_RSR0);
// 		}
// 	} while (packetSize != incSize);

	if(packetSize) {
   3f6ee:	89 2b       	or	r24, r25
   3f6f0:	11 f4       	brne	.+4      	; 0x3f6f6 <tftpPoll+0x2e>
		// Complete
		return(0);
	}

	// Tftp continues
	return(1);
   3f6f2:	81 e0       	ldi	r24, 0x01	; 1
   3f6f4:	9b c0       	rjmp	.+310    	; 0x3f82c <tftpPoll+0x164>
// 			packetSize = spiReadWord(REG_S3_RX_RSR0);
// 		}
// 	} while (packetSize != incSize);

	if(packetSize) {
		tftpFlashing = TRUE;
   3f6f6:	81 e0       	ldi	r24, 0x01	; 1
   3f6f8:	80 93 2b 02 	sts	0x022B, r24

		while((spiReadReg(REG_S3_IR) & IR_RECV)) {
   3f6fc:	82 e0       	ldi	r24, 0x02	; 2
   3f6fe:	97 e0       	ldi	r25, 0x07	; 7
   3f700:	bb dd       	rcall	.-1162   	; 0x3f278 <spiReadReg>
   3f702:	82 ff       	sbrs	r24, 2
   3f704:	0e c0       	rjmp	.+28     	; 0x3f722 <tftpPoll+0x5a>
			spiWriteReg(REG_S3_IR, IR_RECV);
   3f706:	64 e0       	ldi	r22, 0x04	; 4
   3f708:	82 e0       	ldi	r24, 0x02	; 2
   3f70a:	97 e0       	ldi	r25, 0x07	; 7
   3f70c:	8b dd       	rcall	.-1258   	; 0x3f224 <spiWriteReg>
   3f70e:	2f ef       	ldi	r18, 0xFF	; 255
   3f710:	37 e8       	ldi	r19, 0x87	; 135
   3f712:	83 e1       	ldi	r24, 0x13	; 19
   3f714:	21 50       	subi	r18, 0x01	; 1
   3f716:	30 40       	sbci	r19, 0x00	; 0
   3f718:	80 40       	sbci	r24, 0x00	; 0
   3f71a:	e1 f7       	brne	.-8      	; 0x3f714 <tftpPoll+0x4c>
   3f71c:	00 c0       	rjmp	.+0      	; 0x3f71e <tftpPoll+0x56>
   3f71e:	00 00       	nop
   3f720:	ed cf       	rjmp	.-38     	; 0x3f6fc <tftpPoll+0x34>
		// Process Packet and get TFTP response code
#if (DEBUG_TFTP > 0)
		packetSize = spiReadWord(REG_S3_RX_RSR0);
		response = processPacket(packetSize);
#else
		response = processPacket();
   3f722:	36 de       	rcall	.-916    	; 0x3f390 <processPacket>
   3f724:	f8 2e       	mov	r15, r24
	uint8_t txBuffer[100];
	uint8_t* txPtr = txBuffer;
	uint8_t packetLength;
	uint16_t writePointer;

	writePointer = spiReadWord(REG_S3_TX_WR0) + S3_TX_START;
   3f726:	84 e2       	ldi	r24, 0x24	; 36
   3f728:	97 e0       	ldi	r25, 0x07	; 7
   3f72a:	c0 dd       	rcall	.-1152   	; 0x3f2ac <spiReadWord>
   3f72c:	8c 01       	movw	r16, r24
   3f72e:	18 5a       	subi	r17, 0xA8	; 168

	switch(response) {
   3f730:	92 e0       	ldi	r25, 0x02	; 2
   3f732:	f9 16       	cp	r15, r25
   3f734:	c1 f1       	breq	.+112    	; 0x3f7a6 <tftpPoll+0xde>
   3f736:	9f 15       	cp	r25, r15
   3f738:	20 f0       	brcs	.+8      	; 0x3f742 <tftpPoll+0x7a>
   3f73a:	e1 e0       	ldi	r30, 0x01	; 1
   3f73c:	fe 16       	cp	r15, r30
   3f73e:	c9 f0       	breq	.+50     	; 0x3f772 <tftpPoll+0xaa>
   3f740:	06 c0       	rjmp	.+12     	; 0x3f74e <tftpPoll+0x86>
   3f742:	f3 e0       	ldi	r31, 0x03	; 3
   3f744:	ff 16       	cp	r15, r31
   3f746:	11 f1       	breq	.+68     	; 0x3f78c <tftpPoll+0xc4>
   3f748:	24 e0       	ldi	r18, 0x04	; 4
   3f74a:	f2 16       	cp	r15, r18
   3f74c:	d9 f1       	breq	.+118    	; 0x3f7c4 <tftpPoll+0xfc>

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_unknown_error_packet, packetLength);
   3f74e:	4c ef       	ldi	r20, 0xFC	; 252
   3f750:	50 ef       	ldi	r21, 0xF0	; 240
   3f752:	60 e0       	ldi	r22, 0x00	; 0
   3f754:	70 e0       	ldi	r23, 0x00	; 0
   3f756:	6d 5f       	subi	r22, 0xFD	; 253
   3f758:	7f 4f       	sbci	r23, 0xFF	; 255
   3f75a:	2a e0       	ldi	r18, 0x0A	; 10
   3f75c:	30 e0       	ldi	r19, 0x00	; 0
   3f75e:	ce 01       	movw	r24, r28
   3f760:	01 96       	adiw	r24, 0x01	; 1
   3f762:	96 d3       	rcall	.+1836   	; 0x3fe90 <memcpy_PF>
	switch(response) {
		default:

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
   3f764:	8a e0       	ldi	r24, 0x0A	; 10
	txPtr = txBuffer;

	while(packetLength--) {
		spiWriteReg(writePointer++, *txPtr++);

		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
   3f766:	fe 01       	movw	r30, r28
   3f768:	31 96       	adiw	r30, 0x01	; 1
   3f76a:	6f 01       	movw	r12, r30
   3f76c:	e8 2e       	mov	r14, r24
   3f76e:	ee 0e       	add	r14, r30
   3f770:	45 c0       	rjmp	.+138    	; 0x3f7fc <tftpPoll+0x134>

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_opcode_error_packet, packetLength);
   3f772:	41 e1       	ldi	r20, 0x11	; 17
   3f774:	51 ef       	ldi	r21, 0xF1	; 241
   3f776:	60 e0       	ldi	r22, 0x00	; 0
   3f778:	70 e0       	ldi	r23, 0x00	; 0
   3f77a:	6d 5f       	subi	r22, 0xFD	; 253
   3f77c:	7f 4f       	sbci	r23, 0xFF	; 255
   3f77e:	2c e0       	ldi	r18, 0x0C	; 12
   3f780:	30 e0       	ldi	r19, 0x00	; 0
   3f782:	ce 01       	movw	r24, r28
   3f784:	01 96       	adiw	r24, 0x01	; 1
   3f786:	84 d3       	rcall	.+1800   	; 0x3fe90 <memcpy_PF>
#endif
			break;

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
   3f788:	8c e0       	ldi	r24, 0x0C	; 12
   3f78a:	ed cf       	rjmp	.-38     	; 0x3f766 <tftpPoll+0x9e>

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_full_error_packet, packetLength);
   3f78c:	47 e0       	ldi	r20, 0x07	; 7
   3f78e:	51 ef       	ldi	r21, 0xF1	; 241
   3f790:	60 e0       	ldi	r22, 0x00	; 0
   3f792:	70 e0       	ldi	r23, 0x00	; 0
   3f794:	6d 5f       	subi	r22, 0xFD	; 253
   3f796:	7f 4f       	sbci	r23, 0xFF	; 255
   3f798:	29 e0       	ldi	r18, 0x09	; 9
   3f79a:	30 e0       	ldi	r19, 0x00	; 0
   3f79c:	ce 01       	movw	r24, r28
   3f79e:	01 96       	adiw	r24, 0x01	; 1
   3f7a0:	77 d3       	rcall	.+1774   	; 0x3fe90 <memcpy_PF>
#endif
			break;

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
   3f7a2:	89 e0       	ldi	r24, 0x09	; 9
   3f7a4:	e0 cf       	rjmp	.-64     	; 0x3f766 <tftpPoll+0x9e>
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
#endif
			break;

		case ACK:
			if(lastPacket > highPacket) highPacket = lastPacket;
   3f7a6:	80 91 22 02 	lds	r24, 0x0222
   3f7aa:	90 91 23 02 	lds	r25, 0x0223
   3f7ae:	20 91 20 02 	lds	r18, 0x0220
   3f7b2:	30 91 21 02 	lds	r19, 0x0221
   3f7b6:	28 17       	cp	r18, r24
   3f7b8:	39 07       	cpc	r19, r25
   3f7ba:	20 f4       	brcc	.+8      	; 0x3f7c4 <tftpPoll+0xfc>
   3f7bc:	90 93 21 02 	sts	0x0221, r25
   3f7c0:	80 93 20 02 	sts	0x0220, r24
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
			*txPtr++ = TFTP_OPCODE_ACK >> 8;
   3f7c4:	19 82       	std	Y+1, r1	; 0x01
			*txPtr++ = TFTP_OPCODE_ACK & 0xff;
   3f7c6:	84 e0       	ldi	r24, 0x04	; 4
   3f7c8:	8a 83       	std	Y+2, r24	; 0x02
			// lastPacket is block code
			*txPtr++ = lastPacket >> 8;
   3f7ca:	80 91 22 02 	lds	r24, 0x0222
   3f7ce:	90 91 23 02 	lds	r25, 0x0223
   3f7d2:	9b 83       	std	Y+3, r25	; 0x03
			*txPtr = lastPacket & 0xff;
   3f7d4:	8c 83       	std	Y+4, r24	; 0x04
			DBG_TFTP(
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
   3f7d6:	84 e0       	ldi	r24, 0x04	; 4
   3f7d8:	c6 cf       	rjmp	.-116    	; 0x3f766 <tftpPoll+0x9e>
	}

	txPtr = txBuffer;

	while(packetLength--) {
		spiWriteReg(writePointer++, *txPtr++);
   3f7da:	f6 01       	movw	r30, r12
   3f7dc:	61 91       	ld	r22, Z+
   3f7de:	6f 01       	movw	r12, r30
   3f7e0:	58 01       	movw	r10, r16
   3f7e2:	ff ef       	ldi	r31, 0xFF	; 255
   3f7e4:	af 1a       	sub	r10, r31
   3f7e6:	bf 0a       	sbc	r11, r31
   3f7e8:	c8 01       	movw	r24, r16
   3f7ea:	1c dd       	rcall	.-1480   	; 0x3f224 <spiWriteReg>

		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
   3f7ec:	a1 14       	cp	r10, r1
   3f7ee:	20 e6       	ldi	r18, 0x60	; 96
   3f7f0:	b2 06       	cpc	r11, r18
   3f7f2:	19 f4       	brne	.+6      	; 0x3f7fa <tftpPoll+0x132>
   3f7f4:	a1 2c       	mov	r10, r1
   3f7f6:	a8 e5       	ldi	r26, 0x58	; 88
   3f7f8:	ba 2e       	mov	r11, r26
   3f7fa:	85 01       	movw	r16, r10
			break;
	}

	txPtr = txBuffer;

	while(packetLength--) {
   3f7fc:	ec 10       	cpse	r14, r12
   3f7fe:	ed cf       	rjmp	.-38     	; 0x3f7da <tftpPoll+0x112>
		spiWriteReg(writePointer++, *txPtr++);

		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
	}

	spiWriteWord(REG_S3_TX_WR0, writePointer - S3_TX_START);
   3f800:	b8 01       	movw	r22, r16
   3f802:	78 55       	subi	r23, 0x58	; 88
   3f804:	84 e2       	ldi	r24, 0x24	; 36
   3f806:	97 e0       	ldi	r25, 0x07	; 7
   3f808:	26 dd       	rcall	.-1460   	; 0x3f256 <spiWriteWord>
	spiWriteReg(REG_S3_CR, CR_SEND);
   3f80a:	60 e2       	ldi	r22, 0x20	; 32
   3f80c:	81 e0       	ldi	r24, 0x01	; 1
   3f80e:	97 e0       	ldi	r25, 0x07	; 7
   3f810:	09 dd       	rcall	.-1518   	; 0x3f224 <spiWriteReg>

	while(spiReadReg(REG_S3_CR));
   3f812:	81 e0       	ldi	r24, 0x01	; 1
   3f814:	97 e0       	ldi	r25, 0x07	; 7
   3f816:	30 dd       	rcall	.-1440   	; 0x3f278 <spiReadReg>
   3f818:	81 11       	cpse	r24, r1
   3f81a:	fb cf       	rjmp	.-10     	; 0x3f812 <tftpPoll+0x14a>
#endif
		// Send the response
		sendResponse(response);
	}

	if(response == FINAL_ACK) {
   3f81c:	34 e0       	ldi	r19, 0x04	; 4
   3f81e:	f3 12       	cpse	r15, r19
   3f820:	68 cf       	rjmp	.-304    	; 0x3f6f2 <tftpPoll+0x2a>
		spiWriteReg(REG_S3_CR, CR_CLOSE);
   3f822:	60 e1       	ldi	r22, 0x10	; 16
   3f824:	81 e0       	ldi	r24, 0x01	; 1
   3f826:	97 e0       	ldi	r25, 0x07	; 7
   3f828:	fd dc       	rcall	.-1542   	; 0x3f224 <spiWriteReg>
		// Complete
		return(0);
   3f82a:	80 e0       	ldi	r24, 0x00	; 0
	}

	// Tftp continues
	return(1);
}
   3f82c:	cc 59       	subi	r28, 0x9C	; 156
   3f82e:	df 4f       	sbci	r29, 0xFF	; 255
   3f830:	de bf       	out	0x3e, r29	; 62
   3f832:	cd bf       	out	0x3d, r28	; 61
   3f834:	df 91       	pop	r29
   3f836:	cf 91       	pop	r28
   3f838:	1f 91       	pop	r17
   3f83a:	0f 91       	pop	r16
   3f83c:	ff 90       	pop	r15
   3f83e:	ef 90       	pop	r14
   3f840:	df 90       	pop	r13
   3f842:	cf 90       	pop	r12
   3f844:	bf 90       	pop	r11
   3f846:	af 90       	pop	r10
   3f848:	08 95       	ret

0003f84a <validImage>:
#include "serial.h"
#include "debug.h"
#include "debug_vald.h"

uint8_t validImage(uint8_t* base)
{
   3f84a:	20 e0       	ldi	r18, 0x00	; 0
   3f84c:	30 e0       	ldi	r19, 0x00	; 0
   3f84e:	fc 01       	movw	r30, r24
   3f850:	e2 0f       	add	r30, r18
   3f852:	f3 1f       	adc	r31, r19
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {

		// For each vector, check it is of the form:
		// 0x0C 0x94 0xWX 0xYZ  ; JMP 0xWXYZ
		if(base[i] != 0x0c) {
   3f854:	40 81       	ld	r20, Z
   3f856:	4c 30       	cpi	r20, 0x0C	; 12
   3f858:	51 f4       	brne	.+20     	; 0x3f86e <validImage+0x24>
				tracePGM(mDebugVald_0x0C);
			)
			return(0);
		}
		
		if(base[i + 1] != 0x94) {
   3f85a:	41 81       	ldd	r20, Z+1	; 0x01
   3f85c:	44 39       	cpi	r20, 0x94	; 148
   3f85e:	39 f4       	brne	.+14     	; 0x3f86e <validImage+0x24>
   3f860:	2c 5f       	subi	r18, 0xFC	; 252
   3f862:	3f 4f       	sbci	r19, 0xFF	; 255

uint8_t validImage(uint8_t* base)
{
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
   3f864:	24 33       	cpi	r18, 0x34	; 52
   3f866:	31 05       	cpc	r19, r1
   3f868:	91 f7       	brne	.-28     	; 0x3f84e <validImage+0x4>
		}
	}

	DBG_VALD(tracePGMlnVald(mDebugVald_VALID);)

	return(1);
   3f86a:	81 e0       	ldi	r24, 0x01	; 1
}
   3f86c:	08 95       	ret
				tracenum(i);
				tracePGM(mDebugVald_WITH);
				tracenum(base[i]);
				tracePGM(mDebugVald_0x0C);
			)
			return(0);
   3f86e:	80 e0       	ldi	r24, 0x00	; 0
   3f870:	08 95       	ret

0003f872 <serialInit>:


void serialInit(void)
{
	// Double speed mode USART0
	UART_STATUS_REG		= _BV(UART_DOUBLE_SPEED);
   3f872:	82 e0       	ldi	r24, 0x02	; 2
   3f874:	80 93 c0 00 	sts	0x00C0, r24
	// Enable receiver and transiter on USART0
	UART_CONTROL_REG	= _BV(UART_ENABLE_RECEIVER) | _BV(UART_ENABLE_TRANSMITTER);
   3f878:	88 e1       	ldi	r24, 0x18	; 24
   3f87a:	80 93 c1 00 	sts	0x00C1, r24
	// Set 8bit character length on USART0
	UART_MODE_REG		= _BV(UART_CHAR_SIZE_LOW) | _BV(UART_CHAR_SIZE_MID);
   3f87e:	86 e0       	ldi	r24, 0x06	; 6
   3f880:	80 93 c2 00 	sts	0x00C2, r24
	// Set USART0 baud rate
	UART_BAUD_RATE_LOW	= (uint8_t)((F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1);
   3f884:	80 e1       	ldi	r24, 0x10	; 16
   3f886:	80 93 c4 00 	sts	0x00C4, r24
   3f88a:	08 95       	ret

0003f88c <putch>:
}


void putch(uint8_t c)
{
	while(!(UART_STATUS_REG & _BV(UART_DATA_REG_EMPTY)));
   3f88c:	90 91 c0 00 	lds	r25, 0x00C0
   3f890:	95 ff       	sbrs	r25, 5
   3f892:	fc cf       	rjmp	.-8      	; 0x3f88c <putch>
	UART_DATA_REG = c;
   3f894:	80 93 c6 00 	sts	0x00C6, r24
   3f898:	08 95       	ret

0003f89a <puthex>:
}


void puthex(uint8_t c)
{
	c &= 0xf;
   3f89a:	8f 70       	andi	r24, 0x0F	; 15
	if(c > 9) c += 7;
   3f89c:	8a 30       	cpi	r24, 0x0A	; 10
   3f89e:	08 f0       	brcs	.+2      	; 0x3f8a2 <puthex+0x8>
   3f8a0:	89 5f       	subi	r24, 0xF9	; 249
	//while(!(UART_STATUS_REG & _BV(UART_DATA_REG_EMPTY)));
	//UART_DATA_REG = c + '0';
	putch(c + '0');
   3f8a2:	80 5d       	subi	r24, 0xD0	; 208
   3f8a4:	f3 cf       	rjmp	.-26     	; 0x3f88c <putch>

0003f8a6 <getch>:

uint8_t getch(void)
{
	//uint8_t ch;

	while(!(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)));
   3f8a6:	80 91 c0 00 	lds	r24, 0x00C0
   3f8aa:	87 ff       	sbrs	r24, 7
   3f8ac:	fc cf       	rjmp	.-8      	; 0x3f8a6 <getch>
	if(!(UART_STATUS_REG & _BV(UART_FRAME_ERROR))) {
   3f8ae:	80 91 c0 00 	lds	r24, 0x00C0
   3f8b2:	84 fd       	sbrc	r24, 4
   3f8b4:	01 c0       	rjmp	.+2      	; 0x3f8b8 <getch+0x12>
		 * expects to be talking to the application, and DON'T reset the
		 * watchdog.  This should cause the bootloader to abort and run
		 * the application "soon", if it keeps happening.  (Note that we
		 * don't care that an invalid char is returned...)
		 */
		wdt_reset();
   3f8b6:	a8 95       	wdr
	}

	//ch = UART_DATA_REG;
	//return ch;

	return(UART_DATA_REG);
   3f8b8:	80 91 c6 00 	lds	r24, 0x00C6
}
   3f8bc:	08 95       	ret

0003f8be <serialPoll>:


uint8_t serialPoll(void)
{
	if(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)) {
   3f8be:	80 91 c0 00 	lds	r24, 0x00C0
   3f8c2:	87 ff       	sbrs	r24, 7
   3f8c4:	05 c0       	rjmp	.+10     	; 0x3f8d0 <serialPoll+0x12>
		resetTick();
   3f8c6:	27 d0       	rcall	.+78     	; 0x3f916 <resetTick>
		serialFlashing = TRUE;
   3f8c8:	81 e0       	ldi	r24, 0x01	; 1
   3f8ca:	80 93 2a 02 	sts	0x022A, r24
#if defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) || defined(__AVR_ATmega1284P__)
		return(processOptiboot());
#elif defined(__AVR_ATmega2560__)
		return(processStk500boot());
   3f8ce:	3f c0       	rjmp	.+126    	; 0x3f94e <processStk500boot>
#endif
	}
	return(1);
}
   3f8d0:	81 e0       	ldi	r24, 0x01	; 1
   3f8d2:	08 95       	ret

0003f8d4 <updateLed>:
static uint16_t tick = 0;


void updateLed(void)
{
	uint16_t next_timer_1 = TCNT1;
   3f8d4:	80 91 84 00 	lds	r24, 0x0084
   3f8d8:	90 91 85 00 	lds	r25, 0x0085

	if(next_timer_1 & 0x400) LED_PORT ^= _BV(LED); // Led pin high
   3f8dc:	92 ff       	sbrs	r25, 2
   3f8de:	04 c0       	rjmp	.+8      	; 0x3f8e8 <updateLed+0x14>
   3f8e0:	25 b1       	in	r18, 0x05	; 5
   3f8e2:	20 58       	subi	r18, 0x80	; 128
   3f8e4:	25 b9       	out	0x05, r18	; 5
   3f8e6:	01 c0       	rjmp	.+2      	; 0x3f8ea <updateLed+0x16>
	else LED_PORT &= ~_BV(LED); // Led pin low
   3f8e8:	2f 98       	cbi	0x05, 7	; 5

	if(next_timer_1 < last_timer_1) {
   3f8ea:	20 91 26 02 	lds	r18, 0x0226
   3f8ee:	30 91 27 02 	lds	r19, 0x0227
   3f8f2:	82 17       	cp	r24, r18
   3f8f4:	93 07       	cpc	r25, r19
   3f8f6:	50 f4       	brcc	.+20     	; 0x3f90c <updateLed+0x38>
		tick++;
   3f8f8:	20 91 24 02 	lds	r18, 0x0224
   3f8fc:	30 91 25 02 	lds	r19, 0x0225
   3f900:	2f 5f       	subi	r18, 0xFF	; 255
   3f902:	3f 4f       	sbci	r19, 0xFF	; 255
   3f904:	30 93 25 02 	sts	0x0225, r19
   3f908:	20 93 24 02 	sts	0x0224, r18
		    tracePGMlnUtil(mDebugUtil_LAST);
		    tracenum(last_timer_1);
		)
	}

	last_timer_1 = next_timer_1;
   3f90c:	90 93 27 02 	sts	0x0227, r25
   3f910:	80 93 26 02 	sts	0x0226, r24
   3f914:	08 95       	ret

0003f916 <resetTick>:
}

void resetTick(void)
{
	TCNT1 = 0;
   3f916:	10 92 85 00 	sts	0x0085, r1
   3f91a:	10 92 84 00 	sts	0x0084, r1
	tick = 0;
   3f91e:	10 92 25 02 	sts	0x0225, r1
   3f922:	10 92 24 02 	sts	0x0224, r1
   3f926:	08 95       	ret

0003f928 <timedOut>:

uint8_t timedOut(void)
{
	// Never timeout if there is no code in Flash
#if (FLASHEND > 0x10000)
	if(pgm_read_word_far(0x0000) == 0xFFFF) return(0);
   3f928:	80 e0       	ldi	r24, 0x00	; 0
   3f92a:	90 e0       	ldi	r25, 0x00	; 0
   3f92c:	dc 01       	movw	r26, r24
   3f92e:	ab bf       	out	0x3b, r26	; 59
   3f930:	fc 01       	movw	r30, r24
   3f932:	87 91       	elpm	r24, Z+
   3f934:	96 91       	elpm	r25, Z
   3f936:	01 96       	adiw	r24, 0x01	; 1
   3f938:	41 f0       	breq	.+16     	; 0x3f94a <timedOut+0x22>
#else
	if(pgm_read_word_near(0x0000) == 0xFFFF) return(0);
#endif

	if(tick > TIMEOUT) return(1);
   3f93a:	81 e0       	ldi	r24, 0x01	; 1
   3f93c:	20 91 24 02 	lds	r18, 0x0224
   3f940:	30 91 25 02 	lds	r19, 0x0225
   3f944:	25 30       	cpi	r18, 0x05	; 5
   3f946:	31 05       	cpc	r19, r1
   3f948:	08 f4       	brcc	.+2      	; 0x3f94c <timedOut+0x24>

uint8_t timedOut(void)
{
	// Never timeout if there is no code in Flash
#if (FLASHEND > 0x10000)
	if(pgm_read_word_far(0x0000) == 0xFFFF) return(0);
   3f94a:	80 e0       	ldi	r24, 0x00	; 0
	if(pgm_read_word_near(0x0000) == 0xFFFF) return(0);
#endif

	if(tick > TIMEOUT) return(1);
	else return(0);
}
   3f94c:	08 95       	ret

0003f94e <processStk500boot>:
// 	return UART_DATA_REG;
// }


uint8_t processStk500boot(void)
{
   3f94e:	2f 92       	push	r2
   3f950:	3f 92       	push	r3
   3f952:	4f 92       	push	r4
   3f954:	5f 92       	push	r5
   3f956:	6f 92       	push	r6
   3f958:	7f 92       	push	r7
   3f95a:	8f 92       	push	r8
   3f95c:	9f 92       	push	r9
   3f95e:	af 92       	push	r10
   3f960:	bf 92       	push	r11
   3f962:	cf 92       	push	r12
   3f964:	df 92       	push	r13
   3f966:	ef 92       	push	r14
   3f968:	ff 92       	push	r15
   3f96a:	0f 93       	push	r16
   3f96c:	1f 93       	push	r17
   3f96e:	cf 93       	push	r28
   3f970:	df 93       	push	r29
   3f972:	cd b7       	in	r28, 0x3d	; 61
   3f974:	de b7       	in	r29, 0x3e	; 62
   3f976:	c0 52       	subi	r28, 0x20	; 32
   3f978:	d1 40       	sbci	r29, 0x01	; 1
   3f97a:	de bf       	out	0x3e, r29	; 62
   3f97c:	cd bf       	out	0x3d, r28	; 61
	address_t		address			=	0;
	address_t		eraseAddress	=	0;
	unsigned char	msgParseState;
	unsigned int	ii				=	0;
	unsigned char	checksum		=	0;
	unsigned char	seqNum			=	0;
   3f97e:	c2 5e       	subi	r28, 0xE2	; 226
   3f980:	de 4f       	sbci	r29, 0xFE	; 254
   3f982:	18 82       	st	Y, r1
   3f984:	ce 51       	subi	r28, 0x1E	; 30
   3f986:	d1 40       	sbci	r29, 0x01	; 1
{
	address_t		address			=	0;
	address_t		eraseAddress	=	0;
	unsigned char	msgParseState;
	unsigned int	ii				=	0;
	unsigned char	checksum		=	0;
   3f988:	81 2c       	mov	r8, r1
uint8_t processStk500boot(void)
{
	address_t		address			=	0;
	address_t		eraseAddress	=	0;
	unsigned char	msgParseState;
	unsigned int	ii				=	0;
   3f98a:	21 2c       	mov	r2, r1
   3f98c:	31 2c       	mov	r3, r1


uint8_t processStk500boot(void)
{
	address_t		address			=	0;
	address_t		eraseAddress	=	0;
   3f98e:	41 2c       	mov	r4, r1
   3f990:	51 2c       	mov	r5, r1
   3f992:	32 01       	movw	r6, r4
// }


uint8_t processStk500boot(void)
{
	address_t		address			=	0;
   3f994:	c1 2c       	mov	r12, r1
   3f996:	d1 2c       	mov	r13, r1
   3f998:	76 01       	movw	r14, r12
// 	return UART_DATA_REG;
// }


uint8_t processStk500boot(void)
{
   3f99a:	00 e0       	ldi	r16, 0x00	; 0
   3f99c:	10 e0       	ldi	r17, 0x00	; 0
				case ST_GET_CHECK:

					if(c == checksum) {
						msgParseState	=	ST_PROCESS;
					} else {
						msgParseState	=	ST_START;
   3f99e:	40 e0       	ldi	r20, 0x00	; 0
		msgParseState	=	ST_START;

		while(msgParseState != ST_PROCESS) {
// 			if(boot_state == 1) {
// 				boot_state	=	0;
 				c			=	getch();
   3f9a0:	c1 5e       	subi	r28, 0xE1	; 225
   3f9a2:	de 4f       	sbci	r29, 0xFE	; 254
   3f9a4:	48 83       	st	Y, r20
   3f9a6:	cf 51       	subi	r28, 0x1F	; 31
   3f9a8:	d1 40       	sbci	r29, 0x01	; 1
   3f9aa:	7d df       	rcall	.-262    	; 0x3f8a6 <getch>
// 			} else {
// 				//	c	=	recchar();
// 				c = recchar_timeout();
// 			}

			switch(msgParseState) {
   3f9ac:	c1 5e       	subi	r28, 0xE1	; 225
   3f9ae:	de 4f       	sbci	r29, 0xFE	; 254
   3f9b0:	48 81       	ld	r20, Y
   3f9b2:	cf 51       	subi	r28, 0x1F	; 31
   3f9b4:	d1 40       	sbci	r29, 0x01	; 1
   3f9b6:	43 30       	cpi	r20, 0x03	; 3
   3f9b8:	01 f1       	breq	.+64     	; 0x3f9fa <processStk500boot+0xac>
   3f9ba:	20 f4       	brcc	.+8      	; 0x3f9c4 <processStk500boot+0x76>
   3f9bc:	41 30       	cpi	r20, 0x01	; 1
   3f9be:	71 f0       	breq	.+28     	; 0x3f9dc <processStk500boot+0x8e>
   3f9c0:	38 f0       	brcs	.+14     	; 0x3f9d0 <processStk500boot+0x82>
   3f9c2:	14 c0       	rjmp	.+40     	; 0x3f9ec <processStk500boot+0x9e>
   3f9c4:	45 30       	cpi	r20, 0x05	; 5
   3f9c6:	21 f1       	breq	.+72     	; 0x3fa10 <processStk500boot+0xc2>
   3f9c8:	e0 f0       	brcs	.+56     	; 0x3fa02 <processStk500boot+0xb4>
   3f9ca:	46 30       	cpi	r20, 0x06	; 6
   3f9cc:	91 f1       	breq	.+100    	; 0x3fa32 <processStk500boot+0xe4>
   3f9ce:	7c c0       	rjmp	.+248    	; 0x3fac8 <processStk500boot+0x17a>
				case ST_START:

					if(c == MESSAGE_START) {
   3f9d0:	8b 31       	cpi	r24, 0x1B	; 27
   3f9d2:	31 f7       	brne	.-52     	; 0x3f9a0 <processStk500boot+0x52>
						msgParseState	=	ST_GET_SEQ_NUM;
						checksum		=	MESSAGE_START ^ 0;
   3f9d4:	8b e1       	ldi	r24, 0x1B	; 27
   3f9d6:	88 2e       	mov	r8, r24

			switch(msgParseState) {
				case ST_START:

					if(c == MESSAGE_START) {
						msgParseState	=	ST_GET_SEQ_NUM;
   3f9d8:	41 e0       	ldi	r20, 0x01	; 1
   3f9da:	e2 cf       	rjmp	.-60     	; 0x3f9a0 <processStk500boot+0x52>

				case ST_GET_SEQ_NUM:
#ifdef _FIX_ISSUE_505_
					seqNum			=	c;
					msgParseState	=	ST_MSG_SIZE_1;
					checksum		^=	c;
   3f9dc:	88 26       	eor	r8, r24
		msgParseState	=	ST_START;

		while(msgParseState != ST_PROCESS) {
// 			if(boot_state == 1) {
// 				boot_state	=	0;
 				c			=	getch();
   3f9de:	c2 5e       	subi	r28, 0xE2	; 226
   3f9e0:	de 4f       	sbci	r29, 0xFE	; 254
   3f9e2:	88 83       	st	Y, r24
   3f9e4:	ce 51       	subi	r28, 0x1E	; 30
   3f9e6:	d1 40       	sbci	r29, 0x01	; 1
					break;

				case ST_GET_SEQ_NUM:
#ifdef _FIX_ISSUE_505_
					seqNum			=	c;
					msgParseState	=	ST_MSG_SIZE_1;
   3f9e8:	42 e0       	ldi	r20, 0x02	; 2
					} else {
						msgParseState	=	ST_START;
					}

#endif
					break;
   3f9ea:	da cf       	rjmp	.-76     	; 0x3f9a0 <processStk500boot+0x52>

				case ST_MSG_SIZE_1:
					msgLength		=	c << 8;
   3f9ec:	08 2f       	mov	r16, r24
   3f9ee:	10 e0       	ldi	r17, 0x00	; 0
   3f9f0:	10 2f       	mov	r17, r16
   3f9f2:	00 27       	eor	r16, r16
					msgParseState	=	ST_MSG_SIZE_2;
					checksum		^=	c;
   3f9f4:	88 26       	eor	r8, r24
#endif
					break;

				case ST_MSG_SIZE_1:
					msgLength		=	c << 8;
					msgParseState	=	ST_MSG_SIZE_2;
   3f9f6:	43 e0       	ldi	r20, 0x03	; 3
					checksum		^=	c;
					break;
   3f9f8:	d3 cf       	rjmp	.-90     	; 0x3f9a0 <processStk500boot+0x52>

				case ST_MSG_SIZE_2:
					msgLength		|=	c;
   3f9fa:	08 2b       	or	r16, r24
					msgParseState	=	ST_GET_TOKEN;
					checksum		^=	c;
   3f9fc:	88 26       	eor	r8, r24
					checksum		^=	c;
					break;

				case ST_MSG_SIZE_2:
					msgLength		|=	c;
					msgParseState	=	ST_GET_TOKEN;
   3f9fe:	44 e0       	ldi	r20, 0x04	; 4
					checksum		^=	c;
					break;
   3fa00:	cf cf       	rjmp	.-98     	; 0x3f9a0 <processStk500boot+0x52>

				case ST_GET_TOKEN:

					if(c == TOKEN) {
   3fa02:	8e 30       	cpi	r24, 0x0E	; 14
   3fa04:	61 f6       	brne	.-104    	; 0x3f99e <processStk500boot+0x50>
						msgParseState	=	ST_GET_DATA;
						checksum		^=	c;
   3fa06:	88 26       	eor	r8, r24
						ii				=	0;
   3fa08:	21 2c       	mov	r2, r1
   3fa0a:	31 2c       	mov	r3, r1
					break;

				case ST_GET_TOKEN:

					if(c == TOKEN) {
						msgParseState	=	ST_GET_DATA;
   3fa0c:	45 e0       	ldi	r20, 0x05	; 5
   3fa0e:	c8 cf       	rjmp	.-112    	; 0x3f9a0 <processStk500boot+0x52>
					}

					break;

				case ST_GET_DATA:
					msgBuffer[ii++]	=	c;
   3fa10:	91 01       	movw	r18, r2
   3fa12:	2f 5f       	subi	r18, 0xFF	; 255
   3fa14:	3f 4f       	sbci	r19, 0xFF	; 255
   3fa16:	e1 e0       	ldi	r30, 0x01	; 1
   3fa18:	f0 e0       	ldi	r31, 0x00	; 0
   3fa1a:	ec 0f       	add	r30, r28
   3fa1c:	fd 1f       	adc	r31, r29
   3fa1e:	e2 0d       	add	r30, r2
   3fa20:	f3 1d       	adc	r31, r3
   3fa22:	80 83       	st	Z, r24
					checksum		^=	c;
   3fa24:	88 26       	eor	r8, r24

					if(ii == msgLength) {
   3fa26:	20 17       	cp	r18, r16
   3fa28:	31 07       	cpc	r19, r17
   3fa2a:	09 f4       	brne	.+2      	; 0x3fa2e <processStk500boot+0xe0>
   3fa2c:	2e c2       	rjmp	.+1116   	; 0x3fe8a <processStk500boot+0x53c>
   3fa2e:	19 01       	movw	r2, r18
   3fa30:	b7 cf       	rjmp	.-146    	; 0x3f9a0 <processStk500boot+0x52>

					break;

				case ST_GET_CHECK:

					if(c == checksum) {
   3fa32:	88 11       	cpse	r24, r8
   3fa34:	b4 cf       	rjmp	.-152    	; 0x3f99e <processStk500boot+0x50>

		/*
		 * Now process the STK500 commands, see Atmel Appnote AVR068
		 */

		switch(msgBuffer[0]) {
   3fa36:	49 81       	ldd	r20, Y+1	; 0x01
   3fa38:	43 31       	cpi	r20, 0x13	; 19
   3fa3a:	09 f4       	brne	.+2      	; 0x3fa3e <processStk500boot+0xf0>
   3fa3c:	e2 c0       	rjmp	.+452    	; 0x3fc02 <processStk500boot+0x2b4>
   3fa3e:	60 f5       	brcc	.+88     	; 0x3fa98 <processStk500boot+0x14a>
   3fa40:	46 30       	cpi	r20, 0x06	; 6
   3fa42:	09 f4       	brne	.+2      	; 0x3fa46 <processStk500boot+0xf8>
   3fa44:	cb c0       	rjmp	.+406    	; 0x3fbdc <processStk500boot+0x28e>
   3fa46:	00 f5       	brcc	.+64     	; 0x3fa88 <processStk500boot+0x13a>
   3fa48:	42 30       	cpi	r20, 0x02	; 2
   3fa4a:	09 f4       	brne	.+2      	; 0x3fa4e <processStk500boot+0x100>
   3fa4c:	41 c0       	rjmp	.+130    	; 0x3fad0 <processStk500boot+0x182>
   3fa4e:	43 30       	cpi	r20, 0x03	; 3
   3fa50:	09 f4       	brne	.+2      	; 0x3fa54 <processStk500boot+0x106>
   3fa52:	6b c0       	rjmp	.+214    	; 0x3fb2a <processStk500boot+0x1dc>
   3fa54:	41 30       	cpi	r20, 0x01	; 1
   3fa56:	09 f0       	breq	.+2      	; 0x3fa5a <processStk500boot+0x10c>
   3fa58:	96 c1       	rjmp	.+812    	; 0x3fd86 <processStk500boot+0x438>
			}
			break;
#endif
			case CMD_SIGN_ON:
				msgLength		=	11;
				msgBuffer[1] 	=	STATUS_CMD_OK;
   3fa5a:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2] 	=	8;
   3fa5c:	88 e0       	ldi	r24, 0x08	; 8
   3fa5e:	8b 83       	std	Y+3, r24	; 0x03
				msgBuffer[3] 	=	'A';
   3fa60:	81 e4       	ldi	r24, 0x41	; 65
   3fa62:	8c 83       	std	Y+4, r24	; 0x04
				msgBuffer[4] 	=	'V';
   3fa64:	86 e5       	ldi	r24, 0x56	; 86
   3fa66:	8d 83       	std	Y+5, r24	; 0x05
				msgBuffer[5] 	=	'R';
   3fa68:	82 e5       	ldi	r24, 0x52	; 82
   3fa6a:	8e 83       	std	Y+6, r24	; 0x06
				msgBuffer[6] 	=	'I';
   3fa6c:	89 e4       	ldi	r24, 0x49	; 73
   3fa6e:	8f 83       	std	Y+7, r24	; 0x07
				msgBuffer[7] 	=	'S';
   3fa70:	83 e5       	ldi	r24, 0x53	; 83
   3fa72:	88 87       	std	Y+8, r24	; 0x08
				msgBuffer[8] 	=	'P';
   3fa74:	80 e5       	ldi	r24, 0x50	; 80
   3fa76:	89 87       	std	Y+9, r24	; 0x09
				msgBuffer[9] 	=	'_';
   3fa78:	8f e5       	ldi	r24, 0x5F	; 95
   3fa7a:	8a 87       	std	Y+10, r24	; 0x0a
				msgBuffer[10]	=	'2';
   3fa7c:	82 e3       	ldi	r24, 0x32	; 50
   3fa7e:	8b 87       	std	Y+11, r24	; 0x0b
				break;
   3fa80:	20 e0       	ldi	r18, 0x00	; 0
				}
			}
			break;
#endif
			case CMD_SIGN_ON:
				msgLength		=	11;
   3fa82:	0b e0       	ldi	r16, 0x0B	; 11
   3fa84:	10 e0       	ldi	r17, 0x00	; 0
				msgBuffer[6] 	=	'I';
				msgBuffer[7] 	=	'S';
				msgBuffer[8] 	=	'P';
				msgBuffer[9] 	=	'_';
				msgBuffer[10]	=	'2';
				break;
   3fa86:	84 c1       	rjmp	.+776    	; 0x3fd90 <processStk500boot+0x442>

		/*
		 * Now process the STK500 commands, see Atmel Appnote AVR068
		 */

		switch(msgBuffer[0]) {
   3fa88:	41 31       	cpi	r20, 0x11	; 17
   3fa8a:	09 f4       	brne	.+2      	; 0x3fa8e <processStk500boot+0x140>
   3fa8c:	5b c0       	rjmp	.+182    	; 0x3fb44 <processStk500boot+0x1f6>
   3fa8e:	08 f0       	brcs	.+2      	; 0x3fa92 <processStk500boot+0x144>
   3fa90:	9c c0       	rjmp	.+312    	; 0x3fbca <processStk500boot+0x27c>
   3fa92:	40 31       	cpi	r20, 0x10	; 16
   3fa94:	e9 f0       	breq	.+58     	; 0x3fad0 <processStk500boot+0x182>
   3fa96:	77 c1       	rjmp	.+750    	; 0x3fd86 <processStk500boot+0x438>
   3fa98:	48 31       	cpi	r20, 0x18	; 24
   3fa9a:	09 f4       	brne	.+2      	; 0x3fa9e <processStk500boot+0x150>
   3fa9c:	6e c0       	rjmp	.+220    	; 0x3fb7a <processStk500boot+0x22c>
   3fa9e:	48 f4       	brcc	.+18     	; 0x3fab2 <processStk500boot+0x164>
   3faa0:	45 31       	cpi	r20, 0x15	; 21
   3faa2:	09 f4       	brne	.+2      	; 0x3faa6 <processStk500boot+0x158>
   3faa4:	ae c0       	rjmp	.+348    	; 0x3fc02 <processStk500boot+0x2b4>
   3faa6:	08 f4       	brcc	.+2      	; 0x3faaa <processStk500boot+0x15c>
   3faa8:	22 c1       	rjmp	.+580    	; 0x3fcee <processStk500boot+0x3a0>
   3faaa:	46 31       	cpi	r20, 0x16	; 22
   3faac:	09 f4       	brne	.+2      	; 0x3fab0 <processStk500boot+0x162>
   3faae:	1f c1       	rjmp	.+574    	; 0x3fcee <processStk500boot+0x3a0>
   3fab0:	6a c1       	rjmp	.+724    	; 0x3fd86 <processStk500boot+0x438>
   3fab2:	4a 31       	cpi	r20, 0x1A	; 26
   3fab4:	09 f4       	brne	.+2      	; 0x3fab8 <processStk500boot+0x16a>
   3fab6:	54 c0       	rjmp	.+168    	; 0x3fb60 <processStk500boot+0x212>
   3fab8:	08 f4       	brcc	.+2      	; 0x3fabc <processStk500boot+0x16e>
   3faba:	75 c0       	rjmp	.+234    	; 0x3fba6 <processStk500boot+0x258>
   3fabc:	4b 31       	cpi	r20, 0x1B	; 27
   3fabe:	09 f4       	brne	.+2      	; 0x3fac2 <processStk500boot+0x174>
   3fac0:	44 c0       	rjmp	.+136    	; 0x3fb4a <processStk500boot+0x1fc>
   3fac2:	4d 31       	cpi	r20, 0x1D	; 29
   3fac4:	39 f0       	breq	.+14     	; 0x3fad4 <processStk500boot+0x186>
   3fac6:	5f c1       	rjmp	.+702    	; 0x3fd86 <processStk500boot+0x438>
		/*
		 * Collect received bytes to a complete message
		 */
		msgParseState	=	ST_START;

		while(msgParseState != ST_PROCESS) {
   3fac8:	47 30       	cpi	r20, 0x07	; 7
   3faca:	09 f4       	brne	.+2      	; 0x3face <processStk500boot+0x180>
   3facc:	b4 cf       	rjmp	.-152    	; 0x3fa36 <processStk500boot+0xe8>
   3face:	68 cf       	rjmp	.-304    	; 0x3f9a0 <processStk500boot+0x52>

		/*
		 * Now process the STK500 commands, see Atmel Appnote AVR068
		 */

		switch(msgBuffer[0]) {
   3fad0:	20 e0       	ldi	r18, 0x00	; 0
   3fad2:	39 c0       	rjmp	.+114    	; 0x3fb46 <processStk500boot+0x1f8>
#ifndef REMOVE_CMD_SPI_MULTI
			case CMD_SPI_MULTI: {
				unsigned char answerByte;
				unsigned char flag = 0;

				if(msgBuffer[4] == 0x30) {
   3fad4:	8d 81       	ldd	r24, Y+5	; 0x05
   3fad6:	80 33       	cpi	r24, 0x30	; 48
   3fad8:	39 f4       	brne	.+14     	; 0x3fae8 <processStk500boot+0x19a>
					unsigned char signatureIndex	=	msgBuffer[6];
   3fada:	9f 81       	ldd	r25, Y+7	; 0x07

					if(signatureIndex == 0) {
   3fadc:	99 23       	and	r25, r25
   3fade:	b1 f0       	breq	.+44     	; 0x3fb0c <processStk500boot+0x1be>
						//answerByte	=	(SIGNATURE_BYTES >> 16) & 0x000000FF;
						answerByte	=	SIGNATURE_0;
					} else if(signatureIndex == 1) {
   3fae0:	91 30       	cpi	r25, 0x01	; 1
   3fae2:	b1 f4       	brne	.+44     	; 0x3fb10 <processStk500boot+0x1c2>
						//answerByte	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
						answerByte	=	SIGNATURE_1;
   3fae4:	98 e9       	ldi	r25, 0x98	; 152
   3fae6:	17 c0       	rjmp	.+46     	; 0x3fb16 <processStk500boot+0x1c8>
					} else {
						//answerByte	=	SIGNATURE_BYTES & 0x000000FF;
						answerByte	=	SIGNATURE_2;
					}
				} else if(msgBuffer[4] & 0x50) {
   3fae8:	98 2f       	mov	r25, r24
   3faea:	90 75       	andi	r25, 0x50	; 80
   3faec:	99 f0       	breq	.+38     	; 0x3fb14 <processStk500boot+0x1c6>
					//	Issue 544: 	stk500v2 bootloader doesn't support reading fuses
					//	I cant find the docs that say what these are supposed to be but this was figured out by trial and error
					//	answerByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
					//	answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
					//	answerByte	=	boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS);
					if(msgBuffer[4] == 0x50) {
   3faee:	80 35       	cpi	r24, 0x50	; 80
   3faf0:	21 f4       	brne	.+8      	; 0x3fafa <processStk500boot+0x1ac>
						answerByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
   3faf2:	99 e0       	ldi	r25, 0x09	; 9
   3faf4:	e0 e0       	ldi	r30, 0x00	; 0
   3faf6:	f0 e0       	ldi	r31, 0x00	; 0
   3faf8:	05 c0       	rjmp	.+10     	; 0x3fb04 <processStk500boot+0x1b6>
					} else if(msgBuffer[4] == 0x58) {
   3fafa:	88 35       	cpi	r24, 0x58	; 88
   3fafc:	59 f4       	brne	.+22     	; 0x3fb14 <processStk500boot+0x1c6>
						answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
   3fafe:	e3 e0       	ldi	r30, 0x03	; 3
   3fb00:	f0 e0       	ldi	r31, 0x00	; 0
   3fb02:	99 e0       	ldi	r25, 0x09	; 9
   3fb04:	90 93 57 00 	sts	0x0057, r25
   3fb08:	94 91       	lpm	r25, Z
   3fb0a:	05 c0       	rjmp	.+10     	; 0x3fb16 <processStk500boot+0x1c8>
				if(msgBuffer[4] == 0x30) {
					unsigned char signatureIndex	=	msgBuffer[6];

					if(signatureIndex == 0) {
						//answerByte	=	(SIGNATURE_BYTES >> 16) & 0x000000FF;
						answerByte	=	SIGNATURE_0;
   3fb0c:	9e e1       	ldi	r25, 0x1E	; 30
   3fb0e:	03 c0       	rjmp	.+6      	; 0x3fb16 <processStk500boot+0x1c8>
					} else if(signatureIndex == 1) {
						//answerByte	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
						answerByte	=	SIGNATURE_1;
					} else {
						//answerByte	=	SIGNATURE_BYTES & 0x000000FF;
						answerByte	=	SIGNATURE_2;
   3fb10:	91 e0       	ldi	r25, 0x01	; 1
   3fb12:	01 c0       	rjmp	.+2      	; 0x3fb16 <processStk500boot+0x1c8>
						answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
					} else {
						answerByte	=	0;
					}
				} else {
					answerByte	=	0; // for all others command are not implemented, return dummy value for AVRDUDE happy <Worapoht>
   3fb14:	90 e0       	ldi	r25, 0x00	; 0
				}

				if(!flag) {
					msgLength		=	7;
					msgBuffer[1]	=	STATUS_CMD_OK;
   3fb16:	1a 82       	std	Y+2, r1	; 0x02
					msgBuffer[2]	=	0;
   3fb18:	1b 82       	std	Y+3, r1	; 0x03
					msgBuffer[3]	=	msgBuffer[4];
   3fb1a:	8c 83       	std	Y+4, r24	; 0x04
					msgBuffer[4]	=	0;
   3fb1c:	1d 82       	std	Y+5, r1	; 0x05
					msgBuffer[5]	=	answerByte;
   3fb1e:	9e 83       	std	Y+6, r25	; 0x06
					msgBuffer[6]	=	STATUS_CMD_OK;
   3fb20:	1f 82       	std	Y+7, r1	; 0x07
   3fb22:	20 e0       	ldi	r18, 0x00	; 0
				} else {
					answerByte	=	0; // for all others command are not implemented, return dummy value for AVRDUDE happy <Worapoht>
				}

				if(!flag) {
					msgLength		=	7;
   3fb24:	07 e0       	ldi	r16, 0x07	; 7
   3fb26:	10 e0       	ldi	r17, 0x00	; 0
   3fb28:	33 c1       	rjmp	.+614    	; 0x3fd90 <processStk500boot+0x442>
   3fb2a:	ea 81       	ldd	r30, Y+2	; 0x02
   3fb2c:	e0 59       	subi	r30, 0x90	; 144
   3fb2e:	e3 30       	cpi	r30, 0x03	; 3
   3fb30:	28 f4       	brcc	.+10     	; 0x3fb3c <processStk500boot+0x1ee>
   3fb32:	f0 e0       	ldi	r31, 0x00	; 0
   3fb34:	e4 5e       	subi	r30, 0xE4	; 228
   3fb36:	fd 4f       	sbci	r31, 0xFD	; 253
   3fb38:	80 81       	ld	r24, Z
   3fb3a:	01 c0       	rjmp	.+2      	; 0x3fb3e <processStk500boot+0x1f0>
				break;

			case CMD_GET_PARAMETER: {
				unsigned char value;

				switch(msgBuffer[1]) {
   3fb3c:	80 e0       	ldi	r24, 0x00	; 0
						value	=	0;
						break;
				}

				msgLength		=	3;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3fb3e:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2]	=	value;
   3fb40:	8b 83       	std	Y+3, r24	; 0x03
   3fb42:	3f c0       	rjmp	.+126    	; 0x3fbc2 <processStk500boot+0x274>
			}
			break;

			case CMD_LEAVE_PROGMODE_ISP:
				isLeave	=	1;
   3fb44:	21 e0       	ldi	r18, 0x01	; 1
				//	fall thru

			case CMD_SET_PARAMETER:
			case CMD_ENTER_PROGMODE_ISP:
				msgLength		=	2;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3fb46:	1a 82       	std	Y+2, r1	; 0x02
   3fb48:	21 c1       	rjmp	.+578    	; 0x3fd8c <processStk500boot+0x43e>
				break;

			case CMD_READ_SIGNATURE_ISP: {
				unsigned char signatureIndex	=	msgBuffer[4];
   3fb4a:	8d 81       	ldd	r24, Y+5	; 0x05
				unsigned char signature;

				if(signatureIndex == 0)
   3fb4c:	88 23       	and	r24, r24
   3fb4e:	21 f0       	breq	.+8      	; 0x3fb58 <processStk500boot+0x20a>
					//signature	=	(SIGNATURE_BYTES >> 16) & 0x000000FF;
					signature	=	SIGNATURE_0;
				else if(signatureIndex == 1)
   3fb50:	81 30       	cpi	r24, 0x01	; 1
   3fb52:	21 f4       	brne	.+8      	; 0x3fb5c <processStk500boot+0x20e>
					//signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
					signature	=	SIGNATURE_1;
   3fb54:	88 e9       	ldi	r24, 0x98	; 152
   3fb56:	24 c0       	rjmp	.+72     	; 0x3fba0 <processStk500boot+0x252>
				unsigned char signatureIndex	=	msgBuffer[4];
				unsigned char signature;

				if(signatureIndex == 0)
					//signature	=	(SIGNATURE_BYTES >> 16) & 0x000000FF;
					signature	=	SIGNATURE_0;
   3fb58:	8e e1       	ldi	r24, 0x1E	; 30
   3fb5a:	22 c0       	rjmp	.+68     	; 0x3fba0 <processStk500boot+0x252>
				else if(signatureIndex == 1)
					//signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
					signature	=	SIGNATURE_1;
				else
					//signature	=	SIGNATURE_BYTES & 0x000000FF;
					signature	=	SIGNATURE_2;
   3fb5c:	81 e0       	ldi	r24, 0x01	; 1
   3fb5e:	20 c0       	rjmp	.+64     	; 0x3fba0 <processStk500boot+0x252>
			}
			break;

			case CMD_READ_LOCK_ISP:
				msgLength		=	4;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3fb60:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2]	=	boot_lock_fuse_bits_get(GET_LOCK_BITS);
   3fb62:	e1 e0       	ldi	r30, 0x01	; 1
   3fb64:	f0 e0       	ldi	r31, 0x00	; 0
   3fb66:	89 e0       	ldi	r24, 0x09	; 9
   3fb68:	80 93 57 00 	sts	0x0057, r24
   3fb6c:	e4 91       	lpm	r30, Z
   3fb6e:	eb 83       	std	Y+3, r30	; 0x03
				msgBuffer[3]	=	STATUS_CMD_OK;
   3fb70:	1c 82       	std	Y+4, r1	; 0x04
				break;
   3fb72:	20 e0       	ldi	r18, 0x00	; 0
				msgBuffer[3]	=	STATUS_CMD_OK;
			}
			break;

			case CMD_READ_LOCK_ISP:
				msgLength		=	4;
   3fb74:	04 e0       	ldi	r16, 0x04	; 4
   3fb76:	10 e0       	ldi	r17, 0x00	; 0
				msgBuffer[1]	=	STATUS_CMD_OK;
				msgBuffer[2]	=	boot_lock_fuse_bits_get(GET_LOCK_BITS);
				msgBuffer[3]	=	STATUS_CMD_OK;
				break;
   3fb78:	0b c1       	rjmp	.+534    	; 0x3fd90 <processStk500boot+0x442>

			case CMD_READ_FUSE_ISP: {
				unsigned char fuseBits;

				if(msgBuffer[2] == 0x50) {
   3fb7a:	8b 81       	ldd	r24, Y+3	; 0x03
   3fb7c:	80 35       	cpi	r24, 0x50	; 80
   3fb7e:	51 f4       	brne	.+20     	; 0x3fb94 <processStk500boot+0x246>
					if(msgBuffer[3] == 0x08)
   3fb80:	8c 81       	ldd	r24, Y+4	; 0x04
   3fb82:	88 30       	cpi	r24, 0x08	; 8
   3fb84:	19 f4       	brne	.+6      	; 0x3fb8c <processStk500boot+0x23e>
						fuseBits	=	boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS);
   3fb86:	e2 e0       	ldi	r30, 0x02	; 2
   3fb88:	f0 e0       	ldi	r31, 0x00	; 0
   3fb8a:	06 c0       	rjmp	.+12     	; 0x3fb98 <processStk500boot+0x24a>
					else
						fuseBits	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
   3fb8c:	89 e0       	ldi	r24, 0x09	; 9
   3fb8e:	e0 e0       	ldi	r30, 0x00	; 0
   3fb90:	f0 e0       	ldi	r31, 0x00	; 0
   3fb92:	03 c0       	rjmp	.+6      	; 0x3fb9a <processStk500boot+0x24c>
				} else {
					fuseBits	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
   3fb94:	e3 e0       	ldi	r30, 0x03	; 3
   3fb96:	f0 e0       	ldi	r31, 0x00	; 0
   3fb98:	89 e0       	ldi	r24, 0x09	; 9
   3fb9a:	80 93 57 00 	sts	0x0057, r24
   3fb9e:	84 91       	lpm	r24, Z
				}

				msgLength		=	4;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3fba0:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2]	=	fuseBits;
   3fba2:	8b 83       	std	Y+3, r24	; 0x03
   3fba4:	e5 cf       	rjmp	.-54     	; 0x3fb70 <processStk500boot+0x222>

#ifndef REMOVE_PROGRAM_LOCK_BIT_SUPPORT
			case CMD_PROGRAM_LOCK_ISP: {
				unsigned char lockBits	=	msgBuffer[4];

				lockBits	=	(~lockBits) & 0x3C;	// mask BLBxx bits
   3fba6:	8d 81       	ldd	r24, Y+5	; 0x05
				boot_lock_bits_set(lockBits);		// and program it
   3fba8:	83 6c       	ori	r24, 0xC3	; 195
   3fbaa:	99 e0       	ldi	r25, 0x09	; 9
   3fbac:	e1 e0       	ldi	r30, 0x01	; 1
   3fbae:	f0 e0       	ldi	r31, 0x00	; 0
   3fbb0:	08 2e       	mov	r0, r24
   3fbb2:	90 93 57 00 	sts	0x0057, r25
   3fbb6:	e8 95       	spm
				boot_spm_busy_wait();
   3fbb8:	07 b6       	in	r0, 0x37	; 55
   3fbba:	00 fc       	sbrc	r0, 0
   3fbbc:	fd cf       	rjmp	.-6      	; 0x3fbb8 <processStk500boot+0x26a>

				msgLength		=	3;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3fbbe:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2]	=	STATUS_CMD_OK;
   3fbc0:	1b 82       	std	Y+3, r1	; 0x03
			}
			break;
   3fbc2:	20 e0       	ldi	r18, 0x00	; 0

				lockBits	=	(~lockBits) & 0x3C;	// mask BLBxx bits
				boot_lock_bits_set(lockBits);		// and program it
				boot_spm_busy_wait();

				msgLength		=	3;
   3fbc4:	03 e0       	ldi	r16, 0x03	; 3
   3fbc6:	10 e0       	ldi	r17, 0x00	; 0
				msgBuffer[1]	=	STATUS_CMD_OK;
				msgBuffer[2]	=	STATUS_CMD_OK;
			}
			break;
   3fbc8:	e3 c0       	rjmp	.+454    	; 0x3fd90 <processStk500boot+0x442>
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress	=	0;
				msgLength		=	2;
				//	msgBuffer[1]	=	STATUS_CMD_OK;
				msgBuffer[1]	=	STATUS_CMD_FAILED;	//	isue 543, return FAILED instead of OK
   3fbca:	80 ec       	ldi	r24, 0xC0	; 192
   3fbcc:	8a 83       	std	Y+2, r24	; 0x02
				break;
   3fbce:	20 e0       	ldi	r18, 0x00	; 0
			}
			break;
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress	=	0;
				msgLength		=	2;
   3fbd0:	02 e0       	ldi	r16, 0x02	; 2
   3fbd2:	10 e0       	ldi	r17, 0x00	; 0
				msgBuffer[2]	=	STATUS_CMD_OK;
			}
			break;
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress	=	0;
   3fbd4:	41 2c       	mov	r4, r1
   3fbd6:	51 2c       	mov	r5, r1
   3fbd8:	32 01       	movw	r6, r4
				msgLength		=	2;
				//	msgBuffer[1]	=	STATUS_CMD_OK;
				msgBuffer[1]	=	STATUS_CMD_FAILED;	//	isue 543, return FAILED instead of OK
				break;
   3fbda:	da c0       	rjmp	.+436    	; 0x3fd90 <processStk500boot+0x442>

			case CMD_LOAD_ADDRESS:
#if defined(RAMPZ)
				address	=	(((address_t)(msgBuffer[1]) << 24) | ((address_t)(msgBuffer[2]) << 16) | ((address_t)(msgBuffer[3]) << 8) | (msgBuffer[4])) << 1;
   3fbdc:	8a 81       	ldd	r24, Y+2	; 0x02
   3fbde:	cb 80       	ldd	r12, Y+3	; 0x03
   3fbe0:	d1 2c       	mov	r13, r1
   3fbe2:	e1 2c       	mov	r14, r1
   3fbe4:	f1 2c       	mov	r15, r1
   3fbe6:	76 01       	movw	r14, r12
   3fbe8:	dd 24       	eor	r13, r13
   3fbea:	cc 24       	eor	r12, r12
   3fbec:	f8 2a       	or	r15, r24
   3fbee:	8d 81       	ldd	r24, Y+5	; 0x05
   3fbf0:	c8 2a       	or	r12, r24
   3fbf2:	8c 81       	ldd	r24, Y+4	; 0x04
   3fbf4:	d8 2a       	or	r13, r24
   3fbf6:	cc 0c       	add	r12, r12
   3fbf8:	dd 1c       	adc	r13, r13
   3fbfa:	ee 1c       	adc	r14, r14
   3fbfc:	ff 1c       	adc	r15, r15
#else
				address	=	(((msgBuffer[3]) << 8) | (msgBuffer[4])) << 1;		//convert word to byte address
#endif
				msgLength		=	2;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3fbfe:	1a 82       	std	Y+2, r1	; 0x02
   3fc00:	c4 c0       	rjmp	.+392    	; 0x3fd8a <processStk500boot+0x43c>
				break;

			case CMD_PROGRAM_FLASH_ISP:
			case CMD_PROGRAM_EEPROM_ISP: {
				unsigned int	size	=	((msgBuffer[1]) << 8) | msgBuffer[2];
   3fc02:	8a 81       	ldd	r24, Y+2	; 0x02
   3fc04:	90 e0       	ldi	r25, 0x00	; 0
   3fc06:	98 2f       	mov	r25, r24
   3fc08:	88 27       	eor	r24, r24
   3fc0a:	2b 81       	ldd	r18, Y+3	; 0x03
   3fc0c:	82 2b       	or	r24, r18
				unsigned int	data;
				unsigned char	highByte, lowByte;
				address_t		tempaddress	=	address;


				if(msgBuffer[0] == CMD_PROGRAM_FLASH_ISP) {
   3fc0e:	43 31       	cpi	r20, 0x13	; 19
   3fc10:	09 f0       	breq	.+2      	; 0x3fc14 <processStk500boot+0x2c6>
   3fc12:	44 c0       	rjmp	.+136    	; 0x3fc9c <processStk500boot+0x34e>
					// erase only main section (bootloader protection)
					if(eraseAddress < APP_END) {
   3fc14:	41 14       	cp	r4, r1
   3fc16:	f0 ec       	ldi	r31, 0xC0	; 192
   3fc18:	5f 06       	cpc	r5, r31
   3fc1a:	f3 e0       	ldi	r31, 0x03	; 3
   3fc1c:	6f 06       	cpc	r6, r31
   3fc1e:	71 04       	cpc	r7, r1
   3fc20:	70 f4       	brcc	.+28     	; 0x3fc3e <processStk500boot+0x2f0>
						boot_page_erase(eraseAddress);	// Perform page erase
   3fc22:	23 e0       	ldi	r18, 0x03	; 3
   3fc24:	f2 01       	movw	r30, r4
   3fc26:	60 92 5b 00 	sts	0x005B, r6
   3fc2a:	20 93 57 00 	sts	0x0057, r18
   3fc2e:	e8 95       	spm
						boot_spm_busy_wait();		// Wait until the memory is erased.
   3fc30:	07 b6       	in	r0, 0x37	; 55
   3fc32:	00 fc       	sbrc	r0, 0
   3fc34:	fd cf       	rjmp	.-6      	; 0x3fc30 <processStk500boot+0x2e2>
						eraseAddress += SPM_PAGESIZE;	// point to next page to be erase
   3fc36:	4f ef       	ldi	r20, 0xFF	; 255
   3fc38:	54 1a       	sub	r5, r20
   3fc3a:	64 0a       	sbc	r6, r20
   3fc3c:	74 0a       	sbc	r7, r20
   3fc3e:	4b 85       	ldd	r20, Y+11	; 0x0b
				else if(signatureIndex == 1)
					//signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
					signature	=	SIGNATURE_1;
				else
					//signature	=	SIGNATURE_BYTES & 0x000000FF;
					signature	=	SIGNATURE_2;
   3fc40:	46 01       	movw	r8, r12
   3fc42:	57 01       	movw	r10, r14
   3fc44:	9e 01       	movw	r18, r28
   3fc46:	25 5f       	subi	r18, 0xF5	; 245
   3fc48:	3f 4f       	sbci	r19, 0xFF	; 255
   3fc4a:	d9 01       	movw	r26, r18
   3fc4c:	12 96       	adiw	r26, 0x02	; 2
   3fc4e:	9d 01       	movw	r18, r26
   3fc50:	fd 01       	movw	r30, r26
   3fc52:	31 97       	sbiw	r30, 0x01	; 1
					/* Write FLASH */
					do {
						lowByte		=	*p++;
						highByte 	=	*p++;

						data		=	(highByte << 8) | lowByte;
   3fc54:	60 81       	ld	r22, Z
   3fc56:	50 e0       	ldi	r21, 0x00	; 0
   3fc58:	56 2b       	or	r21, r22
						boot_page_fill(address, data);
   3fc5a:	61 e0       	ldi	r22, 0x01	; 1
   3fc5c:	0a 01       	movw	r0, r20
   3fc5e:	f4 01       	movw	r30, r8
   3fc60:	a0 92 5b 00 	sts	0x005B, r10
   3fc64:	60 93 57 00 	sts	0x0057, r22
   3fc68:	e8 95       	spm
   3fc6a:	11 24       	eor	r1, r1

						address	=	address + 2;	// Select next word in memory
   3fc6c:	e2 e0       	ldi	r30, 0x02	; 2
   3fc6e:	8e 0e       	add	r8, r30
   3fc70:	91 1c       	adc	r9, r1
   3fc72:	a1 1c       	adc	r10, r1
   3fc74:	b1 1c       	adc	r11, r1
						size	-=	2;				// Reduce number of bytes to write by two
   3fc76:	02 97       	sbiw	r24, 0x02	; 2
					} while(size);					// Loop until all bytes written
   3fc78:	11 f0       	breq	.+4      	; 0x3fc7e <processStk500boot+0x330>
					}

					/* Write FLASH */
					do {
						lowByte		=	*p++;
						highByte 	=	*p++;
   3fc7a:	4c 91       	ld	r20, X
   3fc7c:	e6 cf       	rjmp	.-52     	; 0x3fc4a <processStk500boot+0x2fc>

						address	=	address + 2;	// Select next word in memory
						size	-=	2;				// Reduce number of bytes to write by two
					} while(size);					// Loop until all bytes written

					boot_page_write(tempaddress);
   3fc7e:	85 e0       	ldi	r24, 0x05	; 5
   3fc80:	f6 01       	movw	r30, r12
   3fc82:	e0 92 5b 00 	sts	0x005B, r14
   3fc86:	80 93 57 00 	sts	0x0057, r24
   3fc8a:	e8 95       	spm
					boot_spm_busy_wait();
   3fc8c:	07 b6       	in	r0, 0x37	; 55
   3fc8e:	00 fc       	sbrc	r0, 0
   3fc90:	fd cf       	rjmp	.-6      	; 0x3fc8c <processStk500boot+0x33e>
					boot_rww_enable();				// Re-enable the RWW section
   3fc92:	81 e1       	ldi	r24, 0x11	; 17
   3fc94:	80 93 57 00 	sts	0x0057, r24
   3fc98:	e8 95       	spm
   3fc9a:	25 c0       	rjmp	.+74     	; 0x3fce6 <processStk500boot+0x398>
   3fc9c:	fe 01       	movw	r30, r28
   3fc9e:	3b 96       	adiw	r30, 0x0b	; 11
				unsigned int	data;
				unsigned char	highByte, lowByte;
				address_t		tempaddress	=	address;


				if(msgBuffer[0] == CMD_PROGRAM_FLASH_ISP) {
   3fca0:	9c 01       	movw	r18, r24
   3fca2:	b7 01       	movw	r22, r14
   3fca4:	a6 01       	movw	r20, r12
					//	issue 543, this should work, It has not been tested.
					//	#if (!defined(__AVR_ATmega1280__) && !defined(__AVR_ATmega2560__)  && !defined(__AVR_ATmega2561__)  && !defined(__AVR_ATmega1284P__)  && !defined(__AVR_ATmega640__))
#if (defined(EEARL) && defined(EEARH)  && defined(EEMWE)  && defined(EEWE)  && defined(EEDR))
					/* write EEPROM */
					do {
						EEARL	=	address;			// Setup EEPROM address
   3fca6:	41 bd       	out	0x21, r20	; 33
						EEARH	=	(address >> 8);
   3fca8:	85 2e       	mov	r8, r21
   3fcaa:	96 2e       	mov	r9, r22
   3fcac:	a7 2e       	mov	r10, r23
   3fcae:	bb 24       	eor	r11, r11
   3fcb0:	82 bc       	out	0x22, r8	; 34
						address++;						// Select next EEPROM byte
   3fcb2:	4f 5f       	subi	r20, 0xFF	; 255
   3fcb4:	5f 4f       	sbci	r21, 0xFF	; 255
   3fcb6:	6f 4f       	sbci	r22, 0xFF	; 255
   3fcb8:	7f 4f       	sbci	r23, 0xFF	; 255

						EEDR	=	*p++;				// get byte from buffer
   3fcba:	a1 91       	ld	r26, Z+
   3fcbc:	a0 bd       	out	0x20, r26	; 32
						EECR	|=	(1 << EEMWE);			// Write data into EEPROM
   3fcbe:	fa 9a       	sbi	0x1f, 2	; 31
						EECR	|=	(1 << EEWE);
   3fcc0:	f9 9a       	sbi	0x1f, 1	; 31

						while(EECR & (1 << EEWE))
   3fcc2:	f9 99       	sbic	0x1f, 1	; 31
   3fcc4:	fe cf       	rjmp	.-4      	; 0x3fcc2 <processStk500boot+0x374>
							;	// Wait for write operation to finish

						size--;						// Decrease number of bytes to write
   3fcc6:	21 50       	subi	r18, 0x01	; 1
   3fcc8:	31 09       	sbc	r19, r1
					} while(size);					// Loop until all bytes written
   3fcca:	69 f7       	brne	.-38     	; 0x3fca6 <processStk500boot+0x358>
   3fccc:	01 97       	sbiw	r24, 0x01	; 1
   3fcce:	4c 01       	movw	r8, r24
   3fcd0:	a1 2c       	mov	r10, r1
   3fcd2:	b1 2c       	mov	r11, r1
   3fcd4:	ff ef       	ldi	r31, 0xFF	; 255
   3fcd6:	8f 1a       	sub	r8, r31
   3fcd8:	9f 0a       	sbc	r9, r31
   3fcda:	af 0a       	sbc	r10, r31
   3fcdc:	bf 0a       	sbc	r11, r31
   3fcde:	8c 0c       	add	r8, r12
   3fce0:	9d 1c       	adc	r9, r13
   3fce2:	ae 1c       	adc	r10, r14
   3fce4:	bf 1c       	adc	r11, r15

#endif
				}

				msgLength	=	2;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3fce6:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;
   3fce8:	75 01       	movw	r14, r10
   3fcea:	64 01       	movw	r12, r8
   3fcec:	4e c0       	rjmp	.+156    	; 0x3fd8a <processStk500boot+0x43c>

			case CMD_READ_FLASH_ISP:
			case CMD_READ_EEPROM_ISP: {
				unsigned int	size	=	((msgBuffer[1]) << 8) | msgBuffer[2];
   3fcee:	2a 81       	ldd	r18, Y+2	; 0x02
   3fcf0:	30 e0       	ldi	r19, 0x00	; 0
   3fcf2:	32 2f       	mov	r19, r18
   3fcf4:	22 27       	eor	r18, r18
   3fcf6:	8b 81       	ldd	r24, Y+3	; 0x03
   3fcf8:	28 2b       	or	r18, r24
				unsigned char*	p		=	msgBuffer + 1;
				msgLength				=	size + 3;
   3fcfa:	89 01       	movw	r16, r18
   3fcfc:	0d 5f       	subi	r16, 0xFD	; 253
   3fcfe:	1f 4f       	sbci	r17, 0xFF	; 255

				*p++	=	STATUS_CMD_OK;
   3fd00:	1a 82       	std	Y+2, r1	; 0x02

				if(msgBuffer[0] == CMD_READ_FLASH_ISP) {
   3fd02:	44 31       	cpi	r20, 0x14	; 20
   3fd04:	a1 f4       	brne	.+40     	; 0x3fd2e <processStk500boot+0x3e0>
   3fd06:	de 01       	movw	r26, r28
   3fd08:	13 96       	adiw	r26, 0x03	; 3

					// Read FLASH
					do {
						//#if defined(RAMPZ)
#if (FLASHEND > 0x10000)
						data	=	pgm_read_word_far(address);
   3fd0a:	eb be       	out	0x3b, r14	; 59
   3fd0c:	f6 01       	movw	r30, r12
   3fd0e:	87 91       	elpm	r24, Z+
   3fd10:	96 91       	elpm	r25, Z
#else
						data	=	pgm_read_word_near(address);
#endif
						*p++	=	(unsigned char)data;		//LSB
   3fd12:	8c 93       	st	X, r24
   3fd14:	12 96       	adiw	r26, 0x02	; 2
   3fd16:	fd 01       	movw	r30, r26
   3fd18:	31 97       	sbiw	r30, 0x01	; 1
						*p++	=	(unsigned char)(data >> 8);	//MSB
   3fd1a:	90 83       	st	Z, r25
						address	+=	2;							// Select next word in memory
   3fd1c:	42 e0       	ldi	r20, 0x02	; 2
   3fd1e:	c4 0e       	add	r12, r20
   3fd20:	d1 1c       	adc	r13, r1
   3fd22:	e1 1c       	adc	r14, r1
   3fd24:	f1 1c       	adc	r15, r1
						size	-=	2;
   3fd26:	22 50       	subi	r18, 0x02	; 2
   3fd28:	31 09       	sbc	r19, r1
					} while(size);
   3fd2a:	79 f7       	brne	.-34     	; 0x3fd0a <processStk500boot+0x3bc>
   3fd2c:	29 c0       	rjmp	.+82     	; 0x3fd80 <processStk500boot+0x432>
   3fd2e:	ce 01       	movw	r24, r28
   3fd30:	03 96       	adiw	r24, 0x03	; 3
   3fd32:	5c 01       	movw	r10, r24
				unsigned char*	p		=	msgBuffer + 1;
				msgLength				=	size + 3;

				*p++	=	STATUS_CMD_OK;

				if(msgBuffer[0] == CMD_READ_FLASH_ISP) {
   3fd34:	49 01       	movw	r8, r18
   3fd36:	d7 01       	movw	r26, r14
   3fd38:	c6 01       	movw	r24, r12
						size	-=	2;
					} while(size);
				} else {
					/* Read EEPROM */
					do {
						EEARL	=	address;			// Setup EEPROM address
   3fd3a:	81 bd       	out	0x21, r24	; 33
						EEARH	=	((address >> 8));
   3fd3c:	49 2f       	mov	r20, r25
   3fd3e:	5a 2f       	mov	r21, r26
   3fd40:	6b 2f       	mov	r22, r27
   3fd42:	77 27       	eor	r23, r23
   3fd44:	42 bd       	out	0x22, r20	; 34
						address++;					// Select next EEPROM byte
   3fd46:	01 96       	adiw	r24, 0x01	; 1
   3fd48:	a1 1d       	adc	r26, r1
   3fd4a:	b1 1d       	adc	r27, r1
						EECR	|=	(1 << EERE);			// Read EEPROM
   3fd4c:	f8 9a       	sbi	0x1f, 0	; 31
						*p++	=	EEDR;				// Send EEPROM data
   3fd4e:	40 b5       	in	r20, 0x20	; 32
   3fd50:	f5 01       	movw	r30, r10
   3fd52:	41 93       	st	Z+, r20
   3fd54:	5f 01       	movw	r10, r30
						size--;
   3fd56:	f1 e0       	ldi	r31, 0x01	; 1
   3fd58:	8f 1a       	sub	r8, r31
   3fd5a:	91 08       	sbc	r9, r1
					} while(size);
   3fd5c:	71 f7       	brne	.-36     	; 0x3fd3a <processStk500boot+0x3ec>
   3fd5e:	c9 01       	movw	r24, r18
   3fd60:	01 97       	sbiw	r24, 0x01	; 1
   3fd62:	a0 e0       	ldi	r26, 0x00	; 0
   3fd64:	b0 e0       	ldi	r27, 0x00	; 0
   3fd66:	01 96       	adiw	r24, 0x01	; 1
   3fd68:	a1 1d       	adc	r26, r1
   3fd6a:	b1 1d       	adc	r27, r1
   3fd6c:	c8 0e       	add	r12, r24
   3fd6e:	d9 1e       	adc	r13, r25
   3fd70:	ea 1e       	adc	r14, r26
   3fd72:	fb 1e       	adc	r15, r27
   3fd74:	a3 e0       	ldi	r26, 0x03	; 3
   3fd76:	b0 e0       	ldi	r27, 0x00	; 0
   3fd78:	ac 0f       	add	r26, r28
   3fd7a:	bd 1f       	adc	r27, r29
   3fd7c:	a2 0f       	add	r26, r18
   3fd7e:	b3 1f       	adc	r27, r19
				}

				*p++	=	STATUS_CMD_OK;
   3fd80:	1c 92       	st	X, r1
			}
			break;
   3fd82:	20 e0       	ldi	r18, 0x00	; 0
   3fd84:	05 c0       	rjmp	.+10     	; 0x3fd90 <processStk500boot+0x442>

			default:
				msgLength		=	2;
				msgBuffer[1]	=	STATUS_CMD_FAILED;
   3fd86:	80 ec       	ldi	r24, 0xC0	; 192
   3fd88:	8a 83       	std	Y+2, r24	; 0x02
				break;
   3fd8a:	20 e0       	ldi	r18, 0x00	; 0
				*p++	=	STATUS_CMD_OK;
			}
			break;

			default:
				msgLength		=	2;
   3fd8c:	02 e0       	ldi	r16, 0x02	; 2
   3fd8e:	10 e0       	ldi	r17, 0x00	; 0
		}

		/*
		 * Now send answer message back
		 */
		putch(MESSAGE_START);
   3fd90:	8b e1       	ldi	r24, 0x1B	; 27
   3fd92:	c0 5e       	subi	r28, 0xE0	; 224
   3fd94:	de 4f       	sbci	r29, 0xFE	; 254
   3fd96:	28 83       	st	Y, r18
   3fd98:	c0 52       	subi	r28, 0x20	; 32
   3fd9a:	d1 40       	sbci	r29, 0x01	; 1
   3fd9c:	77 dd       	rcall	.-1298   	; 0x3f88c <putch>
		checksum	=	MESSAGE_START ^ 0;

		putch(seqNum);
   3fd9e:	c2 5e       	subi	r28, 0xE2	; 226
   3fda0:	de 4f       	sbci	r29, 0xFE	; 254
   3fda2:	88 81       	ld	r24, Y
   3fda4:	ce 51       	subi	r28, 0x1E	; 30
   3fda6:	d1 40       	sbci	r29, 0x01	; 1
   3fda8:	71 dd       	rcall	.-1310   	; 0x3f88c <putch>
		checksum	^=	seqNum;

		c			=	((msgLength >> 8) & 0xFF);
   3fdaa:	a1 2e       	mov	r10, r17
   3fdac:	bb 24       	eor	r11, r11
		putch(c);
   3fdae:	8a 2d       	mov	r24, r10
   3fdb0:	6d dd       	rcall	.-1318   	; 0x3f88c <putch>
		checksum	^=	c;

		c			=	msgLength & 0x00FF;
		putch(c);
   3fdb2:	80 2f       	mov	r24, r16
   3fdb4:	6b dd       	rcall	.-1322   	; 0x3f88c <putch>
		checksum ^= c;

		putch(TOKEN);
   3fdb6:	8e e0       	ldi	r24, 0x0E	; 14
   3fdb8:	69 dd       	rcall	.-1326   	; 0x3f88c <putch>
		putch(seqNum);
		checksum	^=	seqNum;

		c			=	((msgLength >> 8) & 0xFF);
		putch(c);
		checksum	^=	c;
   3fdba:	25 e1       	ldi	r18, 0x15	; 21
   3fdbc:	82 2e       	mov	r8, r18
   3fdbe:	c2 5e       	subi	r28, 0xE2	; 226
   3fdc0:	de 4f       	sbci	r29, 0xFE	; 254
   3fdc2:	48 81       	ld	r20, Y
   3fdc4:	ce 51       	subi	r28, 0x1E	; 30
   3fdc6:	d1 40       	sbci	r29, 0x01	; 1
   3fdc8:	84 26       	eor	r8, r20

		c			=	msgLength & 0x00FF;
		putch(c);
		checksum ^= c;
   3fdca:	80 26       	eor	r8, r16

		putch(TOKEN);
		checksum ^= TOKEN;
   3fdcc:	8a 24       	eor	r8, r10
   3fdce:	ce 01       	movw	r24, r28
   3fdd0:	01 96       	adiw	r24, 0x01	; 1
   3fdd2:	5c 01       	movw	r10, r24
   3fdd4:	08 0f       	add	r16, r24
   3fdd6:	19 1f       	adc	r17, r25
		p	=	msgBuffer;

		while(msgLength) {
			c	=	*p++;
			putch(c);
			checksum ^= c;
   3fdd8:	c0 5e       	subi	r28, 0xE0	; 224
   3fdda:	de 4f       	sbci	r29, 0xFE	; 254
   3fddc:	28 81       	ld	r18, Y
   3fdde:	c0 52       	subi	r28, 0x20	; 32
   3fde0:	d1 40       	sbci	r29, 0x01	; 1
		putch(TOKEN);
		checksum ^= TOKEN;

		p	=	msgBuffer;

		while(msgLength) {
   3fde2:	a0 16       	cp	r10, r16
   3fde4:	b1 06       	cpc	r11, r17
   3fde6:	b1 f0       	breq	.+44     	; 0x3fe14 <processStk500boot+0x4c6>
			c	=	*p++;
   3fde8:	f5 01       	movw	r30, r10
   3fdea:	31 91       	ld	r19, Z+
   3fdec:	5f 01       	movw	r10, r30
			putch(c);
   3fdee:	83 2f       	mov	r24, r19
   3fdf0:	c0 5e       	subi	r28, 0xE0	; 224
   3fdf2:	de 4f       	sbci	r29, 0xFE	; 254
   3fdf4:	28 83       	st	Y, r18
   3fdf6:	c0 52       	subi	r28, 0x20	; 32
   3fdf8:	d1 40       	sbci	r29, 0x01	; 1
   3fdfa:	c1 5e       	subi	r28, 0xE1	; 225
   3fdfc:	de 4f       	sbci	r29, 0xFE	; 254
   3fdfe:	38 83       	st	Y, r19
   3fe00:	cf 51       	subi	r28, 0x1F	; 31
   3fe02:	d1 40       	sbci	r29, 0x01	; 1
   3fe04:	43 dd       	rcall	.-1402   	; 0x3f88c <putch>
			checksum ^= c;
   3fe06:	c1 5e       	subi	r28, 0xE1	; 225
   3fe08:	de 4f       	sbci	r29, 0xFE	; 254
   3fe0a:	38 81       	ld	r19, Y
   3fe0c:	cf 51       	subi	r28, 0x1F	; 31
   3fe0e:	d1 40       	sbci	r29, 0x01	; 1
   3fe10:	83 26       	eor	r8, r19
   3fe12:	e2 cf       	rjmp	.-60     	; 0x3fdd8 <processStk500boot+0x48a>
			msgLength--;
		}

		putch(checksum);
   3fe14:	88 2d       	mov	r24, r8
   3fe16:	c0 5e       	subi	r28, 0xE0	; 224
   3fe18:	de 4f       	sbci	r29, 0xFE	; 254
   3fe1a:	28 83       	st	Y, r18
   3fe1c:	c0 52       	subi	r28, 0x20	; 32
   3fe1e:	d1 40       	sbci	r29, 0x01	; 1
   3fe20:	35 dd       	rcall	.-1430   	; 0x3f88c <putch>
		seqNum++;
   3fe22:	c2 5e       	subi	r28, 0xE2	; 226
   3fe24:	de 4f       	sbci	r29, 0xFE	; 254
   3fe26:	48 81       	ld	r20, Y
   3fe28:	ce 51       	subi	r28, 0x1E	; 30
   3fe2a:	d1 40       	sbci	r29, 0x01	; 1
   3fe2c:	4f 5f       	subi	r20, 0xFF	; 255
   3fe2e:	c2 5e       	subi	r28, 0xE2	; 226
   3fe30:	de 4f       	sbci	r29, 0xFE	; 254
   3fe32:	48 83       	st	Y, r20
   3fe34:	ce 51       	subi	r28, 0x1E	; 30
   3fe36:	d1 40       	sbci	r29, 0x01	; 1
	unsigned int	msgLength		=	0;
	unsigned char	msgBuffer[285];
	unsigned char	c, *p;
	unsigned char   isLeave = 0;

	while(!isLeave) {
   3fe38:	c0 5e       	subi	r28, 0xE0	; 224
   3fe3a:	de 4f       	sbci	r29, 0xFE	; 254
   3fe3c:	28 81       	ld	r18, Y
   3fe3e:	c0 52       	subi	r28, 0x20	; 32
   3fe40:	d1 40       	sbci	r29, 0x01	; 1
   3fe42:	22 23       	and	r18, r18
   3fe44:	09 f4       	brne	.+2      	; 0x3fe48 <processStk500boot+0x4fa>
   3fe46:	a9 cd       	rjmp	.-1198   	; 0x3f99a <processStk500boot+0x4c>
		putch(checksum);
		seqNum++;

	}

	asm volatile("nop");			// wait until port has changed
   3fe48:	00 00       	nop
	 * Now leave bootloader
	 */
	//TODO: find out what this does
	//UART_STATUS_REG	&=	0xfd;
#if defined(RWWSRE)
	boot_rww_enable();				// enable application section
   3fe4a:	81 e1       	ldi	r24, 0x11	; 17
   3fe4c:	80 93 57 00 	sts	0x0057, r24
   3fe50:	e8 95       	spm
#endif
	eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
   3fe52:	6e ee       	ldi	r22, 0xEE	; 238
   3fe54:	82 e0       	ldi	r24, 0x02	; 2
   3fe56:	90 e0       	ldi	r25, 0x00	; 0
   3fe58:	2d d0       	rcall	.+90     	; 0x3feb4 <__eewr_byte_m2560>
	return(0);
}
   3fe5a:	80 e0       	ldi	r24, 0x00	; 0
   3fe5c:	c0 5e       	subi	r28, 0xE0	; 224
   3fe5e:	de 4f       	sbci	r29, 0xFE	; 254
   3fe60:	de bf       	out	0x3e, r29	; 62
   3fe62:	cd bf       	out	0x3d, r28	; 61
   3fe64:	df 91       	pop	r29
   3fe66:	cf 91       	pop	r28
   3fe68:	1f 91       	pop	r17
   3fe6a:	0f 91       	pop	r16
   3fe6c:	ff 90       	pop	r15
   3fe6e:	ef 90       	pop	r14
   3fe70:	df 90       	pop	r13
   3fe72:	cf 90       	pop	r12
   3fe74:	bf 90       	pop	r11
   3fe76:	af 90       	pop	r10
   3fe78:	9f 90       	pop	r9
   3fe7a:	8f 90       	pop	r8
   3fe7c:	7f 90       	pop	r7
   3fe7e:	6f 90       	pop	r6
   3fe80:	5f 90       	pop	r5
   3fe82:	4f 90       	pop	r4
   3fe84:	3f 90       	pop	r3
   3fe86:	2f 90       	pop	r2
   3fe88:	08 95       	ret
   3fe8a:	18 01       	movw	r2, r16
				case ST_GET_DATA:
					msgBuffer[ii++]	=	c;
					checksum		^=	c;

					if(ii == msgLength) {
						msgParseState	=	ST_GET_CHECK;
   3fe8c:	46 e0       	ldi	r20, 0x06	; 6
   3fe8e:	88 cd       	rjmp	.-1264   	; 0x3f9a0 <processStk500boot+0x52>

0003fe90 <memcpy_PF>:
   3fe90:	6b bf       	out	0x3b, r22	; 59
   3fe92:	fa 01       	movw	r30, r20
   3fe94:	dc 01       	movw	r26, r24
   3fe96:	02 c0       	rjmp	.+4      	; 0x3fe9c <memcpy_PF+0xc>
   3fe98:	07 90       	elpm	r0, Z+
   3fe9a:	0d 92       	st	X+, r0
   3fe9c:	21 50       	subi	r18, 0x01	; 1
   3fe9e:	30 40       	sbci	r19, 0x00	; 0
   3fea0:	d8 f7       	brcc	.-10     	; 0x3fe98 <memcpy_PF+0x8>
   3fea2:	08 95       	ret

0003fea4 <__eerd_byte_m2560>:
   3fea4:	f9 99       	sbic	0x1f, 1	; 31
   3fea6:	fe cf       	rjmp	.-4      	; 0x3fea4 <__eerd_byte_m2560>
   3fea8:	92 bd       	out	0x22, r25	; 34
   3feaa:	81 bd       	out	0x21, r24	; 33
   3feac:	f8 9a       	sbi	0x1f, 0	; 31
   3feae:	99 27       	eor	r25, r25
   3feb0:	80 b5       	in	r24, 0x20	; 32
   3feb2:	08 95       	ret

0003feb4 <__eewr_byte_m2560>:
   3feb4:	26 2f       	mov	r18, r22

0003feb6 <__eewr_r18_m2560>:
   3feb6:	f9 99       	sbic	0x1f, 1	; 31
   3feb8:	fe cf       	rjmp	.-4      	; 0x3feb6 <__eewr_r18_m2560>
   3feba:	1f ba       	out	0x1f, r1	; 31
   3febc:	92 bd       	out	0x22, r25	; 34
   3febe:	81 bd       	out	0x21, r24	; 33
   3fec0:	20 bd       	out	0x20, r18	; 32
   3fec2:	0f b6       	in	r0, 0x3f	; 63
   3fec4:	f8 94       	cli
   3fec6:	fa 9a       	sbi	0x1f, 2	; 31
   3fec8:	f9 9a       	sbi	0x1f, 1	; 31
   3feca:	0f be       	out	0x3f, r0	; 63
   3fecc:	01 96       	adiw	r24, 0x01	; 1
   3fece:	08 95       	ret

0003fed0 <_exit>:
   3fed0:	f8 94       	cli

0003fed2 <__stop_program>:
   3fed2:	ff cf       	rjmp	.-2      	; 0x3fed2 <__stop_program>
