
ariadne_atmega1284p_16mhz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0001fb5c  00000bf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b5c  0001f000  0001f000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080011c  0080011c  00000c0c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  00000c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bef  00000000  00000000  00000d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c2c  00000000  00000000  0000297c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000161d  00000000  00000000  000035a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003fc  00000000  00000000  00004bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000622  00000000  00000000  00004fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000166a  00000000  00000000  000055e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00006c50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001f000 <__vectors>:
   1f000:	62 c0       	rjmp	.+196    	; 0x1f0c6 <__ctors_end>
   1f002:	00 00       	nop
   1f004:	e0 c0       	rjmp	.+448    	; 0x1f1c6 <__bad_interrupt>
   1f006:	00 00       	nop
   1f008:	de c0       	rjmp	.+444    	; 0x1f1c6 <__bad_interrupt>
   1f00a:	00 00       	nop
   1f00c:	dc c0       	rjmp	.+440    	; 0x1f1c6 <__bad_interrupt>
   1f00e:	00 00       	nop
   1f010:	da c0       	rjmp	.+436    	; 0x1f1c6 <__bad_interrupt>
   1f012:	00 00       	nop
   1f014:	d8 c0       	rjmp	.+432    	; 0x1f1c6 <__bad_interrupt>
   1f016:	00 00       	nop
   1f018:	d6 c0       	rjmp	.+428    	; 0x1f1c6 <__bad_interrupt>
   1f01a:	00 00       	nop
   1f01c:	d4 c0       	rjmp	.+424    	; 0x1f1c6 <__bad_interrupt>
   1f01e:	00 00       	nop
   1f020:	d2 c0       	rjmp	.+420    	; 0x1f1c6 <__bad_interrupt>
   1f022:	00 00       	nop
   1f024:	d0 c0       	rjmp	.+416    	; 0x1f1c6 <__bad_interrupt>
   1f026:	00 00       	nop
   1f028:	ce c0       	rjmp	.+412    	; 0x1f1c6 <__bad_interrupt>
   1f02a:	00 00       	nop
   1f02c:	cc c0       	rjmp	.+408    	; 0x1f1c6 <__bad_interrupt>
   1f02e:	00 00       	nop
   1f030:	ca c0       	rjmp	.+404    	; 0x1f1c6 <__bad_interrupt>
   1f032:	00 00       	nop
   1f034:	c8 c0       	rjmp	.+400    	; 0x1f1c6 <__bad_interrupt>
   1f036:	00 00       	nop
   1f038:	c6 c0       	rjmp	.+396    	; 0x1f1c6 <__bad_interrupt>
   1f03a:	00 00       	nop
   1f03c:	c4 c0       	rjmp	.+392    	; 0x1f1c6 <__bad_interrupt>
   1f03e:	00 00       	nop
   1f040:	c2 c0       	rjmp	.+388    	; 0x1f1c6 <__bad_interrupt>
   1f042:	00 00       	nop
   1f044:	c0 c0       	rjmp	.+384    	; 0x1f1c6 <__bad_interrupt>
   1f046:	00 00       	nop
   1f048:	be c0       	rjmp	.+380    	; 0x1f1c6 <__bad_interrupt>
   1f04a:	00 00       	nop
   1f04c:	bc c0       	rjmp	.+376    	; 0x1f1c6 <__bad_interrupt>
   1f04e:	00 00       	nop
   1f050:	ba c0       	rjmp	.+372    	; 0x1f1c6 <__bad_interrupt>
   1f052:	00 00       	nop
   1f054:	b8 c0       	rjmp	.+368    	; 0x1f1c6 <__bad_interrupt>
   1f056:	00 00       	nop
   1f058:	b6 c0       	rjmp	.+364    	; 0x1f1c6 <__bad_interrupt>
   1f05a:	00 00       	nop
   1f05c:	b4 c0       	rjmp	.+360    	; 0x1f1c6 <__bad_interrupt>
   1f05e:	00 00       	nop
   1f060:	b2 c0       	rjmp	.+356    	; 0x1f1c6 <__bad_interrupt>
   1f062:	00 00       	nop
   1f064:	b0 c0       	rjmp	.+352    	; 0x1f1c6 <__bad_interrupt>
   1f066:	00 00       	nop
   1f068:	ae c0       	rjmp	.+348    	; 0x1f1c6 <__bad_interrupt>
   1f06a:	00 00       	nop
   1f06c:	ac c0       	rjmp	.+344    	; 0x1f1c6 <__bad_interrupt>
   1f06e:	00 00       	nop
   1f070:	aa c0       	rjmp	.+340    	; 0x1f1c6 <__bad_interrupt>
   1f072:	00 00       	nop
   1f074:	a8 c0       	rjmp	.+336    	; 0x1f1c6 <__bad_interrupt>
   1f076:	00 00       	nop
   1f078:	a6 c0       	rjmp	.+332    	; 0x1f1c6 <__bad_interrupt>
   1f07a:	00 00       	nop
   1f07c:	a4 c0       	rjmp	.+328    	; 0x1f1c6 <__bad_interrupt>
   1f07e:	00 00       	nop
   1f080:	a2 c0       	rjmp	.+324    	; 0x1f1c6 <__bad_interrupt>
   1f082:	00 00       	nop
   1f084:	a0 c0       	rjmp	.+320    	; 0x1f1c6 <__bad_interrupt>
   1f086:	00 00       	nop
   1f088:	9e c0       	rjmp	.+316    	; 0x1f1c6 <__bad_interrupt>
	...

0001f08c <__trampolines_end>:
   1f08c:	13 00       	.word	0x0013	; ????
   1f08e:	05 00       	.word	0x0005	; ????
   1f090:	00 49       	sbci	r16, 0x90	; 144
   1f092:	6e 76       	andi	r22, 0x6E	; 110
   1f094:	61 6c       	ori	r22, 0xC1	; 193
   1f096:	69 64       	ori	r22, 0x49	; 73
   1f098:	20 69       	ori	r18, 0x90	; 144
   1f09a:	6d 61       	ori	r22, 0x1D	; 29
   1f09c:	67 65       	ori	r22, 0x57	; 87
   1f09e:	20 66       	ori	r18, 0x60	; 96
   1f0a0:	69 6c       	ori	r22, 0xC9	; 201
   1f0a2:	65 00       	.word	0x0065	; ????

0001f0a4 <tftp_unknown_error_packet>:
   1f0a4:	08 00 05 00 00 45 72 72 6f 72 00                    .....Error.

0001f0af <tftp_full_error_packet>:
   1f0af:	09 00 05 00 03 46 75 6c 6c 00                       .....Full.

0001f0b9 <tftp_opcode_error_packet>:
   1f0b9:	0a 00 05 00 00 4f 70 63 6f 64 65 3f 00              .....Opcode?.

0001f0c6 <__ctors_end>:
   1f0c6:	11 24       	eor	r1, r1
   1f0c8:	1f be       	out	0x3f, r1	; 63
   1f0ca:	cf ef       	ldi	r28, 0xFF	; 255
   1f0cc:	d0 e4       	ldi	r29, 0x40	; 64
   1f0ce:	de bf       	out	0x3e, r29	; 62
   1f0d0:	cd bf       	out	0x3d, r28	; 61

0001f0d2 <__do_copy_data>:
   1f0d2:	11 e0       	ldi	r17, 0x01	; 1
   1f0d4:	a0 e0       	ldi	r26, 0x00	; 0
   1f0d6:	b1 e0       	ldi	r27, 0x01	; 1
   1f0d8:	ec e5       	ldi	r30, 0x5C	; 92
   1f0da:	fb ef       	ldi	r31, 0xFB	; 251
   1f0dc:	01 e0       	ldi	r16, 0x01	; 1
   1f0de:	0b bf       	out	0x3b, r16	; 59
   1f0e0:	02 c0       	rjmp	.+4      	; 0x1f0e6 <__do_copy_data+0x14>
   1f0e2:	07 90       	elpm	r0, Z+
   1f0e4:	0d 92       	st	X+, r0
   1f0e6:	ac 31       	cpi	r26, 0x1C	; 28
   1f0e8:	b1 07       	cpc	r27, r17
   1f0ea:	d9 f7       	brne	.-10     	; 0x1f0e2 <__do_copy_data+0x10>

0001f0ec <__do_clear_bss>:
   1f0ec:	21 e0       	ldi	r18, 0x01	; 1
   1f0ee:	ac e1       	ldi	r26, 0x1C	; 28
   1f0f0:	b1 e0       	ldi	r27, 0x01	; 1
   1f0f2:	01 c0       	rjmp	.+2      	; 0x1f0f6 <.do_clear_bss_start>

0001f0f4 <.do_clear_bss_loop>:
   1f0f4:	1d 92       	st	X+, r1

0001f0f6 <.do_clear_bss_start>:
   1f0f6:	ab 32       	cpi	r26, 0x2B	; 43
   1f0f8:	b2 07       	cpc	r27, r18
   1f0fa:	e1 f7       	brne	.-8      	; 0x1f0f4 <.do_clear_bss_loop>
   1f0fc:	01 d0       	rcall	.+2      	; 0x1f100 <main>
   1f0fe:	2c c5       	rjmp	.+2648   	; 0x1fb58 <_exit>

0001f100 <main>:

int main(void)
{
	/* Disable the watchdog timer to prevent
	 * eternal reset loop of doom and despair */
	MCUSR = 0;
   1f100:	14 be       	out	0x34, r1	; 52
	wdt_disable();
   1f102:	88 e1       	ldi	r24, 0x18	; 24
   1f104:	0f b6       	in	r0, 0x3f	; 63
   1f106:	f8 94       	cli
   1f108:	80 93 60 00 	sts	0x0060, r24
   1f10c:	10 92 60 00 	sts	0x0060, r1
   1f110:	0f be       	out	0x3f, r0	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   1f112:	2f ef       	ldi	r18, 0xFF	; 255
   1f114:	83 ec       	ldi	r24, 0xC3	; 195
   1f116:	99 e0       	ldi	r25, 0x09	; 9
   1f118:	21 50       	subi	r18, 0x01	; 1
   1f11a:	80 40       	sbci	r24, 0x00	; 0
   1f11c:	90 40       	sbci	r25, 0x00	; 0
   1f11e:	e1 f7       	brne	.-8      	; 0x1f118 <main+0x18>
   1f120:	00 c0       	rjmp	.+0      	; 0x1f122 <main+0x22>
   1f122:	00 00       	nop
	/* This code makes the following assumptions:
	 * No interrupts will execute
	 * SP points to RAMEND
	 * r1 contains zero */
	//cli();
	asm volatile("clr __zero_reg__");
   1f124:	11 24       	eor	r1, r1
	// 0x02 -> ClkIO/8 -> 500ns period, 32ms max
	// 0X03 -> ClkIO/64 -> 4us period, 256ms max
	// 0x04 -> ClkIO/256 -> 16us period, 1024ms max
	// 0x05 -> ClkIO/1024 -> 64us period, 4096ms max
	// Set up Timer 1 as timekeeper for LED flashing
	TCCR1B = _BV(CS12) | _BV(CS10); // Same thing as TCCR1B = 0x05;
   1f126:	85 e0       	ldi	r24, 0x05	; 5
   1f128:	80 93 81 00 	sts	0x0081, r24

	/* Write version information in the EEPROM */
	if(eeprom_read_byte(EEPROM_MAJVER) != ARIADNE_MAJVER)
   1f12c:	80 e0       	ldi	r24, 0x00	; 0
   1f12e:	90 e0       	ldi	r25, 0x00	; 0
   1f130:	fd d4       	rcall	.+2554   	; 0x1fb2c <__eerd_byte_m1284p>
   1f132:	88 23       	and	r24, r24
   1f134:	21 f0       	breq	.+8      	; 0x1f13e <main+0x3e>
		eeprom_write_byte(EEPROM_MAJVER, ARIADNE_MAJVER);
   1f136:	60 e0       	ldi	r22, 0x00	; 0
   1f138:	80 e0       	ldi	r24, 0x00	; 0
   1f13a:	90 e0       	ldi	r25, 0x00	; 0
   1f13c:	ff d4       	rcall	.+2558   	; 0x1fb3c <__eewr_byte_m1284p>
	if(eeprom_read_byte(EEPROM_MINVER) != ARIADNE_MINVER)
   1f13e:	81 e0       	ldi	r24, 0x01	; 1
   1f140:	90 e0       	ldi	r25, 0x00	; 0
   1f142:	f4 d4       	rcall	.+2536   	; 0x1fb2c <__eerd_byte_m1284p>
   1f144:	84 30       	cpi	r24, 0x04	; 4
   1f146:	21 f0       	breq	.+8      	; 0x1f150 <main+0x50>
		eeprom_write_byte(EEPROM_MINVER, ARIADNE_MINVER);
   1f148:	64 e0       	ldi	r22, 0x04	; 4
   1f14a:	81 e0       	ldi	r24, 0x01	; 1
   1f14c:	90 e0       	ldi	r25, 0x00	; 0
   1f14e:	f6 d4       	rcall	.+2540   	; 0x1fb3c <__eewr_byte_m1284p>

	/* Initialize UART communication */
	serialInit();
   1f150:	61 d3       	rcall	.+1730   	; 0x1f814 <serialInit>
		buttonInit();
	)

	/* Initalize SPI communication */
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_SPI);)
	spiInit();
   1f152:	92 d0       	rcall	.+292    	; 0x1f278 <spiInit>
	/* Initialize networking */
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_NET);)
	netInit();
   1f154:	9c d0       	rcall	.+312    	; 0x1f28e <netInit>

	/* Initialize the UDP socket for tftp */
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_TFTP);)
	tftpInit();
   1f156:	66 d2       	rcall	.+1228   	; 0x1f624 <tftpInit>
#if defined(ANNOUNCE)
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_ANN);)
	announceInit();
#endif

	serialFlashing = FALSE;
   1f158:	10 92 29 01 	sts	0x0129, r1
	tftpFlashing = FALSE;
   1f15c:	10 92 2a 01 	sts	0x012A, r1
			if(eeprom_read_byte(EEPROM_IMG_STAT) == EEPROM_IMG_OK_VALUE) break;

			//TODO: determine the conditions for reseting server OR reseting socket
			if(tftpFlashing == TRUE) {
				// Delete first page of flash memory
				boot_page_erase(0);
   1f160:	c3 e0       	ldi	r28, 0x03	; 3
   1f162:	c1 2c       	mov	r12, r1
   1f164:	d1 2c       	mov	r13, r1
   1f166:	76 01       	movw	r14, r12
	serialFlashing = FALSE;
	tftpFlashing = FALSE;

	for(;;) {
		// If there is no serial flashing under way, poll tftp
		if(!serialFlashing)
   1f168:	80 91 29 01 	lds	r24, 0x0129
   1f16c:	88 23       	and	r24, r24
   1f16e:	29 f0       	breq	.+10     	; 0x1f17a <main+0x7a>
			// If tftp recieved a FINAL_ACK, break
			if(tftpPoll() == 0)
				break;

		// If there is no tftp flashing, poll serial
		if(!tftpFlashing)
   1f170:	80 91 2a 01 	lds	r24, 0x012A
   1f174:	88 23       	and	r24, r24
   1f176:	49 f0       	breq	.+18     	; 0x1f18a <main+0x8a>
   1f178:	04 c0       	rjmp	.+8      	; 0x1f182 <main+0x82>

	for(;;) {
		// If there is no serial flashing under way, poll tftp
		if(!serialFlashing)
			// If tftp recieved a FINAL_ACK, break
			if(tftpPoll() == 0)
   1f17a:	77 d2       	rcall	.+1262   	; 0x1f66a <tftpPoll>
   1f17c:	81 11       	cpse	r24, r1
   1f17e:	f8 cf       	rjmp	.-16     	; 0x1f170 <main+0x70>
   1f180:	1d c0       	rjmp	.+58     	; 0x1f1bc <main+0xbc>
		/* As explained above this goes out */
#if defined(ANNOUNCE)
		announcePoll();
#endif

		if(timedOut()) {
   1f182:	a4 d3       	rcall	.+1864   	; 0x1f8cc <timedOut>
   1f184:	81 11       	cpse	r24, r1
   1f186:	05 c0       	rjmp	.+10     	; 0x1f192 <main+0x92>
   1f188:	17 c0       	rjmp	.+46     	; 0x1f1b8 <main+0xb8>
				break;

		// If there is no tftp flashing, poll serial
		if(!tftpFlashing)
			// If flashing is done exit
			if(serialPoll() == 0)
   1f18a:	6a d3       	rcall	.+1748   	; 0x1f860 <serialPoll>
   1f18c:	81 11       	cpse	r24, r1
   1f18e:	f9 cf       	rjmp	.-14     	; 0x1f182 <main+0x82>
   1f190:	15 c0       	rjmp	.+42     	; 0x1f1bc <main+0xbc>
#if defined(ANNOUNCE)
		announcePoll();
#endif

		if(timedOut()) {
			if(eeprom_read_byte(EEPROM_IMG_STAT) == EEPROM_IMG_OK_VALUE) break;
   1f192:	82 e0       	ldi	r24, 0x02	; 2
   1f194:	90 e0       	ldi	r25, 0x00	; 0
   1f196:	ca d4       	rcall	.+2452   	; 0x1fb2c <__eerd_byte_m1284p>
   1f198:	8e 3e       	cpi	r24, 0xEE	; 238
   1f19a:	81 f0       	breq	.+32     	; 0x1f1bc <main+0xbc>

			//TODO: determine the conditions for reseting server OR reseting socket
			if(tftpFlashing == TRUE) {
   1f19c:	80 91 2a 01 	lds	r24, 0x012A
   1f1a0:	81 30       	cpi	r24, 0x01	; 1
   1f1a2:	51 f4       	brne	.+20     	; 0x1f1b8 <main+0xb8>
				// Delete first page of flash memory
				boot_page_erase(0);
   1f1a4:	f6 01       	movw	r30, r12
   1f1a6:	e0 92 5b 00 	sts	0x005B, r14
   1f1aa:	c0 93 57 00 	sts	0x0057, r28
   1f1ae:	e8 95       	spm
				// Reinitialize TFTP
				tftpInit();
   1f1b0:	39 d2       	rcall	.+1138   	; 0x1f624 <tftpInit>
				// Reset the timeout counter
				resetTick();
   1f1b2:	83 d3       	rcall	.+1798   	; 0x1f8ba <resetTick>
				// Unset tftp flag
				tftpFlashing = FALSE;
   1f1b4:	10 92 2a 01 	sts	0x012A, r1
			}
		}
		/* Blink the notification led */
		updateLed();
   1f1b8:	5e d3       	rcall	.+1724   	; 0x1f876 <updateLed>
	}
   1f1ba:	d6 cf       	rjmp	.-84     	; 0x1f168 <main+0x68>

	/* Exit to user application */
	DBG_MAIN(tracePGMlnMain(mDebugMain_EXIT);)
	asm volatile(
   1f1bc:	ee 27       	eor	r30, r30
   1f1be:	ff 27       	eor	r31, r31
   1f1c0:	09 94       	ijmp
		"clr	r31		\n\t"
		"ijmp	\n\t"
	);
	//appStart();
	//return(0); /* never reached */
}
   1f1c2:	80 e0       	ldi	r24, 0x00	; 0
   1f1c4:	90 e0       	ldi	r25, 0x00	; 0

0001f1c6 <__bad_interrupt>:
   1f1c6:	1c cf       	rjmp	.-456    	; 0x1f000 <__vectors>

0001f1c8 <spiWriteReg>:
		tracenum(address);
		tracePGM(mDebugSpi_COMMA);
		tracenum(value);
	)

	SPCR = _BV(SPE) | _BV(MSTR); // Set SPI as master
   1f1c8:	20 e5       	ldi	r18, 0x50	; 80
   1f1ca:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
   1f1cc:	2c 98       	cbi	0x05, 4	; 5

	SPDR = SPI_WRITE;
   1f1ce:	20 ef       	ldi	r18, 0xF0	; 240
   1f1d0:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   1f1d2:	0d b4       	in	r0, 0x2d	; 45
   1f1d4:	07 fe       	sbrs	r0, 7
   1f1d6:	fd cf       	rjmp	.-6      	; 0x1f1d2 <spiWriteReg+0xa>

	SPDR = address >> 8;
   1f1d8:	29 2f       	mov	r18, r25
   1f1da:	33 27       	eor	r19, r19
   1f1dc:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   1f1de:	0d b4       	in	r0, 0x2d	; 45
   1f1e0:	07 fe       	sbrs	r0, 7
   1f1e2:	fd cf       	rjmp	.-6      	; 0x1f1de <spiWriteReg+0x16>

	SPDR = address & 0xff;
   1f1e4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
   1f1e6:	0d b4       	in	r0, 0x2d	; 45
   1f1e8:	07 fe       	sbrs	r0, 7
   1f1ea:	fd cf       	rjmp	.-6      	; 0x1f1e6 <spiWriteReg+0x1e>

	SPDR = value;
   1f1ec:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & _BV(SPIF)));
   1f1ee:	0d b4       	in	r0, 0x2d	; 45
   1f1f0:	07 fe       	sbrs	r0, 7
   1f1f2:	fd cf       	rjmp	.-6      	; 0x1f1ee <spiWriteReg+0x26>

	SS_HIGH();
   1f1f4:	2c 9a       	sbi	0x05, 4	; 5
	SPCR = 0; // Turn off SPI
   1f1f6:	1c bc       	out	0x2c, r1	; 44
   1f1f8:	08 95       	ret

0001f1fa <spiWriteWord>:
}

void spiWriteWord(uint16_t address, uint16_t value)
{
   1f1fa:	0f 93       	push	r16
   1f1fc:	1f 93       	push	r17
   1f1fe:	cf 93       	push	r28
   1f200:	df 93       	push	r29
   1f202:	8c 01       	movw	r16, r24
   1f204:	eb 01       	movw	r28, r22
	// Write uint16_t to Ethernet controller
	spiWriteReg(address++, value >> 8);
   1f206:	67 2f       	mov	r22, r23
   1f208:	77 27       	eor	r23, r23
   1f20a:	de df       	rcall	.-68     	; 0x1f1c8 <spiWriteReg>
	spiWriteReg(address, value & 0xff);
   1f20c:	6c 2f       	mov	r22, r28
   1f20e:	c8 01       	movw	r24, r16
   1f210:	01 96       	adiw	r24, 0x01	; 1
}
   1f212:	df 91       	pop	r29
   1f214:	cf 91       	pop	r28
   1f216:	1f 91       	pop	r17
   1f218:	0f 91       	pop	r16

void spiWriteWord(uint16_t address, uint16_t value)
{
	// Write uint16_t to Ethernet controller
	spiWriteReg(address++, value >> 8);
	spiWriteReg(address, value & 0xff);
   1f21a:	d6 cf       	rjmp	.-84     	; 0x1f1c8 <spiWriteReg>

0001f21c <spiReadReg>:
	)
	#endif

	uint8_t returnValue;

	SPCR = _BV(SPE) | _BV(MSTR);
   1f21c:	20 e5       	ldi	r18, 0x50	; 80
   1f21e:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
   1f220:	2c 98       	cbi	0x05, 4	; 5

	SPDR = SPI_READ;
   1f222:	2f e0       	ldi	r18, 0x0F	; 15
   1f224:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   1f226:	0d b4       	in	r0, 0x2d	; 45
   1f228:	07 fe       	sbrs	r0, 7
   1f22a:	fd cf       	rjmp	.-6      	; 0x1f226 <spiReadReg+0xa>

	SPDR = address >> 8;
   1f22c:	29 2f       	mov	r18, r25
   1f22e:	33 27       	eor	r19, r19
   1f230:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   1f232:	0d b4       	in	r0, 0x2d	; 45
   1f234:	07 fe       	sbrs	r0, 7
   1f236:	fd cf       	rjmp	.-6      	; 0x1f232 <spiReadReg+0x16>

	SPDR = address & 0xff;
   1f238:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
   1f23a:	0d b4       	in	r0, 0x2d	; 45
   1f23c:	07 fe       	sbrs	r0, 7
   1f23e:	fd cf       	rjmp	.-6      	; 0x1f23a <spiReadReg+0x1e>

	SPDR = 0;
   1f240:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
   1f242:	0d b4       	in	r0, 0x2d	; 45
   1f244:	07 fe       	sbrs	r0, 7
   1f246:	fd cf       	rjmp	.-6      	; 0x1f242 <spiReadReg+0x26>

	SS_HIGH();
   1f248:	2c 9a       	sbi	0x05, 4	; 5
	returnValue = SPDR;
   1f24a:	8e b5       	in	r24, 0x2e	; 46
	SPCR = 0;
   1f24c:	1c bc       	out	0x2c, r1	; 44

	return(returnValue);
}
   1f24e:	08 95       	ret

0001f250 <spiReadWord>:

uint16_t spiReadWord(uint16_t address)
{
   1f250:	1f 93       	push	r17
   1f252:	cf 93       	push	r28
   1f254:	df 93       	push	r29
   1f256:	ec 01       	movw	r28, r24
	// Read uint16_t from Ethernet controller
	return((spiReadReg(address) << 8) | spiReadReg(address + 1));
   1f258:	e1 df       	rcall	.-62     	; 0x1f21c <spiReadReg>
   1f25a:	18 2f       	mov	r17, r24
   1f25c:	ce 01       	movw	r24, r28
   1f25e:	01 96       	adiw	r24, 0x01	; 1
   1f260:	dd df       	rcall	.-70     	; 0x1f21c <spiReadReg>
   1f262:	21 2f       	mov	r18, r17
   1f264:	30 e0       	ldi	r19, 0x00	; 0
   1f266:	32 2f       	mov	r19, r18
   1f268:	22 27       	eor	r18, r18
}
   1f26a:	a9 01       	movw	r20, r18
   1f26c:	48 2b       	or	r20, r24
   1f26e:	ca 01       	movw	r24, r20
   1f270:	df 91       	pop	r29
   1f272:	cf 91       	pop	r28
   1f274:	1f 91       	pop	r17
   1f276:	08 95       	ret

0001f278 <spiInit>:
	 * At this stage all pins are set to HIGH. This in fact DISABLES SPI for both Ethernet and SD.
	 * SS pin for ethernet is pulled low just in time for reading or writing data inside those
	 * functions. */

	/** Set SPI pins high */
	SPI_PORT = _BV(SCK) | _BV(MISO) | _BV(MOSI) | _BV(SS);
   1f278:	80 ef       	ldi	r24, 0xF0	; 240
   1f27a:	85 b9       	out	0x05, r24	; 5
	/** Set SPI pins as output */
	SPI_DDR = _BV(SCK) | _BV(MOSI) | _BV(SS);
   1f27c:	80 eb       	ldi	r24, 0xB0	; 176
   1f27e:	84 b9       	out	0x04, r24	; 4
	ETH_DDR |= _BV(ETH_SS);
	#endif

	/** Disable SD card */
	/** Set SD SS pin high */
	SD_PORT |= _BV(SD_SS);
   1f280:	47 9a       	sbi	0x08, 7	; 8
	/** Set SD SS pin as output */
	SD_DDR |= _BV(SD_SS);
   1f282:	3f 9a       	sbi	0x07, 7	; 7

	#if (LED != SCK)
	/** Set up pins to flash the onboard led */
	/** Set led pin to high */
	LED_PORT |= _BV(LED);
   1f284:	5d 9a       	sbi	0x0b, 5	; 11
	/** Set led pin as output */
	LED_DDR |= _BV(LED);
   1f286:	55 9a       	sbi	0x0a, 5	; 10
	#endif

	/** Set up SPI
	 ** Set the Double SPI Speed Bit */
	SPSR = (1 << SPI2X);
   1f288:	81 e0       	ldi	r24, 0x01	; 1
   1f28a:	8d bd       	out	0x2d, r24	; 45
   1f28c:	08 95       	ret

0001f28e <netInit>:
	0x55          // TMSR Tx Memory Size Register, 2K per socket
};


void netInit(void)
{
   1f28e:	0f 93       	push	r16
   1f290:	1f 93       	push	r17
   1f292:	cf 93       	push	r28
   1f294:	df 93       	push	r29
	uint8_t i;

	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
   1f296:	83 e0       	ldi	r24, 0x03	; 3
   1f298:	90 e0       	ldi	r25, 0x00	; 0
   1f29a:	48 d4       	rcall	.+2192   	; 0x1fb2c <__eerd_byte_m1284p>
   1f29c:	85 35       	cpi	r24, 0x55	; 85
   1f29e:	29 f0       	breq	.+10     	; 0x1f2aa <netInit+0x1c>
   1f2a0:	00 e0       	ldi	r16, 0x00	; 0
   1f2a2:	11 e0       	ldi	r17, 0x01	; 1
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {
   1f2a4:	c0 e0       	ldi	r28, 0x00	; 0
   1f2a6:	d0 e0       	ldi	r29, 0x00	; 0
   1f2a8:	13 c0       	rjmp	.+38     	; 0x1f2d0 <netInit+0x42>
   1f2aa:	84 e0       	ldi	r24, 0x04	; 4
   1f2ac:	90 e0       	ldi	r25, 0x00	; 0
   1f2ae:	3e d4       	rcall	.+2172   	; 0x1fb2c <__eerd_byte_m1284p>
   1f2b0:	8a 3a       	cpi	r24, 0xAA	; 170
   1f2b2:	b1 f7       	brne	.-20     	; 0x1f2a0 <netInit+0x12>
   1f2b4:	01 e0       	ldi	r16, 0x01	; 1
   1f2b6:	11 e0       	ldi	r17, 0x01	; 1
   1f2b8:	c5 e0       	ldi	r28, 0x05	; 5
   1f2ba:	d0 e0       	ldi	r29, 0x00	; 0

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
			registerBuffer[i + 1] = eeprom_read_byte(EEPROM_DATA + i);
   1f2bc:	ce 01       	movw	r24, r28
   1f2be:	36 d4       	rcall	.+2156   	; 0x1fb2c <__eerd_byte_m1284p>
   1f2c0:	f8 01       	movw	r30, r16
   1f2c2:	81 93       	st	Z+, r24
   1f2c4:	8f 01       	movw	r16, r30
   1f2c6:	21 96       	adiw	r28, 0x01	; 1
	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
   1f2c8:	c7 31       	cpi	r28, 0x17	; 23
   1f2ca:	d1 05       	cpc	r29, r1
   1f2cc:	b9 f7       	brne	.-18     	; 0x1f2bc <netInit+0x2e>
   1f2ce:	e8 cf       	rjmp	.-48     	; 0x1f2a0 <netInit+0x12>
		}
	)

	/** Configure Wiznet chip. Network settings */
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
		spiWriteReg(i, registerBuffer[i]);
   1f2d0:	f8 01       	movw	r30, r16
   1f2d2:	61 91       	ld	r22, Z+
   1f2d4:	8f 01       	movw	r16, r30
   1f2d6:	ce 01       	movw	r24, r28
   1f2d8:	77 df       	rcall	.-274    	; 0x1f1c8 <spiWriteReg>
   1f2da:	21 96       	adiw	r28, 0x01	; 1
			if(i != 14) putch(0x2E);
		}
	)

	/** Configure Wiznet chip. Network settings */
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
   1f2dc:	cc 31       	cpi	r28, 0x1C	; 28
   1f2de:	d1 05       	cpc	r29, r1
   1f2e0:	b9 f7       	brne	.-18     	; 0x1f2d0 <netInit+0x42>
		spiWriteReg(i, registerBuffer[i]);

	DBG_NET(tracePGMlnNet(mDebugNet_DONE);)
}
   1f2e2:	df 91       	pop	r29
   1f2e4:	cf 91       	pop	r28
   1f2e6:	1f 91       	pop	r17
   1f2e8:	0f 91       	pop	r16
   1f2ea:	08 95       	ret

0001f2ec <sockInit>:

uint16_t lastPacket = 0, highPacket = 0;


static void sockInit(uint16_t port)
{
   1f2ec:	cf 93       	push	r28
   1f2ee:	df 93       	push	r29
   1f2f0:	ec 01       	movw	r28, r24
	DBG_TFTP(
		tracePGMlnTftp(mDebugTftp_SOCK);
		tracenum(port);
	)

	spiWriteReg(REG_S3_CR, CR_CLOSE);
   1f2f2:	60 e1       	ldi	r22, 0x10	; 16
   1f2f4:	81 e0       	ldi	r24, 0x01	; 1
   1f2f6:	97 e0       	ldi	r25, 0x07	; 7
   1f2f8:	67 df       	rcall	.-306    	; 0x1f1c8 <spiWriteReg>

	do {
		// Write TFTP Port
		spiWriteWord(REG_S3_PORT0, port);
   1f2fa:	be 01       	movw	r22, r28
   1f2fc:	84 e0       	ldi	r24, 0x04	; 4
   1f2fe:	97 e0       	ldi	r25, 0x07	; 7
   1f300:	7c df       	rcall	.-264    	; 0x1f1fa <spiWriteWord>
		// Write mode
		spiWriteReg(REG_S3_MR, MR_UDP);
   1f302:	62 e0       	ldi	r22, 0x02	; 2
   1f304:	80 e0       	ldi	r24, 0x00	; 0
   1f306:	97 e0       	ldi	r25, 0x07	; 7
   1f308:	5f df       	rcall	.-322    	; 0x1f1c8 <spiWriteReg>
		// Open Socket
		spiWriteReg(REG_S3_CR, CR_OPEN);
   1f30a:	61 e0       	ldi	r22, 0x01	; 1
   1f30c:	81 e0       	ldi	r24, 0x01	; 1
   1f30e:	97 e0       	ldi	r25, 0x07	; 7
   1f310:	5b df       	rcall	.-330    	; 0x1f1c8 <spiWriteReg>

		// Read Status
		if(spiReadReg(REG_S3_SR) != SOCK_UDP)
   1f312:	83 e0       	ldi	r24, 0x03	; 3
   1f314:	97 e0       	ldi	r25, 0x07	; 7
   1f316:	82 df       	rcall	.-252    	; 0x1f21c <spiReadReg>
   1f318:	82 32       	cpi	r24, 0x22	; 34
   1f31a:	21 f0       	breq	.+8      	; 0x1f324 <sockInit+0x38>
			// Close Socket if it wasn't initialized correctly
			spiWriteReg(REG_S3_CR, CR_CLOSE);
   1f31c:	60 e1       	ldi	r22, 0x10	; 16
   1f31e:	81 e0       	ldi	r24, 0x01	; 1
   1f320:	97 e0       	ldi	r25, 0x07	; 7
   1f322:	52 df       	rcall	.-348    	; 0x1f1c8 <spiWriteReg>

		// If socket correctly opened continue
	} while(spiReadReg(REG_S3_SR) != SOCK_UDP);
   1f324:	83 e0       	ldi	r24, 0x03	; 3
   1f326:	97 e0       	ldi	r25, 0x07	; 7
   1f328:	79 df       	rcall	.-270    	; 0x1f21c <spiReadReg>
   1f32a:	82 32       	cpi	r24, 0x22	; 34
   1f32c:	31 f7       	brne	.-52     	; 0x1f2fa <sockInit+0xe>
}
   1f32e:	df 91       	pop	r29
   1f330:	cf 91       	pop	r28
   1f332:	08 95       	ret

0001f334 <processPacket>:
#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
#else
static uint8_t processPacket(void)
#endif
{
   1f334:	2f 92       	push	r2
   1f336:	3f 92       	push	r3
   1f338:	4f 92       	push	r4
   1f33a:	5f 92       	push	r5
   1f33c:	6f 92       	push	r6
   1f33e:	7f 92       	push	r7
   1f340:	8f 92       	push	r8
   1f342:	9f 92       	push	r9
   1f344:	af 92       	push	r10
   1f346:	bf 92       	push	r11
   1f348:	cf 92       	push	r12
   1f34a:	df 92       	push	r13
   1f34c:	ef 92       	push	r14
   1f34e:	ff 92       	push	r15
   1f350:	0f 93       	push	r16
   1f352:	1f 93       	push	r17
   1f354:	cf 93       	push	r28
   1f356:	df 93       	push	r29
   1f358:	cd b7       	in	r28, 0x3d	; 61
   1f35a:	de b7       	in	r29, 0x3e	; 62
   1f35c:	cd 50       	subi	r28, 0x0D	; 13
   1f35e:	d2 40       	sbci	r29, 0x02	; 2
   1f360:	de bf       	out	0x3e, r29	; 62
   1f362:	cd bf       	out	0x3d, r28	; 61

		DBG_BTN(button();)
	)

	// Read data from chip to buffer
	readPointer = spiReadWord(REG_S3_RX_RD0);
   1f364:	88 e2       	ldi	r24, 0x28	; 40
   1f366:	97 e0       	ldi	r25, 0x07	; 7
   1f368:	73 df       	rcall	.-282    	; 0x1f250 <spiReadWord>
	DBG_TFTP_EX(
		tracePGMlnTftp(mDebugTftp_RPTR);
		tracenum(readPointer);
	)

	if(readPointer == 0) readPointer += S3_RX_START;
   1f36a:	00 97       	sbiw	r24, 0x00	; 0
   1f36c:	11 f4       	brne	.+4      	; 0x1f372 <processPacket+0x3e>
   1f36e:	80 e0       	ldi	r24, 0x00	; 0
   1f370:	98 e7       	ldi	r25, 0x78	; 120
   1f372:	8e 01       	movw	r16, r28
   1f374:	0f 5f       	subi	r16, 0xFF	; 255
   1f376:	1f 4f       	sbci	r17, 0xFF	; 255
   1f378:	6e 01       	movw	r12, r28
   1f37a:	23 ef       	ldi	r18, 0xF3	; 243
   1f37c:	c2 1a       	sub	r12, r18
   1f37e:	2d ef       	ldi	r18, 0xFD	; 253
   1f380:	d2 0a       	sbc	r13, r18
   1f382:	58 01       	movw	r10, r16

	for(count = TFTP_PACKET_MAX_SIZE; count--;) {
   1f384:	0c 15       	cp	r16, r12
   1f386:	1d 05       	cpc	r17, r13
   1f388:	89 f0       	breq	.+34     	; 0x1f3ac <processPacket+0x78>
				tracePGMlnTftp(mDebugTftp_RPOS);
				tracenum(readPointer);
			}
		)

		*bufPtr++ = spiReadReg(readPointer++);
   1f38a:	7c 01       	movw	r14, r24
   1f38c:	ef ef       	ldi	r30, 0xFF	; 255
   1f38e:	ee 1a       	sub	r14, r30
   1f390:	fe 0a       	sbc	r15, r30
   1f392:	44 df       	rcall	.-376    	; 0x1f21c <spiReadReg>
   1f394:	f8 01       	movw	r30, r16
   1f396:	81 93       	st	Z+, r24
   1f398:	8f 01       	movw	r16, r30

		if(readPointer == S3_RX_END) readPointer = S3_RX_START;
   1f39a:	e1 14       	cp	r14, r1
   1f39c:	f0 e8       	ldi	r31, 0x80	; 128
   1f39e:	ff 06       	cpc	r15, r31
   1f3a0:	19 f4       	brne	.+6      	; 0x1f3a8 <processPacket+0x74>
   1f3a2:	e1 2c       	mov	r14, r1
   1f3a4:	e8 e7       	ldi	r30, 0x78	; 120
   1f3a6:	fe 2e       	mov	r15, r30
   1f3a8:	c7 01       	movw	r24, r14
   1f3aa:	ec cf       	rjmp	.-40     	; 0x1f384 <processPacket+0x50>
	}

	spiWriteWord(REG_S3_RX_RD0, readPointer);     // Write back new pointer
   1f3ac:	bc 01       	movw	r22, r24
   1f3ae:	88 e2       	ldi	r24, 0x28	; 40
   1f3b0:	97 e0       	ldi	r25, 0x07	; 7
   1f3b2:	23 df       	rcall	.-442    	; 0x1f1fa <spiWriteWord>
	spiWriteReg(REG_S3_CR, CR_RECV);
   1f3b4:	60 e4       	ldi	r22, 0x40	; 64
   1f3b6:	81 e0       	ldi	r24, 0x01	; 1
   1f3b8:	97 e0       	ldi	r25, 0x07	; 7
   1f3ba:	06 df       	rcall	.-500    	; 0x1f1c8 <spiWriteReg>

	while(spiReadReg(REG_S3_CR));
   1f3bc:	81 e0       	ldi	r24, 0x01	; 1
   1f3be:	97 e0       	ldi	r25, 0x07	; 7
   1f3c0:	2d df       	rcall	.-422    	; 0x1f21c <spiReadReg>
   1f3c2:	81 11       	cpse	r24, r1
   1f3c4:	fb cf       	rjmp	.-10     	; 0x1f3bc <processPacket+0x88>
   1f3c6:	75 01       	movw	r14, r10
   1f3c8:	0c e0       	ldi	r16, 0x0C	; 12
   1f3ca:	17 e0       	ldi	r17, 0x07	; 7
	)

	// Set up return IP address and port
	uint8_t i;

	for(i = 0; i < 6; i++) spiWriteReg(REG_S3_DIPR0 + i, buffer[i]);
   1f3cc:	f7 01       	movw	r30, r14
   1f3ce:	61 91       	ld	r22, Z+
   1f3d0:	7f 01       	movw	r14, r30
   1f3d2:	c8 01       	movw	r24, r16
   1f3d4:	f9 de       	rcall	.-526    	; 0x1f1c8 <spiWriteReg>
   1f3d6:	0f 5f       	subi	r16, 0xFF	; 255
   1f3d8:	1f 4f       	sbci	r17, 0xFF	; 255
   1f3da:	02 31       	cpi	r16, 0x12	; 18
   1f3dc:	f7 e0       	ldi	r31, 0x07	; 7
   1f3de:	1f 07       	cpc	r17, r31
   1f3e0:	a9 f7       	brne	.-22     	; 0x1f3cc <processPacket+0x98>

	DBG_TFTP(tracePGMlnTftp(mDebugTftp_RADDR);)

	// Parse packet
	uint16_t tftpDataLen = (buffer[6] << 8) + buffer[7];
   1f3e2:	0f 81       	ldd	r16, Y+7	; 0x07
   1f3e4:	10 e0       	ldi	r17, 0x00	; 0
   1f3e6:	10 2f       	mov	r17, r16
   1f3e8:	00 27       	eor	r16, r16
   1f3ea:	88 85       	ldd	r24, Y+8	; 0x08
   1f3ec:	08 0f       	add	r16, r24
   1f3ee:	11 1d       	adc	r17, r1
	uint16_t tftpOpcode  = (buffer[8] << 8) + buffer[9];
   1f3f0:	29 85       	ldd	r18, Y+9	; 0x09
   1f3f2:	30 e0       	ldi	r19, 0x00	; 0
   1f3f4:	32 2f       	mov	r19, r18
   1f3f6:	22 27       	eor	r18, r18
   1f3f8:	8a 85       	ldd	r24, Y+10	; 0x0a
   1f3fa:	28 0f       	add	r18, r24
   1f3fc:	31 1d       	adc	r19, r1
	uint16_t tftpBlock   = (buffer[10] << 8) + buffer[11];
   1f3fe:	8b 85       	ldd	r24, Y+11	; 0x0b
   1f400:	90 e0       	ldi	r25, 0x00	; 0
   1f402:	f8 2e       	mov	r15, r24
   1f404:	ee 24       	eor	r14, r14
   1f406:	4c 85       	ldd	r20, Y+12	; 0x0c
   1f408:	e4 0e       	add	r14, r20
   1f40a:	f1 1c       	adc	r15, r1
		tracenum(tftpOpcode);
		tracePGM(mDebugTftp_DLEN);
		tracenum(tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE));
	)

	if((tftpOpcode == TFTP_OPCODE_DATA)
   1f40c:	23 30       	cpi	r18, 0x03	; 3
   1f40e:	31 05       	cpc	r19, r1
   1f410:	89 f4       	brne	.+34     	; 0x1f434 <processPacket+0x100>
		&& ((tftpBlock > MAX_ADDR / 0x200) || (tftpBlock < highPacket) || (tftpBlock > highPacket + 1)))
   1f412:	29 ef       	ldi	r18, 0xF9	; 249
   1f414:	e2 16       	cp	r14, r18
   1f416:	f1 04       	cpc	r15, r1
   1f418:	a8 f5       	brcc	.+106    	; 0x1f484 <processPacket+0x150>
   1f41a:	20 91 1c 01 	lds	r18, 0x011C
   1f41e:	30 91 1d 01 	lds	r19, 0x011D
   1f422:	e2 16       	cp	r14, r18
   1f424:	f3 06       	cpc	r15, r19
   1f426:	70 f1       	brcs	.+92     	; 0x1f484 <processPacket+0x150>
   1f428:	2f 5f       	subi	r18, 0xFF	; 255
   1f42a:	3f 4f       	sbci	r19, 0xFF	; 255
   1f42c:	2e 15       	cp	r18, r14
   1f42e:	3f 05       	cpc	r19, r15
   1f430:	48 f1       	brcs	.+82     	; 0x1f484 <processPacket+0x150>
   1f432:	24 c0       	rjmp	.+72     	; 0x1f47c <processPacket+0x148>
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
   1f434:	05 30       	cpi	r16, 0x05	; 5
   1f436:	12 40       	sbci	r17, 0x02	; 2
   1f438:	28 f5       	brcc	.+74     	; 0x1f484 <processPacket+0x150>

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
   1f43a:	24 30       	cpi	r18, 0x04	; 4
   1f43c:	31 05       	cpc	r19, r1
   1f43e:	d0 f4       	brcc	.+52     	; 0x1f474 <processPacket+0x140>
   1f440:	21 30       	cpi	r18, 0x01	; 1
   1f442:	31 05       	cpc	r19, r1
   1f444:	31 f1       	breq	.+76     	; 0x1f492 <processPacket+0x15e>
   1f446:	22 30       	cpi	r18, 0x02	; 2
   1f448:	31 05       	cpc	r19, r1
   1f44a:	e1 f4       	brne	.+56     	; 0x1f484 <processPacket+0x150>
			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPRRQ);)
			break;

		case TFTP_OPCODE_WRQ: // Write request
			// Valid WRQ -> reset timer
			resetTick();
   1f44c:	36 d2       	rcall	.+1132   	; 0x1f8ba <resetTick>

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPWRQ);)

			// Flagging image as invalid since the flashing process has started
			eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_BAD_VALUE);
   1f44e:	6f ef       	ldi	r22, 0xFF	; 255
   1f450:	82 e0       	ldi	r24, 0x02	; 2
   1f452:	90 e0       	ldi	r25, 0x00	; 0
   1f454:	73 d3       	rcall	.+1766   	; 0x1fb3c <__eewr_byte_m1284p>

#if defined(RANDOM_TFTP_DATA_PORT)
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
   1f456:	80 91 27 01 	lds	r24, 0x0127
   1f45a:	90 91 28 01 	lds	r25, 0x0128
   1f45e:	46 df       	rcall	.-372    	; 0x1f2ec <sockInit>
#else
				tracenum(tftpTransferPort);
#endif
			)

			lastPacket = highPacket = 0;
   1f460:	10 92 1d 01 	sts	0x011D, r1
   1f464:	10 92 1c 01 	sts	0x011C, r1
   1f468:	10 92 1f 01 	sts	0x011F, r1
   1f46c:	10 92 1e 01 	sts	0x011E, r1
			returnCode = ACK; // Send back acknowledge for packet 0
   1f470:	22 e0       	ldi	r18, 0x02	; 2
   1f472:	44 c0       	rjmp	.+136    	; 0x1f4fc <processPacket+0x1c8>

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
   1f474:	26 30       	cpi	r18, 0x06	; 6
   1f476:	31 05       	cpc	r19, r1
   1f478:	60 f0       	brcs	.+24     	; 0x1f492 <processPacket+0x15e>
   1f47a:	04 c0       	rjmp	.+8      	; 0x1f484 <processPacket+0x150>

	if((tftpOpcode == TFTP_OPCODE_DATA)
		&& ((tftpBlock > MAX_ADDR / 0x200) || (tftpBlock < highPacket) || (tftpBlock > highPacket + 1)))
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
   1f47c:	05 30       	cpi	r16, 0x05	; 5
   1f47e:	82 e0       	ldi	r24, 0x02	; 2
   1f480:	18 07       	cpc	r17, r24
   1f482:	68 f0       	brcs	.+26     	; 0x1f49e <processPacket+0x16a>
			)

#if defined(RANDOM_TFTP_DATA_PORT)
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
   1f484:	80 91 27 01 	lds	r24, 0x0127
   1f488:	90 91 28 01 	lds	r25, 0x0128
   1f48c:	2f df       	rcall	.-418    	; 0x1f2ec <sockInit>
			 * It can be done by reinitializig the tftpd or
			 * by resetting the device. I should find out which is best...
			 * Right now it is being done by resetting the timer if we have a
			 * data packet. */
			// Invalid - return error
			returnCode = ERROR_INVALID;
   1f48e:	21 e0       	ldi	r18, 0x01	; 1
   1f490:	35 c0       	rjmp	.+106    	; 0x1f4fc <processPacket+0x1c8>
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
		tftpOpcode = TFTP_OPCODE_UKN;

	uint8_t returnCode = ERROR_UNKNOWN;
   1f492:	c3 5f       	subi	r28, 0xF3	; 243
   1f494:	dd 4f       	sbci	r29, 0xFD	; 253
   1f496:	18 82       	st	Y, r1
   1f498:	cd 50       	subi	r28, 0x0D	; 13
   1f49a:	d2 40       	sbci	r29, 0x02	; 2
   1f49c:	a7 c0       	rjmp	.+334    	; 0x1f5ec <processPacket+0x2b8>
			returnCode = ACK; // Send back acknowledge for packet 0
			break;

		case TFTP_OPCODE_DATA:
			// Valid Data Packet -> reset timer
			resetTick();
   1f49e:	0d d2       	rcall	.+1050   	; 0x1f8ba <resetTick>

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPDATA);)

			packetLength = tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE);
   1f4a0:	04 50       	subi	r16, 0x04	; 4
   1f4a2:	11 09       	sbc	r17, r1
			lastPacket = tftpBlock;
   1f4a4:	f0 92 1f 01 	sts	0x011F, r15
   1f4a8:	e0 92 1e 01 	sts	0x011E, r14
#if defined(RAMPZ)
			writeAddr = (((address_t)((tftpBlock - 1)/0x80) << 16) | ((address_t)((tftpBlock - 1)%0x80) << 9));
   1f4ac:	c7 01       	movw	r24, r14
   1f4ae:	01 97       	sbiw	r24, 0x01	; 1
   1f4b0:	6c 01       	movw	r12, r24
   1f4b2:	e1 2c       	mov	r14, r1
   1f4b4:	f1 2c       	mov	r15, r1
   1f4b6:	29 e0       	ldi	r18, 0x09	; 9
   1f4b8:	cc 0c       	add	r12, r12
   1f4ba:	dd 1c       	adc	r13, r13
   1f4bc:	ee 1c       	adc	r14, r14
   1f4be:	ff 1c       	adc	r15, r15
   1f4c0:	2a 95       	dec	r18
   1f4c2:	d1 f7       	brne	.-12     	; 0x1f4b8 <processPacket+0x184>
   1f4c4:	ee 24       	eor	r14, r14
   1f4c6:	ff 24       	eor	r15, r15
   1f4c8:	88 0f       	add	r24, r24
   1f4ca:	89 2f       	mov	r24, r25
   1f4cc:	88 1f       	adc	r24, r24
   1f4ce:	99 0b       	sbc	r25, r25
   1f4d0:	91 95       	neg	r25
   1f4d2:	a0 e0       	ldi	r26, 0x00	; 0
   1f4d4:	b0 e0       	ldi	r27, 0x00	; 0
   1f4d6:	dc 01       	movw	r26, r24
   1f4d8:	99 27       	eor	r25, r25
   1f4da:	88 27       	eor	r24, r24
   1f4dc:	c8 2a       	or	r12, r24
   1f4de:	d9 2a       	or	r13, r25
   1f4e0:	ea 2a       	or	r14, r26
   1f4e2:	fb 2a       	or	r15, r27
#else
			writeAddr = (address_t)((address_t)(tftpBlock - 1) << 9); // Flash write address for this block
#endif

			if((writeAddr + packetLength) > MAX_ADDR) {
   1f4e4:	d7 01       	movw	r26, r14
   1f4e6:	c6 01       	movw	r24, r12
   1f4e8:	80 0f       	add	r24, r16
   1f4ea:	91 1f       	adc	r25, r17
   1f4ec:	a1 1d       	adc	r26, r1
   1f4ee:	b1 1d       	adc	r27, r1
   1f4f0:	81 30       	cpi	r24, 0x01	; 1
   1f4f2:	90 4f       	sbci	r25, 0xF0	; 240
   1f4f4:	a1 40       	sbci	r26, 0x01	; 1
   1f4f6:	b1 05       	cpc	r27, r1
   1f4f8:	38 f0       	brcs	.+14     	; 0x1f508 <processPacket+0x1d4>
				// Flash is full - abort with an error before a bootloader overwrite occurs
				// Application is now corrupt, so do not hand over.

				DBG_TFTP(tracePGMlnTftp(mDebugTftp_FULL);)

				returnCode = ERROR_FULL;
   1f4fa:	23 e0       	ldi	r18, 0x03	; 3
   1f4fc:	c3 5f       	subi	r28, 0xF3	; 243
   1f4fe:	dd 4f       	sbci	r29, 0xFD	; 253
   1f500:	28 83       	st	Y, r18
   1f502:	cd 50       	subi	r28, 0x0D	; 13
   1f504:	d2 40       	sbci	r29, 0x02	; 2
   1f506:	72 c0       	rjmp	.+228    	; 0x1f5ec <processPacket+0x2b8>
				uint8_t* pageBase = buffer + (UDP_HEADER_SIZE + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE); // Start of block data
				uint16_t offset = 0; // Block offset


				// Set the return code before packetLength gets rounded up
				if(packetLength < TFTP_DATA_SIZE) returnCode = FINAL_ACK;
   1f508:	01 15       	cp	r16, r1
   1f50a:	f2 e0       	ldi	r31, 0x02	; 2
   1f50c:	1f 07       	cpc	r17, r31
   1f50e:	10 f4       	brcc	.+4      	; 0x1f514 <processPacket+0x1e0>
   1f510:	24 e0       	ldi	r18, 0x04	; 4
   1f512:	01 c0       	rjmp	.+2      	; 0x1f516 <processPacket+0x1e2>
				else returnCode = ACK;
   1f514:	22 e0       	ldi	r18, 0x02	; 2
   1f516:	c3 5f       	subi	r28, 0xF3	; 243
   1f518:	dd 4f       	sbci	r29, 0xFD	; 253
   1f51a:	28 83       	st	Y, r18
   1f51c:	cd 50       	subi	r28, 0x0D	; 13
   1f51e:	d2 40       	sbci	r29, 0x02	; 2

				// Round up packet length to a full flash sector size
				while(packetLength % SPM_PAGESIZE) packetLength++;
   1f520:	00 23       	and	r16, r16
   1f522:	19 f0       	breq	.+6      	; 0x1f52a <processPacket+0x1f6>
   1f524:	0f 5f       	subi	r16, 0xFF	; 255
   1f526:	1f 4f       	sbci	r17, 0xFF	; 255
   1f528:	fb cf       	rjmp	.-10     	; 0x1f520 <processPacket+0x1ec>
				DBG_TFTP(
					tracePGMlnTftp(mDebugTftp_PLEN);
					tracenum(packetLength);
				)

				if(writeAddr == 0) {
   1f52a:	c1 14       	cp	r12, r1
   1f52c:	d1 04       	cpc	r13, r1
   1f52e:	e1 04       	cpc	r14, r1
   1f530:	f1 04       	cpc	r15, r1
   1f532:	19 f4       	brne	.+6      	; 0x1f53a <processPacket+0x206>
					// First sector - validate
					if(!validImage(pageBase)) {
   1f534:	ce 01       	movw	r24, r28
   1f536:	0d 96       	adiw	r24, 0x0d	; 13
   1f538:	59 d1       	rcall	.+690    	; 0x1f7ec <validImage>
   1f53a:	de 01       	movw	r26, r28
   1f53c:	1d 96       	adiw	r26, 0x0d	; 13
					}
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
   1f53e:	20 e0       	ldi	r18, 0x00	; 0
   1f540:	30 e0       	ldi	r19, 0x00	; 0
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
					boot_page_fill(writeAddr + offset, writeValue);
   1f542:	99 24       	eor	r9, r9
   1f544:	93 94       	inc	r9
					)

					offset += 2;

					if(offset % SPM_PAGESIZE == 0) {
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
   1f546:	26 01       	movw	r4, r12
   1f548:	37 01       	movw	r6, r14
   1f54a:	81 e0       	ldi	r24, 0x01	; 1
   1f54c:	58 1a       	sub	r5, r24
   1f54e:	61 08       	sbc	r6, r1
   1f550:	71 08       	sbc	r7, r1
   1f552:	f3 e0       	ldi	r31, 0x03	; 3
   1f554:	8f 2e       	mov	r8, r31
						boot_spm_busy_wait();
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
   1f556:	85 e0       	ldi	r24, 0x05	; 5
   1f558:	38 2e       	mov	r3, r24
						boot_spm_busy_wait();
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
   1f55a:	91 e1       	ldi	r25, 0x11	; 17
   1f55c:	29 2e       	mov	r2, r25
					}
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
   1f55e:	20 17       	cp	r18, r16
   1f560:	31 07       	cpc	r19, r17
   1f562:	08 f0       	brcs	.+2      	; 0x1f566 <processPacket+0x232>
   1f564:	38 c0       	rjmp	.+112    	; 0x1f5d6 <processPacket+0x2a2>
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
					boot_page_fill(writeAddr + offset, writeValue);
   1f566:	c7 01       	movw	r24, r14
   1f568:	b6 01       	movw	r22, r12
   1f56a:	62 0f       	add	r22, r18
   1f56c:	73 1f       	adc	r23, r19
   1f56e:	81 1d       	adc	r24, r1
   1f570:	91 1d       	adc	r25, r1
   1f572:	f5 01       	movw	r30, r10
   1f574:	e2 0f       	add	r30, r18
   1f576:	f3 1f       	adc	r31, r19
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
   1f578:	45 85       	ldd	r20, Z+13	; 0x0d
   1f57a:	50 e0       	ldi	r21, 0x00	; 0
   1f57c:	54 2f       	mov	r21, r20
   1f57e:	44 27       	eor	r20, r20
   1f580:	ec 91       	ld	r30, X
   1f582:	4e 2b       	or	r20, r30
					boot_page_fill(writeAddr + offset, writeValue);
   1f584:	0a 01       	movw	r0, r20
   1f586:	fb 01       	movw	r30, r22
   1f588:	80 93 5b 00 	sts	0x005B, r24
   1f58c:	90 92 57 00 	sts	0x0057, r9
   1f590:	e8 95       	spm
   1f592:	11 24       	eor	r1, r1
							tracePGM(mDebugTftp_OFFSET);
							tracenum(writeAddr + offset);
						}
					)

					offset += 2;
   1f594:	2e 5f       	subi	r18, 0xFE	; 254
   1f596:	3f 4f       	sbci	r19, 0xFF	; 255

					if(offset % SPM_PAGESIZE == 0) {
   1f598:	21 11       	cpse	r18, r1
   1f59a:	1b c0       	rjmp	.+54     	; 0x1f5d2 <processPacket+0x29e>
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
   1f59c:	b3 01       	movw	r22, r6
   1f59e:	a2 01       	movw	r20, r4
   1f5a0:	42 0f       	add	r20, r18
   1f5a2:	53 1f       	adc	r21, r19
   1f5a4:	61 1d       	adc	r22, r1
   1f5a6:	71 1d       	adc	r23, r1
   1f5a8:	fa 01       	movw	r30, r20
   1f5aa:	60 93 5b 00 	sts	0x005B, r22
   1f5ae:	80 92 57 00 	sts	0x0057, r8
   1f5b2:	e8 95       	spm
						boot_spm_busy_wait();
   1f5b4:	07 b6       	in	r0, 0x37	; 55
   1f5b6:	00 fc       	sbrc	r0, 0
   1f5b8:	fd cf       	rjmp	.-6      	; 0x1f5b4 <processPacket+0x280>
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
   1f5ba:	fa 01       	movw	r30, r20
   1f5bc:	60 93 5b 00 	sts	0x005B, r22
   1f5c0:	30 92 57 00 	sts	0x0057, r3
   1f5c4:	e8 95       	spm
						boot_spm_busy_wait();
   1f5c6:	07 b6       	in	r0, 0x37	; 55
   1f5c8:	00 fc       	sbrc	r0, 0
   1f5ca:	fd cf       	rjmp	.-6      	; 0x1f5c6 <processPacket+0x292>
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
   1f5cc:	20 92 57 00 	sts	0x0057, r2
   1f5d0:	e8 95       	spm
   1f5d2:	12 96       	adiw	r26, 0x02	; 2
   1f5d4:	c4 cf       	rjmp	.-120    	; 0x1f55e <processPacket+0x22a>
#endif
					}
				}

				if(returnCode == FINAL_ACK) {
   1f5d6:	c3 5f       	subi	r28, 0xF3	; 243
   1f5d8:	dd 4f       	sbci	r29, 0xFD	; 253
   1f5da:	28 81       	ld	r18, Y
   1f5dc:	cd 50       	subi	r28, 0x0D	; 13
   1f5de:	d2 40       	sbci	r29, 0x02	; 2
   1f5e0:	24 30       	cpi	r18, 0x04	; 4
   1f5e2:	21 f4       	brne	.+8      	; 0x1f5ec <processPacket+0x2b8>
					// Hand over to application

					DBG_TFTP(tracePGMlnTftp(mDebugTftp_DONE);)

					// Flag the image as valid since we received the last packet
					eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
   1f5e4:	6e ee       	ldi	r22, 0xEE	; 238
   1f5e6:	82 e0       	ldi	r24, 0x02	; 2
   1f5e8:	90 e0       	ldi	r25, 0x00	; 0
   1f5ea:	a8 d2       	rcall	.+1360   	; 0x1fb3c <__eewr_byte_m1284p>
			break;

	}

	return(returnCode);
}
   1f5ec:	c3 5f       	subi	r28, 0xF3	; 243
   1f5ee:	dd 4f       	sbci	r29, 0xFD	; 253
   1f5f0:	88 81       	ld	r24, Y
   1f5f2:	cd 50       	subi	r28, 0x0D	; 13
   1f5f4:	d2 40       	sbci	r29, 0x02	; 2
   1f5f6:	c3 5f       	subi	r28, 0xF3	; 243
   1f5f8:	dd 4f       	sbci	r29, 0xFD	; 253
   1f5fa:	de bf       	out	0x3e, r29	; 62
   1f5fc:	cd bf       	out	0x3d, r28	; 61
   1f5fe:	df 91       	pop	r29
   1f600:	cf 91       	pop	r28
   1f602:	1f 91       	pop	r17
   1f604:	0f 91       	pop	r16
   1f606:	ff 90       	pop	r15
   1f608:	ef 90       	pop	r14
   1f60a:	df 90       	pop	r13
   1f60c:	cf 90       	pop	r12
   1f60e:	bf 90       	pop	r11
   1f610:	af 90       	pop	r10
   1f612:	9f 90       	pop	r9
   1f614:	8f 90       	pop	r8
   1f616:	7f 90       	pop	r7
   1f618:	6f 90       	pop	r6
   1f61a:	5f 90       	pop	r5
   1f61c:	4f 90       	pop	r4
   1f61e:	3f 90       	pop	r3
   1f620:	2f 90       	pop	r2
   1f622:	08 95       	ret

0001f624 <tftpInit>:

/**
 * Initializes the network controller
 */
void tftpInit(void)
{
   1f624:	cf 93       	push	r28
	// Open socket
	sockInit(TFTP_PORT);
   1f626:	85 e4       	ldi	r24, 0x45	; 69
   1f628:	90 e0       	ldi	r25, 0x00	; 0
   1f62a:	60 de       	rcall	.-832    	; 0x1f2ec <sockInit>

#if defined(RANDOM_TFTP_DATA_PORT)
#else
	if(eeprom_read_byte(EEPROM_SIG_3) == EEPROM_SIG_3_VALUE)
   1f62c:	87 e1       	ldi	r24, 0x17	; 23
   1f62e:	90 e0       	ldi	r25, 0x00	; 0
   1f630:	7d d2       	rcall	.+1274   	; 0x1fb2c <__eerd_byte_m1284p>
   1f632:	8b 3b       	cpi	r24, 0xBB	; 187
   1f634:	91 f4       	brne	.+36     	; 0x1f65a <tftpInit+0x36>
		tftpTransferPort = ((eeprom_read_byte(EEPROM_PORT + 1) << 8) + eeprom_read_byte(EEPROM_PORT));
   1f636:	89 e1       	ldi	r24, 0x19	; 25
   1f638:	90 e0       	ldi	r25, 0x00	; 0
   1f63a:	78 d2       	rcall	.+1264   	; 0x1fb2c <__eerd_byte_m1284p>
   1f63c:	c8 2f       	mov	r28, r24
   1f63e:	88 e1       	ldi	r24, 0x18	; 24
   1f640:	90 e0       	ldi	r25, 0x00	; 0
   1f642:	74 d2       	rcall	.+1256   	; 0x1fb2c <__eerd_byte_m1284p>
   1f644:	2c 2f       	mov	r18, r28
   1f646:	30 e0       	ldi	r19, 0x00	; 0
   1f648:	32 2f       	mov	r19, r18
   1f64a:	22 27       	eor	r18, r18
   1f64c:	28 0f       	add	r18, r24
   1f64e:	31 1d       	adc	r19, r1
   1f650:	30 93 28 01 	sts	0x0128, r19
   1f654:	20 93 27 01 	sts	0x0127, r18
   1f658:	06 c0       	rjmp	.+12     	; 0x1f666 <tftpInit+0x42>
	else
		tftpTransferPort = TFTP_DATA_PORT;
   1f65a:	89 e7       	ldi	r24, 0x79	; 121
   1f65c:	97 eb       	ldi	r25, 0xB7	; 183
   1f65e:	90 93 28 01 	sts	0x0128, r25
   1f662:	80 93 27 01 	sts	0x0127, r24
#else
		tracePGMlnTftp(mDebugTftp_PORT);
		tracenum(tftpTransferPort);
#endif
	)
}
   1f666:	cf 91       	pop	r28
   1f668:	08 95       	ret

0001f66a <tftpPoll>:

/**
 * Looks for a connection
 */
uint8_t tftpPoll(void)
{
   1f66a:	af 92       	push	r10
   1f66c:	bf 92       	push	r11
   1f66e:	cf 92       	push	r12
   1f670:	df 92       	push	r13
   1f672:	ef 92       	push	r14
   1f674:	ff 92       	push	r15
   1f676:	0f 93       	push	r16
   1f678:	1f 93       	push	r17
   1f67a:	cf 93       	push	r28
   1f67c:	df 93       	push	r29
   1f67e:	cd b7       	in	r28, 0x3d	; 61
   1f680:	de b7       	in	r29, 0x3e	; 62
   1f682:	c4 56       	subi	r28, 0x64	; 100
   1f684:	d1 09       	sbc	r29, r1
   1f686:	de bf       	out	0x3e, r29	; 62
   1f688:	cd bf       	out	0x3d, r28	; 61
	uint8_t response = ACK;
	// Get the size of the recieved data
	uint16_t packetSize = spiReadWord(REG_S3_RX_RSR0);
   1f68a:	86 e2       	ldi	r24, 0x26	; 38
   1f68c:	97 e0       	ldi	r25, 0x07	; 7
   1f68e:	e0 dd       	rcall	.-1088   	; 0x1f250 <spiReadWord>
// 			_delay_ms(400);
// 			packetSize = spiReadWord(REG_S3_RX_RSR0);
// 		}
// 	} while (packetSize != incSize);

	if(packetSize) {
   1f690:	89 2b       	or	r24, r25
   1f692:	11 f4       	brne	.+4      	; 0x1f698 <tftpPoll+0x2e>
		// Complete
		return(0);
	}

	// Tftp continues
	return(1);
   1f694:	81 e0       	ldi	r24, 0x01	; 1
   1f696:	9b c0       	rjmp	.+310    	; 0x1f7ce <tftpPoll+0x164>
// 			packetSize = spiReadWord(REG_S3_RX_RSR0);
// 		}
// 	} while (packetSize != incSize);

	if(packetSize) {
		tftpFlashing = TRUE;
   1f698:	81 e0       	ldi	r24, 0x01	; 1
   1f69a:	80 93 2a 01 	sts	0x012A, r24

		while((spiReadReg(REG_S3_IR) & IR_RECV)) {
   1f69e:	82 e0       	ldi	r24, 0x02	; 2
   1f6a0:	97 e0       	ldi	r25, 0x07	; 7
   1f6a2:	bc dd       	rcall	.-1160   	; 0x1f21c <spiReadReg>
   1f6a4:	82 ff       	sbrs	r24, 2
   1f6a6:	0e c0       	rjmp	.+28     	; 0x1f6c4 <tftpPoll+0x5a>
			spiWriteReg(REG_S3_IR, IR_RECV);
   1f6a8:	64 e0       	ldi	r22, 0x04	; 4
   1f6aa:	82 e0       	ldi	r24, 0x02	; 2
   1f6ac:	97 e0       	ldi	r25, 0x07	; 7
   1f6ae:	8c dd       	rcall	.-1256   	; 0x1f1c8 <spiWriteReg>
   1f6b0:	2f ef       	ldi	r18, 0xFF	; 255
   1f6b2:	37 e8       	ldi	r19, 0x87	; 135
   1f6b4:	83 e1       	ldi	r24, 0x13	; 19
   1f6b6:	21 50       	subi	r18, 0x01	; 1
   1f6b8:	30 40       	sbci	r19, 0x00	; 0
   1f6ba:	80 40       	sbci	r24, 0x00	; 0
   1f6bc:	e1 f7       	brne	.-8      	; 0x1f6b6 <tftpPoll+0x4c>
   1f6be:	00 c0       	rjmp	.+0      	; 0x1f6c0 <tftpPoll+0x56>
   1f6c0:	00 00       	nop
   1f6c2:	ed cf       	rjmp	.-38     	; 0x1f69e <tftpPoll+0x34>
		// Process Packet and get TFTP response code
#if (DEBUG_TFTP > 0)
		packetSize = spiReadWord(REG_S3_RX_RSR0);
		response = processPacket(packetSize);
#else
		response = processPacket();
   1f6c4:	37 de       	rcall	.-914    	; 0x1f334 <processPacket>
   1f6c6:	f8 2e       	mov	r15, r24
	uint8_t txBuffer[100];
	uint8_t* txPtr = txBuffer;
	uint8_t packetLength;
	uint16_t writePointer;

	writePointer = spiReadWord(REG_S3_TX_WR0) + S3_TX_START;
   1f6c8:	84 e2       	ldi	r24, 0x24	; 36
   1f6ca:	97 e0       	ldi	r25, 0x07	; 7
   1f6cc:	c1 dd       	rcall	.-1150   	; 0x1f250 <spiReadWord>
   1f6ce:	8c 01       	movw	r16, r24
   1f6d0:	18 5a       	subi	r17, 0xA8	; 168

	switch(response) {
   1f6d2:	92 e0       	ldi	r25, 0x02	; 2
   1f6d4:	f9 16       	cp	r15, r25
   1f6d6:	c1 f1       	breq	.+112    	; 0x1f748 <tftpPoll+0xde>
   1f6d8:	9f 15       	cp	r25, r15
   1f6da:	20 f0       	brcs	.+8      	; 0x1f6e4 <tftpPoll+0x7a>
   1f6dc:	e1 e0       	ldi	r30, 0x01	; 1
   1f6de:	fe 16       	cp	r15, r30
   1f6e0:	c9 f0       	breq	.+50     	; 0x1f714 <tftpPoll+0xaa>
   1f6e2:	06 c0       	rjmp	.+12     	; 0x1f6f0 <tftpPoll+0x86>
   1f6e4:	f3 e0       	ldi	r31, 0x03	; 3
   1f6e6:	ff 16       	cp	r15, r31
   1f6e8:	11 f1       	breq	.+68     	; 0x1f72e <tftpPoll+0xc4>
   1f6ea:	24 e0       	ldi	r18, 0x04	; 4
   1f6ec:	f2 16       	cp	r15, r18
   1f6ee:	d9 f1       	breq	.+118    	; 0x1f766 <tftpPoll+0xfc>

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_unknown_error_packet, packetLength);
   1f6f0:	44 ea       	ldi	r20, 0xA4	; 164
   1f6f2:	50 ef       	ldi	r21, 0xF0	; 240
   1f6f4:	60 e0       	ldi	r22, 0x00	; 0
   1f6f6:	70 e0       	ldi	r23, 0x00	; 0
   1f6f8:	6f 5f       	subi	r22, 0xFF	; 255
   1f6fa:	7f 4f       	sbci	r23, 0xFF	; 255
   1f6fc:	2a e0       	ldi	r18, 0x0A	; 10
   1f6fe:	30 e0       	ldi	r19, 0x00	; 0
   1f700:	ce 01       	movw	r24, r28
   1f702:	01 96       	adiw	r24, 0x01	; 1
   1f704:	09 d2       	rcall	.+1042   	; 0x1fb18 <memcpy_PF>
	switch(response) {
		default:

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
   1f706:	8a e0       	ldi	r24, 0x0A	; 10
	txPtr = txBuffer;

	while(packetLength--) {
		spiWriteReg(writePointer++, *txPtr++);

		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
   1f708:	fe 01       	movw	r30, r28
   1f70a:	31 96       	adiw	r30, 0x01	; 1
   1f70c:	6f 01       	movw	r12, r30
   1f70e:	e8 2e       	mov	r14, r24
   1f710:	ee 0e       	add	r14, r30
   1f712:	45 c0       	rjmp	.+138    	; 0x1f79e <tftpPoll+0x134>

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_opcode_error_packet, packetLength);
   1f714:	49 eb       	ldi	r20, 0xB9	; 185
   1f716:	50 ef       	ldi	r21, 0xF0	; 240
   1f718:	60 e0       	ldi	r22, 0x00	; 0
   1f71a:	70 e0       	ldi	r23, 0x00	; 0
   1f71c:	6f 5f       	subi	r22, 0xFF	; 255
   1f71e:	7f 4f       	sbci	r23, 0xFF	; 255
   1f720:	2c e0       	ldi	r18, 0x0C	; 12
   1f722:	30 e0       	ldi	r19, 0x00	; 0
   1f724:	ce 01       	movw	r24, r28
   1f726:	01 96       	adiw	r24, 0x01	; 1
   1f728:	f7 d1       	rcall	.+1006   	; 0x1fb18 <memcpy_PF>
#endif
			break;

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
   1f72a:	8c e0       	ldi	r24, 0x0C	; 12
   1f72c:	ed cf       	rjmp	.-38     	; 0x1f708 <tftpPoll+0x9e>

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_full_error_packet, packetLength);
   1f72e:	4f ea       	ldi	r20, 0xAF	; 175
   1f730:	50 ef       	ldi	r21, 0xF0	; 240
   1f732:	60 e0       	ldi	r22, 0x00	; 0
   1f734:	70 e0       	ldi	r23, 0x00	; 0
   1f736:	6f 5f       	subi	r22, 0xFF	; 255
   1f738:	7f 4f       	sbci	r23, 0xFF	; 255
   1f73a:	29 e0       	ldi	r18, 0x09	; 9
   1f73c:	30 e0       	ldi	r19, 0x00	; 0
   1f73e:	ce 01       	movw	r24, r28
   1f740:	01 96       	adiw	r24, 0x01	; 1
   1f742:	ea d1       	rcall	.+980    	; 0x1fb18 <memcpy_PF>
#endif
			break;

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
   1f744:	89 e0       	ldi	r24, 0x09	; 9
   1f746:	e0 cf       	rjmp	.-64     	; 0x1f708 <tftpPoll+0x9e>
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
#endif
			break;

		case ACK:
			if(lastPacket > highPacket) highPacket = lastPacket;
   1f748:	80 91 1e 01 	lds	r24, 0x011E
   1f74c:	90 91 1f 01 	lds	r25, 0x011F
   1f750:	20 91 1c 01 	lds	r18, 0x011C
   1f754:	30 91 1d 01 	lds	r19, 0x011D
   1f758:	28 17       	cp	r18, r24
   1f75a:	39 07       	cpc	r19, r25
   1f75c:	20 f4       	brcc	.+8      	; 0x1f766 <tftpPoll+0xfc>
   1f75e:	90 93 1d 01 	sts	0x011D, r25
   1f762:	80 93 1c 01 	sts	0x011C, r24
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
			*txPtr++ = TFTP_OPCODE_ACK >> 8;
   1f766:	19 82       	std	Y+1, r1	; 0x01
			*txPtr++ = TFTP_OPCODE_ACK & 0xff;
   1f768:	84 e0       	ldi	r24, 0x04	; 4
   1f76a:	8a 83       	std	Y+2, r24	; 0x02
			// lastPacket is block code
			*txPtr++ = lastPacket >> 8;
   1f76c:	80 91 1e 01 	lds	r24, 0x011E
   1f770:	90 91 1f 01 	lds	r25, 0x011F
   1f774:	9b 83       	std	Y+3, r25	; 0x03
			*txPtr = lastPacket & 0xff;
   1f776:	8c 83       	std	Y+4, r24	; 0x04
			DBG_TFTP(
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
   1f778:	84 e0       	ldi	r24, 0x04	; 4
   1f77a:	c6 cf       	rjmp	.-116    	; 0x1f708 <tftpPoll+0x9e>
	}

	txPtr = txBuffer;

	while(packetLength--) {
		spiWriteReg(writePointer++, *txPtr++);
   1f77c:	f6 01       	movw	r30, r12
   1f77e:	61 91       	ld	r22, Z+
   1f780:	6f 01       	movw	r12, r30
   1f782:	58 01       	movw	r10, r16
   1f784:	ff ef       	ldi	r31, 0xFF	; 255
   1f786:	af 1a       	sub	r10, r31
   1f788:	bf 0a       	sbc	r11, r31
   1f78a:	c8 01       	movw	r24, r16
   1f78c:	1d dd       	rcall	.-1478   	; 0x1f1c8 <spiWriteReg>

		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
   1f78e:	a1 14       	cp	r10, r1
   1f790:	20 e6       	ldi	r18, 0x60	; 96
   1f792:	b2 06       	cpc	r11, r18
   1f794:	19 f4       	brne	.+6      	; 0x1f79c <tftpPoll+0x132>
   1f796:	a1 2c       	mov	r10, r1
   1f798:	a8 e5       	ldi	r26, 0x58	; 88
   1f79a:	ba 2e       	mov	r11, r26
   1f79c:	85 01       	movw	r16, r10
			break;
	}

	txPtr = txBuffer;

	while(packetLength--) {
   1f79e:	ec 10       	cpse	r14, r12
   1f7a0:	ed cf       	rjmp	.-38     	; 0x1f77c <tftpPoll+0x112>
		spiWriteReg(writePointer++, *txPtr++);

		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
	}

	spiWriteWord(REG_S3_TX_WR0, writePointer - S3_TX_START);
   1f7a2:	b8 01       	movw	r22, r16
   1f7a4:	78 55       	subi	r23, 0x58	; 88
   1f7a6:	84 e2       	ldi	r24, 0x24	; 36
   1f7a8:	97 e0       	ldi	r25, 0x07	; 7
   1f7aa:	27 dd       	rcall	.-1458   	; 0x1f1fa <spiWriteWord>
	spiWriteReg(REG_S3_CR, CR_SEND);
   1f7ac:	60 e2       	ldi	r22, 0x20	; 32
   1f7ae:	81 e0       	ldi	r24, 0x01	; 1
   1f7b0:	97 e0       	ldi	r25, 0x07	; 7
   1f7b2:	0a dd       	rcall	.-1516   	; 0x1f1c8 <spiWriteReg>

	while(spiReadReg(REG_S3_CR));
   1f7b4:	81 e0       	ldi	r24, 0x01	; 1
   1f7b6:	97 e0       	ldi	r25, 0x07	; 7
   1f7b8:	31 dd       	rcall	.-1438   	; 0x1f21c <spiReadReg>
   1f7ba:	81 11       	cpse	r24, r1
   1f7bc:	fb cf       	rjmp	.-10     	; 0x1f7b4 <tftpPoll+0x14a>
#endif
		// Send the response
		sendResponse(response);
	}

	if(response == FINAL_ACK) {
   1f7be:	34 e0       	ldi	r19, 0x04	; 4
   1f7c0:	f3 12       	cpse	r15, r19
   1f7c2:	68 cf       	rjmp	.-304    	; 0x1f694 <tftpPoll+0x2a>
		spiWriteReg(REG_S3_CR, CR_CLOSE);
   1f7c4:	60 e1       	ldi	r22, 0x10	; 16
   1f7c6:	81 e0       	ldi	r24, 0x01	; 1
   1f7c8:	97 e0       	ldi	r25, 0x07	; 7
   1f7ca:	fe dc       	rcall	.-1540   	; 0x1f1c8 <spiWriteReg>
		// Complete
		return(0);
   1f7cc:	80 e0       	ldi	r24, 0x00	; 0
	}

	// Tftp continues
	return(1);
}
   1f7ce:	cc 59       	subi	r28, 0x9C	; 156
   1f7d0:	df 4f       	sbci	r29, 0xFF	; 255
   1f7d2:	de bf       	out	0x3e, r29	; 62
   1f7d4:	cd bf       	out	0x3d, r28	; 61
   1f7d6:	df 91       	pop	r29
   1f7d8:	cf 91       	pop	r28
   1f7da:	1f 91       	pop	r17
   1f7dc:	0f 91       	pop	r16
   1f7de:	ff 90       	pop	r15
   1f7e0:	ef 90       	pop	r14
   1f7e2:	df 90       	pop	r13
   1f7e4:	cf 90       	pop	r12
   1f7e6:	bf 90       	pop	r11
   1f7e8:	af 90       	pop	r10
   1f7ea:	08 95       	ret

0001f7ec <validImage>:
#include "serial.h"
#include "debug.h"
#include "debug_vald.h"

uint8_t validImage(uint8_t* base)
{
   1f7ec:	20 e0       	ldi	r18, 0x00	; 0
   1f7ee:	30 e0       	ldi	r19, 0x00	; 0
   1f7f0:	fc 01       	movw	r30, r24
   1f7f2:	e2 0f       	add	r30, r18
   1f7f4:	f3 1f       	adc	r31, r19
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {

		// For each vector, check it is of the form:
		// 0x0C 0x94 0xWX 0xYZ  ; JMP 0xWXYZ
		if(base[i] != 0x0c) {
   1f7f6:	40 81       	ld	r20, Z
   1f7f8:	4c 30       	cpi	r20, 0x0C	; 12
   1f7fa:	51 f4       	brne	.+20     	; 0x1f810 <validImage+0x24>
				tracePGM(mDebugVald_0x0C);
			)
			return(0);
		}
		
		if(base[i + 1] != 0x94) {
   1f7fc:	41 81       	ldd	r20, Z+1	; 0x01
   1f7fe:	44 39       	cpi	r20, 0x94	; 148
   1f800:	39 f4       	brne	.+14     	; 0x1f810 <validImage+0x24>
   1f802:	2c 5f       	subi	r18, 0xFC	; 252
   1f804:	3f 4f       	sbci	r19, 0xFF	; 255

uint8_t validImage(uint8_t* base)
{
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
   1f806:	24 33       	cpi	r18, 0x34	; 52
   1f808:	31 05       	cpc	r19, r1
   1f80a:	91 f7       	brne	.-28     	; 0x1f7f0 <validImage+0x4>
		}
	}

	DBG_VALD(tracePGMlnVald(mDebugVald_VALID);)

	return(1);
   1f80c:	81 e0       	ldi	r24, 0x01	; 1
}
   1f80e:	08 95       	ret
				tracenum(i);
				tracePGM(mDebugVald_WITH);
				tracenum(base[i]);
				tracePGM(mDebugVald_0x0C);
			)
			return(0);
   1f810:	80 e0       	ldi	r24, 0x00	; 0
   1f812:	08 95       	ret

0001f814 <serialInit>:


void serialInit(void)
{
	// Double speed mode USART0
	UART_STATUS_REG		= _BV(UART_DOUBLE_SPEED);
   1f814:	82 e0       	ldi	r24, 0x02	; 2
   1f816:	80 93 c0 00 	sts	0x00C0, r24
	// Enable receiver and transiter on USART0
	UART_CONTROL_REG	= _BV(UART_ENABLE_RECEIVER) | _BV(UART_ENABLE_TRANSMITTER);
   1f81a:	88 e1       	ldi	r24, 0x18	; 24
   1f81c:	80 93 c1 00 	sts	0x00C1, r24
	// Set 8bit character length on USART0
	UART_MODE_REG		= _BV(UART_CHAR_SIZE_LOW) | _BV(UART_CHAR_SIZE_MID);
   1f820:	86 e0       	ldi	r24, 0x06	; 6
   1f822:	80 93 c2 00 	sts	0x00C2, r24
	// Set USART0 baud rate
	UART_BAUD_RATE_LOW	= (uint8_t)((F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1);
   1f826:	80 e1       	ldi	r24, 0x10	; 16
   1f828:	80 93 c4 00 	sts	0x00C4, r24
   1f82c:	08 95       	ret

0001f82e <putch>:
}


void putch(uint8_t c)
{
	while(!(UART_STATUS_REG & _BV(UART_DATA_REG_EMPTY)));
   1f82e:	90 91 c0 00 	lds	r25, 0x00C0
   1f832:	95 ff       	sbrs	r25, 5
   1f834:	fc cf       	rjmp	.-8      	; 0x1f82e <putch>
	UART_DATA_REG = c;
   1f836:	80 93 c6 00 	sts	0x00C6, r24
   1f83a:	08 95       	ret

0001f83c <puthex>:
}


void puthex(uint8_t c)
{
	c &= 0xf;
   1f83c:	8f 70       	andi	r24, 0x0F	; 15
	if(c > 9) c += 7;
   1f83e:	8a 30       	cpi	r24, 0x0A	; 10
   1f840:	08 f0       	brcs	.+2      	; 0x1f844 <puthex+0x8>
   1f842:	89 5f       	subi	r24, 0xF9	; 249
	//while(!(UART_STATUS_REG & _BV(UART_DATA_REG_EMPTY)));
	//UART_DATA_REG = c + '0';
	putch(c + '0');
   1f844:	80 5d       	subi	r24, 0xD0	; 208
   1f846:	f3 cf       	rjmp	.-26     	; 0x1f82e <putch>

0001f848 <getch>:

uint8_t getch(void)
{
	//uint8_t ch;

	while(!(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)));
   1f848:	80 91 c0 00 	lds	r24, 0x00C0
   1f84c:	87 ff       	sbrs	r24, 7
   1f84e:	fc cf       	rjmp	.-8      	; 0x1f848 <getch>
	if(!(UART_STATUS_REG & _BV(UART_FRAME_ERROR))) {
   1f850:	80 91 c0 00 	lds	r24, 0x00C0
   1f854:	84 fd       	sbrc	r24, 4
   1f856:	01 c0       	rjmp	.+2      	; 0x1f85a <getch+0x12>
		 * expects to be talking to the application, and DON'T reset the
		 * watchdog.  This should cause the bootloader to abort and run
		 * the application "soon", if it keeps happening.  (Note that we
		 * don't care that an invalid char is returned...)
		 */
		wdt_reset();
   1f858:	a8 95       	wdr
	}

	//ch = UART_DATA_REG;
	//return ch;

	return(UART_DATA_REG);
   1f85a:	80 91 c6 00 	lds	r24, 0x00C6
}
   1f85e:	08 95       	ret

0001f860 <serialPoll>:


uint8_t serialPoll(void)
{
	if(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)) {
   1f860:	80 91 c0 00 	lds	r24, 0x00C0
   1f864:	87 ff       	sbrs	r24, 7
   1f866:	05 c0       	rjmp	.+10     	; 0x1f872 <serialPoll+0x12>
		resetTick();
   1f868:	28 d0       	rcall	.+80     	; 0x1f8ba <resetTick>
		serialFlashing = TRUE;
   1f86a:	81 e0       	ldi	r24, 0x01	; 1
   1f86c:	80 93 29 01 	sts	0x0129, r24
#if defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__) || defined(__AVR_ATmega1284P__)
		return(processOptiboot());
   1f870:	53 c0       	rjmp	.+166    	; 0x1f918 <processOptiboot>
#elif defined(__AVR_ATmega2560__)
		return(processStk500boot());
#endif
	}
	return(1);
}
   1f872:	81 e0       	ldi	r24, 0x01	; 1
   1f874:	08 95       	ret

0001f876 <updateLed>:
static uint16_t tick = 0;


void updateLed(void)
{
	uint16_t next_timer_1 = TCNT1;
   1f876:	80 91 84 00 	lds	r24, 0x0084
   1f87a:	90 91 85 00 	lds	r25, 0x0085

	if(next_timer_1 & 0x400) LED_PORT ^= _BV(LED); // Led pin high
   1f87e:	92 ff       	sbrs	r25, 2
   1f880:	05 c0       	rjmp	.+10     	; 0x1f88c <updateLed+0x16>
   1f882:	2b b1       	in	r18, 0x0b	; 11
   1f884:	30 e2       	ldi	r19, 0x20	; 32
   1f886:	23 27       	eor	r18, r19
   1f888:	2b b9       	out	0x0b, r18	; 11
   1f88a:	01 c0       	rjmp	.+2      	; 0x1f88e <updateLed+0x18>
	else LED_PORT &= ~_BV(LED); // Led pin low
   1f88c:	5d 98       	cbi	0x0b, 5	; 11

	if(next_timer_1 < last_timer_1) {
   1f88e:	20 91 22 01 	lds	r18, 0x0122
   1f892:	30 91 23 01 	lds	r19, 0x0123
   1f896:	82 17       	cp	r24, r18
   1f898:	93 07       	cpc	r25, r19
   1f89a:	50 f4       	brcc	.+20     	; 0x1f8b0 <updateLed+0x3a>
		tick++;
   1f89c:	20 91 20 01 	lds	r18, 0x0120
   1f8a0:	30 91 21 01 	lds	r19, 0x0121
   1f8a4:	2f 5f       	subi	r18, 0xFF	; 255
   1f8a6:	3f 4f       	sbci	r19, 0xFF	; 255
   1f8a8:	30 93 21 01 	sts	0x0121, r19
   1f8ac:	20 93 20 01 	sts	0x0120, r18
		    tracePGMlnUtil(mDebugUtil_LAST);
		    tracenum(last_timer_1);
		)
	}

	last_timer_1 = next_timer_1;
   1f8b0:	90 93 23 01 	sts	0x0123, r25
   1f8b4:	80 93 22 01 	sts	0x0122, r24
   1f8b8:	08 95       	ret

0001f8ba <resetTick>:
}

void resetTick(void)
{
	TCNT1 = 0;
   1f8ba:	10 92 85 00 	sts	0x0085, r1
   1f8be:	10 92 84 00 	sts	0x0084, r1
	tick = 0;
   1f8c2:	10 92 21 01 	sts	0x0121, r1
   1f8c6:	10 92 20 01 	sts	0x0120, r1
   1f8ca:	08 95       	ret

0001f8cc <timedOut>:

uint8_t timedOut(void)
{
	// Never timeout if there is no code in Flash
#if (FLASHEND > 0x10000)
	if(pgm_read_word_far(0x0000) == 0xFFFF) return(0);
   1f8cc:	80 e0       	ldi	r24, 0x00	; 0
   1f8ce:	90 e0       	ldi	r25, 0x00	; 0
   1f8d0:	dc 01       	movw	r26, r24
   1f8d2:	ab bf       	out	0x3b, r26	; 59
   1f8d4:	fc 01       	movw	r30, r24
   1f8d6:	87 91       	elpm	r24, Z+
   1f8d8:	96 91       	elpm	r25, Z
   1f8da:	01 96       	adiw	r24, 0x01	; 1
   1f8dc:	41 f0       	breq	.+16     	; 0x1f8ee <timedOut+0x22>
#else
	if(pgm_read_word_near(0x0000) == 0xFFFF) return(0);
#endif

	if(tick > TIMEOUT) return(1);
   1f8de:	81 e0       	ldi	r24, 0x01	; 1
   1f8e0:	20 91 20 01 	lds	r18, 0x0120
   1f8e4:	30 91 21 01 	lds	r19, 0x0121
   1f8e8:	25 30       	cpi	r18, 0x05	; 5
   1f8ea:	31 05       	cpc	r19, r1
   1f8ec:	08 f4       	brcc	.+2      	; 0x1f8f0 <timedOut+0x24>

uint8_t timedOut(void)
{
	// Never timeout if there is no code in Flash
#if (FLASHEND > 0x10000)
	if(pgm_read_word_far(0x0000) == 0xFFFF) return(0);
   1f8ee:	80 e0       	ldi	r24, 0x00	; 0
	if(pgm_read_word_near(0x0000) == 0xFFFF) return(0);
#endif

	if(tick > TIMEOUT) return(1);
	else return(0);
}
   1f8f0:	08 95       	ret

0001f8f2 <verifySpace>:
static uint16_t address = 0;
static uint8_t  length;

static void verifySpace(void)
{
	if(getch() != CRC_EOP) {
   1f8f2:	aa df       	rcall	.-172    	; 0x1f848 <getch>
   1f8f4:	80 32       	cpi	r24, 0x20	; 32
   1f8f6:	39 f0       	breq	.+14     	; 0x1f906 <verifySpace+0x14>
		WDTCSR = _BV(WDCE) | _BV(WDE);
   1f8f8:	88 e1       	ldi	r24, 0x18	; 24
   1f8fa:	80 93 60 00 	sts	0x0060, r24
		WDTCSR = WATCHDOG_16MS;	// shorten WD timeout
   1f8fe:	88 e0       	ldi	r24, 0x08	; 8
   1f900:	80 93 60 00 	sts	0x0060, r24
   1f904:	ff cf       	rjmp	.-2      	; 0x1f904 <verifySpace+0x12>
		while(1)				// and busy-loop so that WD causes
			;					// a reset and app start.
	}
	putch(STK_INSYNC);
   1f906:	84 e1       	ldi	r24, 0x14	; 20
   1f908:	92 cf       	rjmp	.-220    	; 0x1f82e <putch>

0001f90a <getNch>:
}


static void getNch(uint8_t count)
{
   1f90a:	cf 93       	push	r28
   1f90c:	c8 2f       	mov	r28, r24
	do getch();
   1f90e:	9c df       	rcall	.-200    	; 0x1f848 <getch>
	while(--count);
   1f910:	c1 50       	subi	r28, 0x01	; 1
   1f912:	e9 f7       	brne	.-6      	; 0x1f90e <getNch+0x4>
	verifySpace();
}
   1f914:	cf 91       	pop	r28

static void getNch(uint8_t count)
{
	do getch();
	while(--count);
	verifySpace();
   1f916:	ed cf       	rjmp	.-38     	; 0x1f8f2 <verifySpace>

0001f918 <processOptiboot>:
}


uint8_t processOptiboot(void)
{
   1f918:	cf 92       	push	r12
   1f91a:	df 92       	push	r13
   1f91c:	ef 92       	push	r14
   1f91e:	ff 92       	push	r15
   1f920:	0f 93       	push	r16
   1f922:	1f 93       	push	r17
   1f924:	cf 93       	push	r28
   1f926:	df 93       	push	r29
   1f928:	cd b7       	in	r28, 0x3d	; 61
   1f92a:	de b7       	in	r29, 0x3e	; 62
   1f92c:	c1 50       	subi	r28, 0x01	; 1
   1f92e:	d1 40       	sbci	r29, 0x01	; 1
   1f930:	de bf       	out	0x3e, r29	; 62
   1f932:	cd bf       	out	0x3d, r28	; 61
	uint8_t ch;

	ch = getch();
   1f934:	89 df       	rcall	.-238    	; 0x1f848 <getch>

	if(ch == STK_GET_PARAMETER) {
   1f936:	81 34       	cpi	r24, 0x41	; 65
   1f938:	a9 f4       	brne	.+42     	; 0x1f964 <processOptiboot+0x4c>
		unsigned char which = getch();
   1f93a:	86 df       	rcall	.-244    	; 0x1f848 <getch>
		verifySpace();
   1f93c:	cf 5f       	subi	r28, 0xFF	; 255
   1f93e:	de 4f       	sbci	r29, 0xFE	; 254
   1f940:	88 83       	st	Y, r24
   1f942:	c1 50       	subi	r28, 0x01	; 1
   1f944:	d1 40       	sbci	r29, 0x01	; 1
   1f946:	d5 df       	rcall	.-86     	; 0x1f8f2 <verifySpace>
		if(which == 0x82) {
   1f948:	cf 5f       	subi	r28, 0xFF	; 255
   1f94a:	de 4f       	sbci	r29, 0xFE	; 254
   1f94c:	88 81       	ld	r24, Y
   1f94e:	c1 50       	subi	r28, 0x01	; 1
   1f950:	d1 40       	sbci	r29, 0x01	; 1
   1f952:	82 38       	cpi	r24, 0x82	; 130
   1f954:	11 f4       	brne	.+4      	; 0x1f95a <processOptiboot+0x42>
			/*
			 * Send tftpboot version as "minor SW version"
			 */
			putch(ARIADNE_MINVER);
   1f956:	84 e0       	ldi	r24, 0x04	; 4
   1f958:	03 c0       	rjmp	.+6      	; 0x1f960 <processOptiboot+0x48>
		} else if(which == 0x81) {
   1f95a:	81 38       	cpi	r24, 0x81	; 129
   1f95c:	21 f1       	breq	.+72     	; 0x1f9a6 <processOptiboot+0x8e>
		} else {
			/*
			 * GET PARAMETER returns a generic 0x03 reply for
			 * other parameters - enough to keep Avrdude happy
			 */
			putch(0x03);
   1f95e:	83 e0       	ldi	r24, 0x03	; 3
   1f960:	66 df       	rcall	.-308    	; 0x1f82e <putch>
   1f962:	ca c0       	rjmp	.+404    	; 0x1faf8 <processOptiboot+0x1e0>
		}
	} else if(ch == STK_SET_DEVICE) {
   1f964:	82 34       	cpi	r24, 0x42	; 66
   1f966:	11 f4       	brne	.+4      	; 0x1f96c <processOptiboot+0x54>
		// SET DEVICE is ignored
		getNch(20);
   1f968:	84 e1       	ldi	r24, 0x14	; 20
   1f96a:	03 c0       	rjmp	.+6      	; 0x1f972 <processOptiboot+0x5a>
	} else if(ch == STK_SET_DEVICE_EXT) {
   1f96c:	85 34       	cpi	r24, 0x45	; 69
   1f96e:	19 f4       	brne	.+6      	; 0x1f976 <processOptiboot+0x5e>
		// SET DEVICE EXT is ignored
		getNch(4);
   1f970:	84 e0       	ldi	r24, 0x04	; 4
   1f972:	cb df       	rcall	.-106    	; 0x1f90a <getNch>
   1f974:	c1 c0       	rjmp	.+386    	; 0x1faf8 <processOptiboot+0x1e0>
	} else if(ch == STK_LOAD_ADDRESS) {
   1f976:	85 35       	cpi	r24, 0x55	; 85
   1f978:	91 f4       	brne	.+36     	; 0x1f99e <processOptiboot+0x86>
		// LOAD ADDRESS
		uint16_t newAddress;
		newAddress = getch();
   1f97a:	66 df       	rcall	.-308    	; 0x1f848 <getch>
   1f97c:	18 2f       	mov	r17, r24
		newAddress = (newAddress & 0xff) | (getch() << 8);
   1f97e:	64 df       	rcall	.-312    	; 0x1f848 <getch>
   1f980:	21 2f       	mov	r18, r17
   1f982:	30 e0       	ldi	r19, 0x00	; 0
   1f984:	38 2b       	or	r19, r24

#ifdef RAMPZ
		// Transfer top bit to RAMPZ
		RAMPZ = (newAddress & 0x8000) ? 1 : 0;
   1f986:	83 2f       	mov	r24, r19
   1f988:	88 1f       	adc	r24, r24
   1f98a:	88 27       	eor	r24, r24
   1f98c:	88 1f       	adc	r24, r24
   1f98e:	8b bf       	out	0x3b, r24	; 59
#endif

		newAddress += newAddress; // Convert from word address to byte address
   1f990:	22 0f       	add	r18, r18
   1f992:	33 1f       	adc	r19, r19
		address = newAddress;
   1f994:	30 93 26 01 	sts	0x0126, r19
   1f998:	20 93 25 01 	sts	0x0125, r18
   1f99c:	ac c0       	rjmp	.+344    	; 0x1faf6 <processOptiboot+0x1de>
		verifySpace();
	} else if(ch == STK_UNIVERSAL) {
   1f99e:	86 35       	cpi	r24, 0x56	; 86
   1f9a0:	21 f4       	brne	.+8      	; 0x1f9aa <processOptiboot+0x92>
		// UNIVERSAL command is ignored
		getNch(4);
   1f9a2:	84 e0       	ldi	r24, 0x04	; 4
   1f9a4:	b2 df       	rcall	.-156    	; 0x1f90a <getNch>
		putch(0x00);
   1f9a6:	80 e0       	ldi	r24, 0x00	; 0
   1f9a8:	db cf       	rjmp	.-74     	; 0x1f960 <processOptiboot+0x48>
	}
	/* Write memory, length is big endian and is in bytes */
	else if(ch == STK_PROG_PAGE) {
   1f9aa:	84 36       	cpi	r24, 0x64	; 100
   1f9ac:	09 f0       	breq	.+2      	; 0x1f9b0 <processOptiboot+0x98>
   1f9ae:	70 c0       	rjmp	.+224    	; 0x1fa90 <processOptiboot+0x178>
		// PROGRAM PAGE - we support flash programming only, not EEPROM
		uint8_t  buff[256];
		uint8_t* bufPtr;
		uint16_t addrPtr;

		getch();			/* getlen() */
   1f9b0:	4b df       	rcall	.-362    	; 0x1f848 <getch>
		length = getch();
   1f9b2:	4a df       	rcall	.-364    	; 0x1f848 <getch>
   1f9b4:	80 93 24 01 	sts	0x0124, r24
		getch();
   1f9b8:	47 df       	rcall	.-370    	; 0x1f848 <getch>

		// If we are in RWW section, immediately start page erase
		if(address < NRWWSTART) boot_page_erase((uint16_t)(void*)address);
   1f9ba:	80 91 25 01 	lds	r24, 0x0125
   1f9be:	90 91 26 01 	lds	r25, 0x0126
   1f9c2:	81 15       	cp	r24, r1
   1f9c4:	20 ee       	ldi	r18, 0xE0	; 224
   1f9c6:	92 07       	cpc	r25, r18
   1f9c8:	48 f4       	brcc	.+18     	; 0x1f9dc <processOptiboot+0xc4>
   1f9ca:	a0 e0       	ldi	r26, 0x00	; 0
   1f9cc:	b0 e0       	ldi	r27, 0x00	; 0
   1f9ce:	23 e0       	ldi	r18, 0x03	; 3
   1f9d0:	fc 01       	movw	r30, r24
   1f9d2:	a0 93 5b 00 	sts	0x005B, r26
   1f9d6:	20 93 57 00 	sts	0x0057, r18
   1f9da:	e8 95       	spm
   1f9dc:	ce 01       	movw	r24, r28
   1f9de:	01 96       	adiw	r24, 0x01	; 1
   1f9e0:	7c 01       	movw	r14, r24
   1f9e2:	8c 01       	movw	r16, r24

		// While that is going on, read in page contents
		bufPtr = buff;
		do* bufPtr++ = getch();
   1f9e4:	31 df       	rcall	.-414    	; 0x1f848 <getch>
   1f9e6:	f7 01       	movw	r30, r14
   1f9e8:	81 93       	st	Z+, r24
   1f9ea:	7f 01       	movw	r14, r30
		while(--length);
   1f9ec:	80 91 24 01 	lds	r24, 0x0124
   1f9f0:	81 50       	subi	r24, 0x01	; 1
   1f9f2:	80 93 24 01 	sts	0x0124, r24
   1f9f6:	81 11       	cpse	r24, r1
   1f9f8:	f5 cf       	rjmp	.-22     	; 0x1f9e4 <processOptiboot+0xcc>

		// If we are in NRWW section, page erase has to be delayed until now.
		// Todo: Take RAMPZ into account
		if(address >= NRWWSTART) boot_page_erase((uint16_t)(void*)address);
   1f9fa:	80 91 25 01 	lds	r24, 0x0125
   1f9fe:	90 91 26 01 	lds	r25, 0x0126
   1fa02:	81 15       	cp	r24, r1
   1fa04:	f0 ee       	ldi	r31, 0xE0	; 224
   1fa06:	9f 07       	cpc	r25, r31
   1fa08:	48 f0       	brcs	.+18     	; 0x1fa1c <processOptiboot+0x104>
   1fa0a:	a0 e0       	ldi	r26, 0x00	; 0
   1fa0c:	b0 e0       	ldi	r27, 0x00	; 0
   1fa0e:	23 e0       	ldi	r18, 0x03	; 3
   1fa10:	fc 01       	movw	r30, r24
   1fa12:	a0 93 5b 00 	sts	0x005B, r26
   1fa16:	20 93 57 00 	sts	0x0057, r18
   1fa1a:	e8 95       	spm

		// Read command terminator, start reply
		verifySpace();
   1fa1c:	6a df       	rcall	.-300    	; 0x1f8f2 <verifySpace>

		// If only a partial page is to be programmed, the erase might not be complete.
		// So check that here
		boot_spm_busy_wait();
   1fa1e:	07 b6       	in	r0, 0x37	; 55
   1fa20:	00 fc       	sbrc	r0, 0
   1fa22:	fd cf       	rjmp	.-6      	; 0x1fa1e <processOptiboot+0x106>

		// Copy buffer into programming buffer
		bufPtr = buff;
		addrPtr = (uint16_t)(void*)address;
   1fa24:	80 91 25 01 	lds	r24, 0x0125
   1fa28:	90 91 26 01 	lds	r25, 0x0126
		// If only a partial page is to be programmed, the erase might not be complete.
		// So check that here
		boot_spm_busy_wait();

		// Copy buffer into programming buffer
		bufPtr = buff;
   1fa2c:	a9 81       	ldd	r26, Y+1	; 0x01
   1fa2e:	20 e0       	ldi	r18, 0x00	; 0
   1fa30:	30 e0       	ldi	r19, 0x00	; 0
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
			boot_page_fill((uint16_t)(void*)addrPtr, a);
   1fa32:	dd 24       	eor	r13, r13
   1fa34:	d3 94       	inc	r13
   1fa36:	78 01       	movw	r14, r16
   1fa38:	e2 0e       	add	r14, r18
   1fa3a:	f3 1e       	adc	r15, r19
   1fa3c:	a9 01       	movw	r20, r18
   1fa3e:	48 0f       	add	r20, r24
   1fa40:	59 1f       	adc	r21, r25
   1fa42:	60 e0       	ldi	r22, 0x00	; 0
   1fa44:	70 e0       	ldi	r23, 0x00	; 0
		addrPtr = (uint16_t)(void*)address;
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
   1fa46:	f7 01       	movw	r30, r14
   1fa48:	c1 80       	ldd	r12, Z+1	; 0x01
   1fa4a:	b0 e0       	ldi	r27, 0x00	; 0
   1fa4c:	bc 29       	or	r27, r12
			boot_page_fill((uint16_t)(void*)addrPtr, a);
   1fa4e:	0d 01       	movw	r0, r26
   1fa50:	fa 01       	movw	r30, r20
   1fa52:	60 93 5b 00 	sts	0x005B, r22
   1fa56:	d0 92 57 00 	sts	0x0057, r13
   1fa5a:	e8 95       	spm
   1fa5c:	11 24       	eor	r1, r1
			addrPtr += 2;
		} while(--ch);
   1fa5e:	2e 3f       	cpi	r18, 0xFE	; 254
   1fa60:	31 05       	cpc	r19, r1
   1fa62:	29 f0       	breq	.+10     	; 0x1fa6e <processOptiboot+0x156>
   1fa64:	2e 5f       	subi	r18, 0xFE	; 254
   1fa66:	3f 4f       	sbci	r19, 0xFF	; 255
		addrPtr = (uint16_t)(void*)address;
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
   1fa68:	f7 01       	movw	r30, r14
   1fa6a:	a2 81       	ldd	r26, Z+2	; 0x02
   1fa6c:	e4 cf       	rjmp	.-56     	; 0x1fa36 <processOptiboot+0x11e>
			boot_page_fill((uint16_t)(void*)addrPtr, a);
			addrPtr += 2;
		} while(--ch);

		// Write from programming buffer
		boot_page_write((uint16_t)(void*)address);
   1fa6e:	a0 e0       	ldi	r26, 0x00	; 0
   1fa70:	b0 e0       	ldi	r27, 0x00	; 0
   1fa72:	25 e0       	ldi	r18, 0x05	; 5
   1fa74:	fc 01       	movw	r30, r24
   1fa76:	a0 93 5b 00 	sts	0x005B, r26
   1fa7a:	20 93 57 00 	sts	0x0057, r18
   1fa7e:	e8 95       	spm
		boot_spm_busy_wait();
   1fa80:	07 b6       	in	r0, 0x37	; 55
   1fa82:	00 fc       	sbrc	r0, 0
   1fa84:	fd cf       	rjmp	.-6      	; 0x1fa80 <processOptiboot+0x168>

#if defined(RWWSRE)
		// Reenable read access to flash
		boot_rww_enable();
   1fa86:	81 e1       	ldi	r24, 0x11	; 17
   1fa88:	80 93 57 00 	sts	0x0057, r24
   1fa8c:	e8 95       	spm
   1fa8e:	34 c0       	rjmp	.+104    	; 0x1faf8 <processOptiboot+0x1e0>
#endif
	}
	/* Read memory block mode, length is big endian.  */
	else if(ch == STK_READ_PAGE) {
   1fa90:	84 37       	cpi	r24, 0x74	; 116
   1fa92:	e9 f4       	brne	.+58     	; 0x1face <processOptiboot+0x1b6>
		// READ PAGE - we only read flash
		getch();			/* getlen() */
   1fa94:	d9 de       	rcall	.-590    	; 0x1f848 <getch>
		length = getch();
   1fa96:	d8 de       	rcall	.-592    	; 0x1f848 <getch>
   1fa98:	80 93 24 01 	sts	0x0124, r24
		getch();
   1fa9c:	d5 de       	rcall	.-598    	; 0x1f848 <getch>

		verifySpace();
   1fa9e:	29 df       	rcall	.-430    	; 0x1f8f2 <verifySpace>

		//      do putch(pgm_read_byte_near(address++));
		//      while (--length);
		do {
			uint8_t result;
			__asm__("elpm %0,Z\n":"=r"(result):"z"(address));
   1faa0:	e0 91 25 01 	lds	r30, 0x0125
   1faa4:	f0 91 26 01 	lds	r31, 0x0126
   1faa8:	86 91       	elpm	r24, Z
			putch(result);
   1faaa:	c1 de       	rcall	.-638    	; 0x1f82e <putch>
			address++;
   1faac:	80 91 25 01 	lds	r24, 0x0125
   1fab0:	90 91 26 01 	lds	r25, 0x0126
   1fab4:	01 96       	adiw	r24, 0x01	; 1
   1fab6:	90 93 26 01 	sts	0x0126, r25
   1faba:	80 93 25 01 	sts	0x0125, r24
		} while(--length);
   1fabe:	80 91 24 01 	lds	r24, 0x0124
   1fac2:	81 50       	subi	r24, 0x01	; 1
   1fac4:	80 93 24 01 	sts	0x0124, r24
   1fac8:	81 11       	cpse	r24, r1
   1faca:	ea cf       	rjmp	.-44     	; 0x1faa0 <processOptiboot+0x188>
   1facc:	15 c0       	rjmp	.+42     	; 0x1faf8 <processOptiboot+0x1e0>
		do putch(pgm_read_byte_near(address++));
		while(--length);
#endif
	}
	/* Get device signature bytes  */
	else if(ch == STK_READ_SIGN) {
   1face:	85 37       	cpi	r24, 0x75	; 117
   1fad0:	39 f4       	brne	.+14     	; 0x1fae0 <processOptiboot+0x1c8>
		// READ SIGN - return what Avrdude wants to hear
		verifySpace();
   1fad2:	0f df       	rcall	.-482    	; 0x1f8f2 <verifySpace>
		putch(SIGNATURE_0);
   1fad4:	8e e1       	ldi	r24, 0x1E	; 30
   1fad6:	ab de       	rcall	.-682    	; 0x1f82e <putch>
		putch(SIGNATURE_1);
   1fad8:	87 e9       	ldi	r24, 0x97	; 151
   1fada:	a9 de       	rcall	.-686    	; 0x1f82e <putch>
		putch(SIGNATURE_2);
   1fadc:	85 e0       	ldi	r24, 0x05	; 5
   1fade:	40 cf       	rjmp	.-384    	; 0x1f960 <processOptiboot+0x48>
	} else if(ch == STK_LEAVE_PROGMODE) {
   1fae0:	81 35       	cpi	r24, 0x51	; 81
   1fae2:	49 f4       	brne	.+18     	; 0x1faf6 <processOptiboot+0x1de>
		// Adaboot no-wait mod
		//watchdogConfig(WATCHDOG_16MS);
		verifySpace();
   1fae4:	06 df       	rcall	.-500    	; 0x1f8f2 <verifySpace>
		eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
   1fae6:	6e ee       	ldi	r22, 0xEE	; 238
   1fae8:	82 e0       	ldi	r24, 0x02	; 2
   1faea:	90 e0       	ldi	r25, 0x00	; 0
   1faec:	27 d0       	rcall	.+78     	; 0x1fb3c <__eewr_byte_m1284p>
		putch(STK_OK);
   1faee:	80 e1       	ldi	r24, 0x10	; 16
   1faf0:	9e de       	rcall	.-708    	; 0x1f82e <putch>
		return(0);
   1faf2:	80 e0       	ldi	r24, 0x00	; 0
   1faf4:	04 c0       	rjmp	.+8      	; 0x1fafe <processOptiboot+0x1e6>
	} else {
		// This covers the response to commands like STK_ENTER_PROGMODE
		verifySpace();
   1faf6:	fd de       	rcall	.-518    	; 0x1f8f2 <verifySpace>
	}
	putch(STK_OK);
   1faf8:	80 e1       	ldi	r24, 0x10	; 16
   1fafa:	99 de       	rcall	.-718    	; 0x1f82e <putch>
	return(1);
   1fafc:	81 e0       	ldi	r24, 0x01	; 1
}
   1fafe:	cf 5f       	subi	r28, 0xFF	; 255
   1fb00:	de 4f       	sbci	r29, 0xFE	; 254
   1fb02:	de bf       	out	0x3e, r29	; 62
   1fb04:	cd bf       	out	0x3d, r28	; 61
   1fb06:	df 91       	pop	r29
   1fb08:	cf 91       	pop	r28
   1fb0a:	1f 91       	pop	r17
   1fb0c:	0f 91       	pop	r16
   1fb0e:	ff 90       	pop	r15
   1fb10:	ef 90       	pop	r14
   1fb12:	df 90       	pop	r13
   1fb14:	cf 90       	pop	r12
   1fb16:	08 95       	ret

0001fb18 <memcpy_PF>:
   1fb18:	6b bf       	out	0x3b, r22	; 59
   1fb1a:	fa 01       	movw	r30, r20
   1fb1c:	dc 01       	movw	r26, r24
   1fb1e:	02 c0       	rjmp	.+4      	; 0x1fb24 <memcpy_PF+0xc>
   1fb20:	07 90       	elpm	r0, Z+
   1fb22:	0d 92       	st	X+, r0
   1fb24:	21 50       	subi	r18, 0x01	; 1
   1fb26:	30 40       	sbci	r19, 0x00	; 0
   1fb28:	d8 f7       	brcc	.-10     	; 0x1fb20 <memcpy_PF+0x8>
   1fb2a:	08 95       	ret

0001fb2c <__eerd_byte_m1284p>:
   1fb2c:	f9 99       	sbic	0x1f, 1	; 31
   1fb2e:	fe cf       	rjmp	.-4      	; 0x1fb2c <__eerd_byte_m1284p>
   1fb30:	92 bd       	out	0x22, r25	; 34
   1fb32:	81 bd       	out	0x21, r24	; 33
   1fb34:	f8 9a       	sbi	0x1f, 0	; 31
   1fb36:	99 27       	eor	r25, r25
   1fb38:	80 b5       	in	r24, 0x20	; 32
   1fb3a:	08 95       	ret

0001fb3c <__eewr_byte_m1284p>:
   1fb3c:	26 2f       	mov	r18, r22

0001fb3e <__eewr_r18_m1284p>:
   1fb3e:	f9 99       	sbic	0x1f, 1	; 31
   1fb40:	fe cf       	rjmp	.-4      	; 0x1fb3e <__eewr_r18_m1284p>
   1fb42:	1f ba       	out	0x1f, r1	; 31
   1fb44:	92 bd       	out	0x22, r25	; 34
   1fb46:	81 bd       	out	0x21, r24	; 33
   1fb48:	20 bd       	out	0x20, r18	; 32
   1fb4a:	0f b6       	in	r0, 0x3f	; 63
   1fb4c:	f8 94       	cli
   1fb4e:	fa 9a       	sbi	0x1f, 2	; 31
   1fb50:	f9 9a       	sbi	0x1f, 1	; 31
   1fb52:	0f be       	out	0x3f, r0	; 63
   1fb54:	01 96       	adiw	r24, 0x01	; 1
   1fb56:	08 95       	ret

0001fb58 <_exit>:
   1fb58:	f8 94       	cli

0001fb5a <__stop_program>:
   1fb5a:	ff cf       	rjmp	.-2      	; 0x1fb5a <__stop_program>
